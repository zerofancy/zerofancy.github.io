<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>归零幻想</title>
    <link>https://ntutn.top/</link>
    <description>Recent content on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Tue, 30 Aug 2022 02:49:11 +0800</lastBuildDate>
    
        <atom:link href="https://ntutn.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>从头开始制作一个tg机器人</title>
        <link>https://ntutn.top/posts/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtg%E6%9C%BA%E5%99%A8%E4%BA%BA/</link>
        <pubDate>Tue, 30 Aug 2022 02:49:11 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtg%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtg%E6%9C%BA%E5%99%A8%E4%BA%BA/ -&lt;p&gt;工作之外，总想折腾点什么东西。最近看朋友搞的QQ摸鱼机器人有点意思，就想自己也搞一个。tg提供的API比较全面，所以就想搞个tg版。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/4fcad14a68f078ea886d454f9173e0d0.png&#34; alt=&#34;image-20220830032946945&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接贴代码：&lt;a href=&#34;https://github.com/rfkhx/starsea&#34;&gt;https://github.com/rfkhx/starsea&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;基本消息处理和分发&#34;&gt;基本消息处理和分发&lt;/h1&gt;
&lt;p&gt;其实仅就这个需求而言，并没有用多线程的必要性，一个死循环中拉取消息，拉到后交给对应模块处理，处理完继续下一次循环拉下一条消息就可以了。不过为了把代码结构写得更清楚一点，并希望能在这个过程中学到点东西，我决定仿照安卓的线程机制组织，将安卓中的 &lt;code&gt;Handler&lt;/code&gt;、&lt;code&gt;Looper&lt;/code&gt; 移植到我的项目中，借助这个过程更深入理解整个机制。&lt;/p&gt;
&lt;p&gt;类似安卓，我在后台线程进行网络请求，主线程进行结果的分发处理。&lt;/p&gt;
&lt;h2 id=&#34;message&#34;&gt;Message&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Message&lt;/code&gt; 就是消息对象。我对消息对象的定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Message&lt;/span&gt;(  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; what: Int,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; arg: Int = -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; payload: Any? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; time: Long = &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; target: Handler? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; callback: Runnable? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;  
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要理解整个消息机制，还是得先看这几个参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what 表示这是一条什么样的消息。一个 &lt;code&gt;Handler&lt;/code&gt; 中可能定义和处理多种不同的消息，通过这个参数进行区分。&lt;/li&gt;
&lt;li&gt;arg、payload 表示消息携带的参数。 &lt;code&gt;arg&lt;/code&gt; 是简单的， &lt;code&gt;Int&lt;/code&gt; 类型的参数，而 &lt;code&gt;payload&lt;/code&gt; 则用于传递复杂对象。按需使用&lt;/li&gt;
&lt;li&gt;time 表示 &lt;code&gt;Message&lt;/code&gt; 预期被处理的时间。只有到了这个时间之后消息才可以被取出处理。这对应我们经常用的 &lt;code&gt;handler.postDelayed&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;target 处理消息的 &lt;code&gt;Handler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;callback 消息处理时执行特定回调。实际上和继承相关 &lt;code&gt;Handler&lt;/code&gt; 并在相关方法中处理消息是等同的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;messagequeue&#34;&gt;MessageQueue&lt;/h2&gt;
&lt;p&gt;记得安卓中有个比较经典和基础的问题，主线程实际执行了 &lt;code&gt;Looper.loop()&lt;/code&gt; ，为什么不会卡死？&lt;/p&gt;
&lt;p&gt;首先我们看 &lt;code&gt;Looper&lt;/code&gt; 的实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/9af555bdbc0e5ef42784eed8e8219aac.png&#34; alt=&#34;Pasted image 20220825043217&#34;&gt;&lt;/p&gt;
&lt;p&gt;确认这里确实是个死循环，继续看单次循环 &lt;code&gt;loopOnce&lt;/code&gt; 方法做了什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/bd6595d2f86b8d42798042706166a27b.png&#34; alt=&#34;Pasted image 20220825043457&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先从 &lt;code&gt;MessageQueue&lt;/code&gt; 中取到一条消息，一些判断后实际走了 &lt;code&gt;Message&lt;/code&gt; 对应 &lt;code&gt;Handler&lt;/code&gt; 来处理消息。似乎看不到哪里处理了这个问题，但我们可以在取消息处看到一条注释“might block”。&lt;/p&gt;
&lt;p&gt;是的，这个队列有个特性，就是没有可用消息时，线程会阻塞在这里，就像我们用 &lt;code&gt;Scanner&lt;/code&gt; 读用户输入一样，只有有了输入程序才会继续运行，所以不会占满CPU资源。而用户感受到的卡顿发生实际上是主线程堆积的消息过多，无法及时处理导致的，与这里用一个死循环处理消息没有直接关系。这里更多拓展探讨可以参考 &lt;a href=&#34;https://www.wanandroid.com/wenda/show/8685&#34;&gt;每日一问 Looper.loop为什么不会阻塞掉UI线程？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;幸运的是，java已经有具有这样功能的队列实现了，它就是 &lt;code&gt;java.util.concurrent.DelayQueue&lt;/code&gt; 。只要让我们的 &lt;code&gt;Message&lt;/code&gt; 类实现 &lt;code&gt;Delayed&lt;/code&gt; 接口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Message&lt;/span&gt;(  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; what: Int,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; arg: Int = -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; payload: Any? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; time: Long = &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; target: Handler? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; callback: Runnable? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;  
): Delayed {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;compareTo&lt;/span&gt;(other: Delayed?): Int {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; value1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.getDelay(TimeUnit.MILLISECONDS)  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; value2 = (other?.getDelay(TimeUnit.MILLISECONDS)?: &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;)  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (value1 - value2).getSymbolInt()  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getDelay&lt;/span&gt;(unit: TimeUnit): Long {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; diffTime = time - System.currentTimeMillis()  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; unit.convert(diffTime, TimeUnit.MILLISECONDS)  
    }  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/*  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 安全地提取符号，将long转换成 -1 0 1     */&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Long&lt;/span&gt;.getSymbolInt(): Int {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; value = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (value == &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;) {  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;  
        }  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (value / abs(value)).toInt()  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们就可以直接用这个 &lt;code&gt;DelayQueue&lt;/code&gt; 作为我们的 &lt;code&gt;MessageQueue&lt;/code&gt; 了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MessageQueue&lt;/span&gt; {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; mQueue = DelayQueue&amp;lt;Message&amp;gt;()  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;enqueue&lt;/span&gt;(msg: Message) {  
        msg.time = &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;  
        mQueue.put(msg)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;enqueue&lt;/span&gt;(msg: Message, time: Long) {  
        msg.time = time  
        mQueue.put(msg)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;poll&lt;/span&gt;(): Message {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; mQueue.take()  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;clearMessages&lt;/span&gt;(handler: Handler) {  
        mQueue.removeIf { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.target == handler }  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;looper&#34;&gt;Looper&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Looper&lt;/code&gt; 的核心代码抽离出来比较简单，我就直接贴出来了。 &lt;code&gt;Looper&lt;/code&gt; 中持有 &lt;code&gt;MessageQueue&lt;/code&gt; ，是整个消息循环的核心。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Looper&lt;/span&gt; {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; mQueue = MessageQueue()  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; sThreadLocal = ThreadLocal&amp;lt;Looper&amp;gt;()  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; sMainLooper: Looper? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;myLooper&lt;/span&gt;() = sThreadLocal.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;()  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;mainLooper&lt;/span&gt;() = sMainLooper!!  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;prepare&lt;/span&gt;() {  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (sThreadLocal.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;looper prepared&amp;#34;&lt;/span&gt;)  
            }  
            sThreadLocal.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;set&lt;/span&gt;(Looper())  
        }  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;prepareMainLooper&lt;/span&gt;() {  
            prepare()  
            synchronized(Looper::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;) {  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (sMainLooper != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {  
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main looper prepared&amp;#34;&lt;/span&gt;)  
                }  
                sMainLooper = myLooper()  
            }  
        }  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;loop&lt;/span&gt;() {  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; me = myLooper() ?: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;you should call prepare first&amp;#34;&lt;/span&gt;)  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; message = me.mQueue.poll()  
                message.target?.dispatchMessage(message)  
            }  
        }  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里唯一一个知识点就是 &lt;code&gt;ThreadLocal&lt;/code&gt; 的使用。这里借用 &lt;a href=&#34;https://www.liaoxuefeng.com/wiki/1252599548343744/1306581251653666&#34;&gt;廖雪峰的教程&lt;/a&gt; 中的一句话：“实际上，可以把&lt;code&gt;ThreadLocal&lt;/code&gt;看成一个全局&lt;code&gt;Map&amp;lt;Thread, Object&amp;gt;&lt;/code&gt;：每个线程获取&lt;code&gt;ThreadLocal&lt;/code&gt;变量时，总是使用&lt;code&gt;Thread&lt;/code&gt;自身作为key”。&lt;/p&gt;
&lt;p&gt;每个线程 &lt;code&gt;prepare&lt;/code&gt; 后都绑定了一个 &lt;code&gt;Looper&lt;/code&gt; ，这个 &lt;code&gt;Looper&lt;/code&gt; 就是放在 &lt;code&gt;ThreadLocal&lt;/code&gt; 中的，此后我们在某一线程执行 &lt;code&gt;sThreadLocal.get()&lt;/code&gt; 拿到的就是这个线程的 &lt;code&gt;Looper&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;handler&#34;&gt;Handler&lt;/h2&gt;
&lt;p&gt;终于到了激动人心的时刻了，我们理到了最常使用和打交道的 &lt;code&gt;Handler&lt;/code&gt; 。核心逻辑实际上要比我想象的简单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Handler&lt;/span&gt;(looper: Looper? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; EMPTY_MESSAGE = Message(-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; mLooper: Looper  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; mQueue: MessageQueue  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; mCallback: ((Message) -&amp;gt; Unit)? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;init&lt;/span&gt; {  
        mLooper = looper ?: Looper.myLooper() ?: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;looper not prepared&amp;#34;&lt;/span&gt;)  
        mQueue = mLooper.mQueue  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sendMessage&lt;/span&gt;(msg: Message) = sendMessageDelay(msg, &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;)  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sendMessageDelay&lt;/span&gt;(msg: Message, delay: Long) {  
        require(delay &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0L&lt;/span&gt;) { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;delay cannot be negative&amp;#34;&lt;/span&gt; }  
        msg.target = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;  
        mQueue.enqueue(msg, System.currentTimeMillis() + delay)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sendEmptyMessage&lt;/span&gt;() = sendMessage(EMPTY_MESSAGE)  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sendEmptyMessageDelayed&lt;/span&gt;(delay: Long) = sendMessageDelay(EMPTY_MESSAGE, delay)  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;post&lt;/span&gt;(block: () -&amp;gt; Unit) {  
        sendMessage(Message(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, callback = block))  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;postDelayed&lt;/span&gt;(block: () -&amp;gt; Unit, delay: Long) {  
        sendMessageDelay(Message(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, callback = block), delay)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;dispatchMessage&lt;/span&gt;(message: Message) {  
        message.callback?.run() ?: mCallback?.invoke(message) ?: handleMessage(message)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;clearMessages&lt;/span&gt;() {  
        mQueue.clearMessages(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;handleMessage&lt;/span&gt;(message: Message) {}  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个 &lt;code&gt;Handler&lt;/code&gt; 对应一个 &lt;code&gt;Looper&lt;/code&gt; ，&lt;code&gt;sendMessage&lt;/code&gt; 实际上就是把对应的 &lt;code&gt;Message&lt;/code&gt; 插入到了对应的 &lt;code&gt;MessageQueue&lt;/code&gt; 中。而后阻塞在 &lt;code&gt;Looper.loop&lt;/code&gt; 取下一条消息位置的线程被唤醒，并根据 &lt;code&gt;Message.target&lt;/code&gt; 找到了发送消息的 &lt;code&gt;Handler.dispatchMessage&lt;/code&gt; 来执行，而后实际执行对应callback或handleMessage方法。&lt;/p&gt;
&lt;h2 id=&#34;kotlin协程兼容&#34;&gt;Kotlin协程兼容&lt;/h2&gt;
&lt;p&gt;根据我们前面的设计，我们有主线程和后台线程之分。Kotlin协程的实现上， &lt;code&gt;Dispatchers.IO&lt;/code&gt; 实际上是个未设置上限的线程池，但 &lt;code&gt;Dispatchers.Main&lt;/code&gt; 可是需要切换回主线程来执行对应代码的。我们怎么做这里的兼容，使之能切换回我们定义的“主线程”呢？&lt;/p&gt;
&lt;p&gt;继续看代码，通过SPI加载了MainDispatcherFactory。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/9f27357e82b119c6fa75ef49d5696302.png&#34; alt=&#34;Pasted image 20220825052152&#34;&gt;&lt;/p&gt;
&lt;p&gt;继续找，很快找到了安卓对应的实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/516a7a7b328ae08f0b23911258fcbd73.png&#34; alt=&#34;Pasted image 20220825052357&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/0c622b2059b0ec440cfc3fcf882a6d91.png&#34; alt=&#34;Pasted image 20220825052541&#34;&gt;&lt;/p&gt;
&lt;p&gt;其实就是将对应的代码post到了主线程去处理。所以仿照它，我的“青春版”实现也有了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@OptIn&lt;/span&gt;(InternalCoroutinesApi::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;)  
&lt;span style=&#34;color:#707a7c&#34;&gt;@AutoService&lt;/span&gt;(MainDispatcherFactory::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;)  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainDispatcherFactoryImpl&lt;/span&gt;: MainDispatcherFactory {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; loadPriority: Int  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;() = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;createDispatcher&lt;/span&gt;(allFactories: List&amp;lt;MainDispatcherFactory&amp;gt;): MainCoroutineDispatcher {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; MainDispatcher()  
    }  
}  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainDispatcher&lt;/span&gt;: MainCoroutineDispatcher() {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; handler = Handler(Looper.mainLooper())  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; immediate: MainCoroutineDispatcher  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;() = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;dispatch&lt;/span&gt;(context: CoroutineContext, block: Runnable) {  
        handler.sendMessage(Message(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, callback = block))  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;消息的拉取&#34;&gt;消息的拉取&lt;/h1&gt;
&lt;h2 id=&#34;长轮询的实现&#34;&gt;长轮询的实现&lt;/h2&gt;
&lt;p&gt;tg的消息都是由一个叫做 &lt;code&gt;getUpdate&lt;/code&gt; 的接口拉取的，而通过这个接口获取消息要做&lt;a href=&#34;https://zh.javascript.info/long-polling&#34;&gt;长轮询&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;长轮询是什么？与普通的轮询方式不同，长轮询在发出请求后如果没有消息返回，服务端将不会立即返回，而是等有消息或超时再返回，而后客户端发起下一个请求。这一是能在有消息到达时让客户端及时收到通知，二是在没有消息时不会浪费太多无用请求。&lt;/p&gt;
&lt;p&gt;我的网络请求部分是 &lt;code&gt;Retrofit&lt;/code&gt; ，我发现单独给某个请求设置不同的超时时间还挺麻烦的。我参考 &lt;a href=&#34;https://github.com/square/retrofit/issues/2982&#34;&gt;这里的讨论&lt;/a&gt; 总结如下：&lt;/p&gt;
&lt;p&gt;首先将 &lt;code&gt;OkHttp&lt;/code&gt; 的超时时间设置为一个很大的值，保证不会影响到我们后面的设置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; okHttpClient: OkHttpClient &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy {  
    OkHttpClient.Builder()  
        .connectTimeout(&lt;span style=&#34;color:#b452cd&#34;&gt;1L&lt;/span&gt;, TimeUnit.DAYS) &lt;span style=&#34;color:#228b22&#34;&gt;// 超时相关逻辑由 [top.ntutn.starsea.network.TimeoutCallAdapterFactory] 控制  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        .readTimeout(&lt;span style=&#34;color:#b452cd&#34;&gt;1L&lt;/span&gt;, TimeUnit.DAYS)  
        .writeTimeout(&lt;span style=&#34;color:#b452cd&#34;&gt;1L&lt;/span&gt;, TimeUnit.DAYS)  
        .build()  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;声明一个注解，用于指定单个连接的超时时间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Retention&lt;/span&gt;(AnnotationRetention.RUNTIME)  
&lt;span style=&#34;color:#707a7c&#34;&gt;@Target&lt;/span&gt;(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER)  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; value: Long, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; unit: TimeUnit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 &lt;code&gt;Retrofit&lt;/code&gt; 对象时，添加一个 &lt;code&gt;CallAdapterFactory&lt;/code&gt; ，读取注解设置超时时间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; retrofit: Retrofit &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy {  
    Retrofit.Builder()  
        .baseUrl(BASE_URL)  
        .addConverterFactory(KotlinSerializeUtil.json.asConverterFactory(MediaType.parse(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;)!!))  
        .addCallAdapterFactory(TimeoutCallAdapterFactory())  
        .client(okHttpClient)  
        .build()  
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;TimeoutCallAdapterFactory&lt;/span&gt; : CallAdapter.Factory(), LoggerOwner &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; slf4jLoggerOwner&amp;lt;TimeoutCallAdapterFactory&amp;gt;() {  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;get&lt;/span&gt;(returnType: Type, annotations: Array&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; Annotation&amp;gt;, retrofit: Retrofit): CallAdapter&amp;lt;*, *&amp;gt;? {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; timeout = annotations.firstOrNull { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Timeout } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt;? Timeout  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; delegate = retrofit.nextCallAdapter(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;, returnType, annotations)  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (getRawType(returnType) != Call::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java) {  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;  
        }  
  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CallAdapter&lt;/span&gt;&amp;lt;Any, Call&amp;lt;Any&amp;gt;&amp;gt; {  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;responseType&lt;/span&gt;(): Type {  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt;.responseType()  
            }  
  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;adapt&lt;/span&gt;(call: Call&amp;lt;Any&amp;gt;): Call&amp;lt;Any&amp;gt; {  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; path = call.request().url().url().path  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (timeout != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {  
                    logger.debug(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请求{}的超时时间被设置为{} {}&amp;#34;&lt;/span&gt;, path, timeout.value, timeout.unit)  
                    call.timeout().timeout(timeout.value, timeout.unit)  
                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {  
                    logger.debug(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请求{}的超时时间被设置为默认值{} s&amp;#34;&lt;/span&gt;, path, RetrofitManager.DEFAULT_TIMEOUT.toLong())  
                    call.timeout().timeout(RetrofitManager.DEFAULT_TIMEOUT.toLong(), TimeUnit.SECONDS)  
                }  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; call  
            }  
        }  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以借助注解便捷地指定某单个请求的超时时间了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * [Telegram Bot API](https://core.telegram.org/bots/api) */&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BotApi&lt;/span&gt; {  
  
    &lt;span style=&#34;color:#707a7c&#34;&gt;@GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/bot{token}/getMe&amp;#34;&lt;/span&gt;)  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getMe&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@Path&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;) token: BotToken): ResultWrapperBean&amp;lt;UserBean&amp;gt;  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 获取更新消息，长连接  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Headers&lt;/span&gt;(  
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${RetrofitManager.READ_TIMEOUT}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;: 6000&amp;#34;&lt;/span&gt;,  
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${RetrofitManager.WRITE_TIMEOUT}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;: 6000&amp;#34;&lt;/span&gt;,  
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${RetrofitManager.CONNECT_TIMEOUT}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;: 6000&amp;#34;&lt;/span&gt;  
    )  
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Timeout&lt;/span&gt;(value = &lt;span style=&#34;color:#b452cd&#34;&gt;60L&lt;/span&gt;, unit = TimeUnit.SECONDS)  
    &lt;span style=&#34;color:#707a7c&#34;&gt;@GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/bot{token}/getUpdates?timeout=30&amp;amp;allowed_updates=message,edited_message&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// timeout单位秒  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getUpdates&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@Path&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;) token: BotToken, &lt;span style=&#34;color:#707a7c&#34;&gt;@Query&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;offset&amp;#34;&lt;/span&gt;) offset: Long? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;): ResultWrapperBean&amp;lt;List&amp;lt;UpdateBean&amp;gt;&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;消息循环实现&#34;&gt;消息循环实现&lt;/h2&gt;
&lt;p&gt;前面我们已经实现了安卓 &lt;code&gt;Handler&lt;/code&gt; 机制的简单移植和协程的支持，这里就写个 &lt;code&gt;Handler&lt;/code&gt; 来实现吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/d6cebada8649392ee9578f282fea2b1e.png&#34; alt=&#34;Pasted image 20220827025958&#34;&gt;&lt;/p&gt;
&lt;p&gt;当开始获取消息时发送了一条 &lt;code&gt;Message&lt;/code&gt; ，而后就开始执行单条消息的获取和处理了。注意不要捕获 &lt;code&gt;CancellationException&lt;/code&gt; 时重试，否则job取消时就死循环了。&lt;/p&gt;
&lt;h1 id=&#34;消息发送&#34;&gt;消息发送&lt;/h1&gt;
&lt;p&gt;简单消息的发送就不说了，唯一麻烦点的是用tg发送文件。接口定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BotApi&lt;/span&gt; {
&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * Use this method to send photos. On success, the sent Message is returned. * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param photo Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet. The photo must be at most 10 MB in size. The photo&amp;#39;s width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files »  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@POST&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/bot{token}/sendPhoto&amp;#34;&lt;/span&gt;)  
&lt;span style=&#34;color:#707a7c&#34;&gt;@Multipart&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sendPhoto&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@Path&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;) token: BotToken, &lt;span style=&#34;color:#707a7c&#34;&gt;@Part&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;chat_id&amp;#34;&lt;/span&gt;) chatId: RequestBody, &lt;span style=&#34;color:#707a7c&#34;&gt;@Part&lt;/span&gt; photo: MultipartBody.Part): ResultWrapperBean&amp;lt;MessageBean&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;String&lt;/span&gt;.toRequestBody(): RequestBody {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; RequestBody.create(MediaType.parse(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;)  
}  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;File&lt;/span&gt;.toMultiplePart(parameter: String): MultipartBody.Part {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; MultipartBody.Part.createFormData(parameter, name, RequestBody.create(MediaType.parse(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;multipart/form-data&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;))  
}

BotScope.launch(Dispatchers.IO) {  
    kotlin.runCatching {  
        BotApi.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;().sendPhoto(ConfigUtil.botToken, chatId.toRequestBody(), photoFile.toMultiplePart(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;photo&amp;#34;&lt;/span&gt;))  
    }.onFailure {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.printStackTrace()  
    }  
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;插件功能支持&#34;&gt;插件功能支持&lt;/h1&gt;
&lt;p&gt;因为 &lt;a href=&#34;https://www.ruiovo.top/&#34;&gt;我朋友&lt;/a&gt; 已经做了一个QQ摸鱼机器人，所以我想可以做个插件支持，“为了这碟醋做顿饺子”，生命在于折腾嘛。&lt;/p&gt;
&lt;h2 id=&#34;基本插件化原理&#34;&gt;基本插件化原理&lt;/h2&gt;
&lt;p&gt;java本身有加载外部jar的 &lt;code&gt;ClassLoader&lt;/code&gt; —— &lt;code&gt;URLClassLoader&lt;/code&gt; ，因此插件可以定义为单个外部jar包，插件与宿主之间借助SPI进行通信。&lt;/p&gt;
&lt;p&gt;因而，我首先定义插件API：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 机器人功能接口，需要插件来实现  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BotContentProvider&lt;/span&gt; {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; pluginName: String  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 插件加载事件  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onPluginLoaded&lt;/span&gt;() {}  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onTextMessage&lt;/span&gt;(context: TextChatContext): Boolean = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;  
}

  
&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 机器人收到消息上下文对象，可以在此取到一些相关信息或进行一些操作  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ChatContext&lt;/span&gt; {  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 发送方chat_id  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; chatId: String  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 使用文本进行直接回复  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param text 回复内容  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;replyWithText&lt;/span&gt;(text: String)  
}  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 文本消息上下文  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;TextChatContext&lt;/span&gt;: ChatContext {  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 收到的文本内容  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; text: String  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;宿主通过implementation方式引入，插件通过compileOnly方式引入。当一条新消息到达时，宿主将调用插件的 &lt;code&gt;onTextMessage()&lt;/code&gt; 方法，如果插件进行了处理则返回true，消息不再传递给下一个插件。&lt;/p&gt;
&lt;p&gt;一个简单的EchoBot如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;EchoBot&lt;/span&gt;: BotContentProvider {

	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onTextMessage&lt;/span&gt;(context: TextChatContext) {
		context.replyWithText(context.text)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;插件版本兼容&#34;&gt;插件版本兼容&lt;/h2&gt;
&lt;p&gt;然而这样的方案遇到一个问题，就是不同版本插件API的jar包不是ABI兼容的。如果API中新增了一个方法如 &lt;code&gt;onPhotoMessage&lt;/code&gt; ，即使这个方法有默认实现，第三方插件也是要重新编译才能被我们的新版本机器人使用的。这是因为Kotlin的接口默认实现是编译期间的魔法，它将类未实现接口的默认方法指向一个叫 &lt;code&gt;DefaultsImpls&lt;/code&gt; 的类。所以只有重新编译，第三方插件才能使用，因为他们没有实现我们新增的方法。&lt;/p&gt;
&lt;p&gt;我目前的方法是，给接口包名中加入版本号，每次升级时复制一份。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/08/18fd51b47d64a36b59035df69fa4fe3d.png&#34; alt=&#34;Pasted image 20220829014314&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后加载插件时同时查找旧版本实现，通过适配器适配为新版本接口实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BotContentProviderAdapter&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; adaptee: V1Adapter): V2Provider, LoggerOwner &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; slf4jLoggerOwner&amp;lt;BotContentProviderAdapter&amp;gt;() {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;init&lt;/span&gt; {  
        logger.warn(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;{} 插件使用了旧版本API，现通过兼容方式装入，请联系开发者进行升级适配！&amp;#34;&lt;/span&gt;, adaptee.pluginName)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; pluginName: String = adaptee.pluginName  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onPluginLoaded&lt;/span&gt;() {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onPluginLoaded()  
        adaptee.onPluginLoaded()  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onTextMessage&lt;/span&gt;(context: ITextChatContext): Boolean {  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; adaptee.onTextMessage(TextChatContextAdapter(context))  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实还是很麻烦，不知道有没有更简单的方法。&lt;/p&gt;
&lt;h1 id=&#34;部署和运行&#34;&gt;部署和运行&lt;/h1&gt;
&lt;h2 id=&#34;基本部署&#34;&gt;基本部署&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://docs.gradle.org/current/userguide/application_plugin.html&#34;&gt;The Application Plugin&lt;/a&gt; 进行打包。tar包复制到服务器上，然后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;tar -xvf ./starsea.tar
nohup starsea/starsea &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;偶然崩溃自动重启&#34;&gt;偶然崩溃自动重启&lt;/h2&gt;
&lt;p&gt;作为一个想要长期运行的机器人服务，偶尔崩掉一两次也是正常的，写一个脚本在程序崩溃时自动再次拉起来还是有必要的。当然我认为系统得至少稳定运行了一段时间，才能走崩溃自动拉起来的逻辑，否则万一发生了启动崩溃，拉起来就崩，崩了就拉起来，服务器：听我说谢谢你～&lt;/p&gt;
&lt;p&gt;我的策略是，启动时脚本创建一个标志文件，系统稳定运行一段时间如5分钟后就把这个文件删掉。如果发生崩溃且未找到这个文件，脚本就尝试再次把机器人拉起来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#!/bin/sh  
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;#  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Copyright © 2015-2021 the original authors.  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# you may not use this file except in compliance with the License.  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# You may obtain a copy of the License at  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#      https://www.apache.org/licenses/LICENSE-2.0  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# Unless required by applicable law or agreed to in writing, software  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# See the License for the specific language governing permissions and  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# limitations under the License.  &lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#  &lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;# Attempt to set APP_HOME  &lt;/span&gt;
  
&lt;span style=&#34;color:#228b22&#34;&gt;# Resolve links: $0 may be a link  &lt;/span&gt;
&lt;span style=&#34;color:#00688b&#34;&gt;app_path&lt;/span&gt;=&lt;span style=&#34;color:#00688b&#34;&gt;$0&lt;/span&gt;  
  
&lt;span style=&#34;color:#228b22&#34;&gt;# Need this for daisy-chained symlinks.  &lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b&#34;&gt;APP_HOME&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;app_path&lt;/span&gt;%&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;app_path&lt;/span&gt;##*/&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;# leaves a trailing /; empty if no leading path  &lt;/span&gt;
    [ -h &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$app_path&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt; ]  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b&#34;&gt;ls&lt;/span&gt;=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt; ls -ld &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$app_path&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b&#34;&gt;link&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;ls&lt;/span&gt;#*&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$link&lt;/span&gt; in             &lt;span style=&#34;color:#228b22&#34;&gt;#(  &lt;/span&gt;
      /*)   &lt;span style=&#34;color:#00688b&#34;&gt;app_path&lt;/span&gt;=&lt;span style=&#34;color:#00688b&#34;&gt;$link&lt;/span&gt; ;; &lt;span style=&#34;color:#228b22&#34;&gt;#(  &lt;/span&gt;
      *)    &lt;span style=&#34;color:#00688b&#34;&gt;app_path&lt;/span&gt;=&lt;span style=&#34;color:#00688b&#34;&gt;$APP_HOME$link&lt;/span&gt; ;;  
    esacdone  
  
&lt;span style=&#34;color:#00688b&#34;&gt;APP_HOME&lt;/span&gt;=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;APP_HOME&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;:-&lt;/span&gt;./&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#658b00&#34;&gt;pwd&lt;/span&gt; -P &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt; || &lt;span style=&#34;color:#658b00&#34;&gt;exit&lt;/span&gt;  
&lt;span style=&#34;color:#00688b&#34;&gt;DEMAND_LOCK&lt;/span&gt;=demand_lock.lock  
  
rm &lt;span style=&#34;color:#00688b&#34;&gt;$DEMAND_LOCK&lt;/span&gt;  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; [ -f &lt;span style=&#34;color:#00688b&#34;&gt;$DEMAND_LOCK&lt;/span&gt; ]  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;then&lt;/span&gt;  
        &lt;span style=&#34;color:#658b00&#34;&gt;break&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fi&lt;/span&gt;  
    touch &lt;span style=&#34;color:#00688b&#34;&gt;$DEMAND_LOCK&lt;/span&gt;  
    &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;demand starting system...&amp;#34;&lt;/span&gt;  
    &lt;span style=&#34;color:#00688b&#34;&gt;$APP_HOME&lt;/span&gt;/starsea &lt;span style=&#34;color:#228b22&#34;&gt;# 启动一段时间后会删除这个文件 $DEMAND_LOCK    echo &amp;#34;system exited.&amp;#34;  &lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;  
  
&lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;It seems that app exited in a short time. Please check and restart again.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在机器人启动时&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 运行5分钟后删除demand lock，这表示系统可以进入稳定运行阶段。如果刚启动就退出脚本不会重启程序  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;handler.postDelayed({  
    File(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;demand_lock.lock&amp;#34;&lt;/span&gt;).takeIf { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.exists() }?.delete() 
}, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;主线程崩溃长时间未响应检测&#34;&gt;主线程崩溃/长时间未响应检测&lt;/h2&gt;
&lt;p&gt;与安卓上不同，java默认一个线程的崩溃并不会导致整个程序的退出。于去我们的需求讲这并不合适。&lt;/p&gt;
&lt;p&gt;按照我们现在的设计，主线程是相当重要的，崩溃或者严重卡顿是一定要退出的，否则都不会继续拉取和分发消息了，继续跑着也没有意义，不如直接崩掉，还能被我们上一步写的脚本重启。&lt;/p&gt;
&lt;p&gt;现有比较流行的ANR检测方法可以给我提供不错的参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单独启动一个后台线程用于检测。&lt;/li&gt;
&lt;li&gt;首先设置一个陷阱flag，称bomb，同时向主线程post一个job去移除这个flag。&lt;/li&gt;
&lt;li&gt;后台线程休眠较长一段时间。&lt;/li&gt;
&lt;li&gt;后台线程判断flag是否还在，如果主线程没能及时“拆弹”，就说明他已经挂了或者严重卡顿了，此时让系统挂掉就好了。&lt;/li&gt;
&lt;li&gt;重复上面步骤。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终这部分代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ApplicationContext&lt;/span&gt;: Thread.UncaughtExceptionHandler, LoggerOwner &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; slf4jLoggerOwner&amp;lt;ApplicationContext&amp;gt;() {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; handler &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy { Handler(Looper.mainLooper()) }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; exiting = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 将系统标记为稳定运行状态。demand_lock.lock文件是由启动脚本生成的。  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;markStable&lt;/span&gt;() {  
        File(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;demand_lock.lock&amp;#34;&lt;/span&gt;).takeIf { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.exists() }?.delete()  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;init&lt;/span&gt;() {  
        &lt;span style=&#34;color:#228b22&#34;&gt;// 主线程挂掉立即终止运行  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Thread.setDefaultUncaughtExceptionHandler(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;)  
  
        &lt;span style=&#34;color:#228b22&#34;&gt;// 主线程长期无响应终止运行  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; bomb: Boolean  
        thread {  
            Thread.currentThread().name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main-watcher&amp;#34;&lt;/span&gt;  
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {  
                bomb = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;  
                handler.post { bomb = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt; }  
                Thread.sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;600&lt;/span&gt;_000)  
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (bomb) {  
                    logger.error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;主线程长时间未响应！&amp;#34;&lt;/span&gt;)  
                    Thread.getAllStackTraces().forEach {  
                        logger.error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;dump thread {}, {}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.key, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.value)  
                    }  
                    exitProcess(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)  
                }  
            }  
        }  
  
        &lt;span style=&#34;color:#228b22&#34;&gt;// 运行5分钟后删除demand lock，这表示系统可以进入稳定运行阶段。如果刚启动就退出脚本不会重启程序  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        handler.postDelayed({  
            markStable()  
        }, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; * &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt; * &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;)  
    }  
  
    &lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 将当前系统状态标记为稳定并停机。如果因为意外问题停机请exitProcess。  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shutdown&lt;/span&gt;(delay: Long = &lt;span style=&#34;color:#b452cd&#34;&gt;3000L&lt;/span&gt;) {  
        markStable()  
        exiting = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;  
        handler.postDelayed({  
            exitProcess(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)  
        }, delay)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;uncaughtException&lt;/span&gt;(thread: Thread, tr: Throwable) {  
        logger.error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;exception in thread {}&amp;#34;&lt;/span&gt;, thread, tr)  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (thread.name == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;) {  
            logger.error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Main thread crashed!&amp;#34;&lt;/span&gt;)  
            exitProcess(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)  
        }  
    }  
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;
&lt;h2 id=&#34;logger的封装&#34;&gt;Logger的封装&lt;/h2&gt;
&lt;p&gt;直接上代码。目的就是少写一点模板代码，没什么复杂的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LoggerOwner&lt;/span&gt; {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; logger: Logger  
}  
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Slf4jLoggerOwner&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; tag: String) : LoggerOwner {  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; _logger &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy {  
        LoggerFactory.getLogger(tag)  
    }  
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; logger: Logger  
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;() = _logger  
}  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 创建logger对象。  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 用于方法委托使用。  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reified&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;slf4jLoggerOwner&lt;/span&gt;(): Slf4jLoggerOwner = Slf4jLoggerOwner(T::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java.canonicalName?:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;NO_NAME&amp;#34;&lt;/span&gt;)  
  
&lt;span style=&#34;color:#228b22&#34;&gt;/**  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 创建logger对象  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 用于直接使用  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reified&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;slf4jLogger&lt;/span&gt;(): Logger = slf4jLoggerOwner&amp;lt;T&amp;gt;().logger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用方法一（类文件中）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Demo1&lt;/span&gt;: LoggerOwner &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; slf4jLoggerOwner&amp;lt;Demo1&amp;gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;demo1&lt;/span&gt;() {
		logger.info(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;demo 1&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用方法2（单个方法中）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Demo2&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;demo2&lt;/span&gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; logger = slf4jLogger&amp;lt;Demo2&amp;gt;()
	logger.info(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;demo 2&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtg%E6%9C%BA%E5%99%A8%E4%BA%BA/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>Retrofit源码阅读</title>
        <link>https://ntutn.top/posts/retrofit%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
        <pubDate>Thu, 09 Jun 2022 17:02:54 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/retrofit%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
        <description>归零幻想 https://ntutn.top/posts/retrofit%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/ -&lt;p&gt;Retrofit是一个相当简洁的网络请求框架，其本质上只是对Okhttp的封装，实际上底层还是用Okhttp来执行网络请求。这两天终于比较闲一些，于是又想起了被我束之高阁的前辈的&lt;a href=&#34;https://www.jianshu.com/p/5fa78ef8e096&#34;&gt;武功秘籍&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;retrofit的使用&#34;&gt;Retrofit的使用&lt;/h2&gt;
&lt;p&gt;参考官方例子，定义接口并使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;GitHub&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@GET&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/repos/{owner}/{repo}/contributors&amp;#34;&lt;/span&gt;)
    Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; contributors(&lt;span style=&#34;color:#707a7c&#34;&gt;@Path&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;owner&amp;#34;&lt;/span&gt;) String owner, &lt;span style=&#34;color:#707a7c&#34;&gt;@Path&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;repo&amp;#34;&lt;/span&gt;) String repo);
  }

    &lt;span style=&#34;color:#228b22&#34;&gt;// Create a very simple REST adapter which points the GitHub API.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Retrofit retrofit =
        new Retrofit.Builder()
            .baseUrl(API_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build();

    &lt;span style=&#34;color:#228b22&#34;&gt;// Create an instance of our GitHub API interface.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    GitHub github = retrofit.create(GitHub.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;);

    &lt;span style=&#34;color:#228b22&#34;&gt;// Create a call instance for looking up Retrofit contributors.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; call = github.contributors(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;square&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;retrofit&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#228b22&#34;&gt;// Fetch and print a list of the contributors to the library.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Contributor&amp;gt; contributors = call.execute().body();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;源码阅读&#34;&gt;源码阅读&lt;/h2&gt;
&lt;p&gt;首先来到梦的开始&lt;code&gt;retrofit2.Retrofit#create&lt;/code&gt;，可以看到这里是个动态代理，后续的处理交给&lt;code&gt;retrofit2.ServiceMethod#parseAnnotations&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/f5567d8937f9eb382f6f298e8221998f.png&#34; alt=&#34;image-20220607204925036&#34;&gt;&lt;/p&gt;
&lt;p&gt;而后ServiceMethod中解析注解中的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/f8c181aff8fc7bd2e1d83a3b104431cb.png&#34; alt=&#34;image-20220607205316353&#34;&gt;&lt;/p&gt;
&lt;p&gt;继续阅读，果然在requestFactory的Builder中找到了&lt;code&gt;@GET&lt;/code&gt;、&lt;code&gt;@POST&lt;/code&gt;等注解的处理。&lt;/p&gt;
&lt;p&gt;继续HttpServiceMethod，暂时不看Kotlin Suspend Function部分，还是比较清晰的：就是处理了下call adapter，让请求的call对象转换到指定的线程工具上，如RxJava。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/f379ca7e8aa24bbe79701e55f95a83af.png&#34; alt=&#34;image-20220612235658307&#34;&gt;&lt;/p&gt;
&lt;p&gt;CallAdapted继承自HttpServiceMethod，而在HttpServiceMethod我们找到了网络请求对象OkhttpCall。&lt;/p&gt;
&lt;p&gt;然而OkhttpCall还是发起请求和处理响应的，发起请求还是用的RequestFactory。requestFactory是在上面解析注解时赋值的，很快找到了实际创建Okhttp对象的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/f26b6c55e29d1ba59ed6325bb8a5bcd8.png&#34; alt=&#34;image-20220608152000407&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后Response对象的解析&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/2e1af538596b09334e0f511ddce3d322.png&#34; alt=&#34;image-20220608152330130&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里用responseConverter将原始的Response的body转换为解析好的Response对象。&lt;/p&gt;
&lt;p&gt;啪，没了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;核心问题&#34;&gt;核心问题&lt;/h2&gt;
&lt;h3 id=&#34;如何自定义注解&#34;&gt;如何自定义注解?&lt;/h3&gt;
&lt;p&gt;读取注解信息，用于请求参数。处理方法参考：&lt;code&gt;retrofit2.RequestFactory.Builder#parseMethodAnnotation&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;如何将方法转化成request对象&#34;&gt;如何将方法转化成Request对象？&lt;/h3&gt;
&lt;p&gt;借助动态代理实现接口定义方法，借助反射读取到方法形参和注解，借助形参类型和注解确定请求参数，最终在&lt;code&gt;retrofit2.RequestFactory#create&lt;/code&gt;构建出实际的OkhttpRequest。&lt;/p&gt;
&lt;h3 id=&#34;servicemethod的作用&#34;&gt;ServiceMethod的作用？&lt;/h3&gt;
&lt;p&gt;实现Okhttp Call到call adapter的委托。&lt;/p&gt;
&lt;h3 id=&#34;adapterconverter的设计思路如果想要实现将okhttp也变成可替换的应该如何设计代码&#34;&gt;adapter，converter的设计思路，如果想要实现将okhttp也变成可替换的应该如何设计代码？&lt;/h3&gt;
&lt;p&gt;Retrofit对象作为context，维护了各种所需参数和构造方法（factory）。在后续实际需要的位置创建出adapter。如可以定义NetlibAdapterFactory，RequestFactory中用到Okhttp的地方替换为由retrofit.netlibAdapterFactory创建。&lt;/p&gt;
&lt;h3 id=&#34;invocationhandler与泛型的使用&#34;&gt;InvocationHandler与泛型的使用？&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;StubHelper&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; TAG = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;StubHelper&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;create&lt;/span&gt;(service: Class&amp;lt;T&amp;gt;): T {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Proxy.newProxyInstance(
            service.classLoader, arrayOf&amp;lt;Class&amp;lt;*&amp;gt;&amp;gt;(service),
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;InvocationHandler&lt;/span&gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; emptyArgs = arrayOfNulls&amp;lt;Any&amp;gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)

                &lt;span style=&#34;color:#707a7c&#34;&gt;@Throws&lt;/span&gt;(Throwable::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;)
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;invoke&lt;/span&gt;(proxy: Any, method: Method, args: Array&amp;lt;Any&amp;gt;?): Any? {
                    Log.d(TAG, method.toGenericString())
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
                }
            }) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; T
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/retrofit%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>使用自动操作修改壁纸</title>
        <link>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E4%BF%AE%E6%94%B9%E5%A3%81%E7%BA%B8/</link>
        <pubDate>Mon, 06 Jun 2022 12:28:23 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E4%BF%AE%E6%94%B9%E5%A3%81%E7%BA%B8/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E4%BF%AE%E6%94%B9%E5%A3%81%E7%BA%B8/ -&lt;p&gt;好久没水博客了，今天折腾折腾一个一直在系统里但是没用过的工具：自动操作（Automator）.&lt;/p&gt;
&lt;p&gt;首先打开自动操作，新建一个文稿。选择“应用程序”最终可以像其他app一样，点击就执行。但我希望的是每天自动更换，所以这里我选择“日历提醒”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/3ebf8c39d50251a24eb49b2609740554.png&#34; alt=&#34;image-20220606143017895&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载壁纸&#34;&gt;下载壁纸&lt;/h2&gt;
&lt;p&gt;“自动操作”的使用方法还是很简单的，把左边的命令拖动过来稍加编辑就可以了。所以，我们得到了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/896c884f3561a768223c71971628b88d.png&#34; alt=&#34;image-20220606143435257&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里用的是Unsplash提供的随机壁纸服务，壁纸还是很合我的胃口的。图中URL：&lt;code&gt;https://source.unsplash.com/random/3584x2240&lt;/code&gt;。这里的“3584x2240”根据你的显示器分辨率填写。&lt;/p&gt;
&lt;h2 id=&#34;设置壁纸&#34;&gt;设置壁纸&lt;/h2&gt;
&lt;p&gt;虽然“自动操作”的资源库中有“设置壁纸”这个能力，但我实际测试发现它只能改当前屏幕的壁纸，对于我用双屏的来说就比较难受了。因而这里要用Apple Script来实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/12dd80f59b1dc9aee5923c92d81da6fe.png&#34; alt=&#34;image-20220606144009000&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中的脚本为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;on run {input, parameters}
	
	set theFile to first item of input
	set filename to the POSIX path of theFile
	
	tell application &amp;quot;System Events&amp;quot;
		tell every desktop
			set picture to filename
		end tell
	end tell
	
	return filename
end run
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;清理垃圾&#34;&gt;清理垃圾&lt;/h2&gt;
&lt;p&gt;这个简单，删除所有不是今天创建的图片就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/d29f2ca3a42162fe097d1b253b5be475.png&#34; alt=&#34;image-20220606144228022&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;每天执行&#34;&gt;每天执行&lt;/h2&gt;
&lt;p&gt;保存后，打开日程应用，可以看到出现了一条刚刚添加的日程。使用Command+E快捷键修改日程，“重复”改为每天。最终结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/124d0a57cf1dbaa5394618b0fa142957.png&#34; alt=&#34;image-20220606123009808&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/06/1f49740d16ba84164d5cac3561f63e94.png&#34; alt=&#34;image-20220606144803374&#34;&gt;&lt;/p&gt;
&lt;p&gt;摸鱼结束，我去搬砖了。&lt;/p&gt;
- https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E4%BF%AE%E6%94%B9%E5%A3%81%E7%BA%B8/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://ntutn.top/about/</link>
        <pubDate>Sat, 30 Apr 2022 01:33:04 +0800</pubDate>
        
        <guid>https://ntutn.top/about/</guid>
        <description>归零幻想 https://ntutn.top/about/ -&lt;p&gt;归零幻想是本人的网名啦，这里是我的博客小站。本人在其他地方帐号大多也叫这个名字。&lt;/p&gt;
&lt;p&gt;本人2021年本科毕业于中国石油大学（华东），现在人在抖音。&lt;/p&gt;
&lt;p&gt;博客系统至今我写过三个版本&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，毕竟写出个CRUD就可以厚着脸皮说自己是个博客了。&lt;/p&gt;
&lt;p&gt;然而折腾折腾就不想折腾了，现在迁移到了&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;。选择这个而不是更主流的hexo、jeklly等是因为hugo是用golang编写的，它在不同设备上部署成本低，而且不会要求你装一堆依赖，污染本地开发环境。&lt;/p&gt;
&lt;p&gt;总之，感谢 &lt;a href=&#34;https://go.dev/&#34;&gt;golang&lt;/a&gt; ，感谢&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;，感谢&lt;a href=&#34;https://github.com/AmazingRise/hugo-theme-diary&#34;&gt;hugo-theme-diary&lt;/a&gt;，感谢&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果希望和我交个朋友，你可以通过在评论区留言的方式和我联系。&lt;/p&gt;
&lt;p&gt;在未另行说明的情况下，本站内容遵守 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.zh&#34;&gt;署名-相同方式共享 4.0 国际 (CC BY-SA 4.0)&lt;/a&gt;  。文章撰写过程中难免引用到一些站外资源，如果您认为某些内容侵犯了您的著作权，您可在评论区留下联系方式，我会及时与您联系。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;第一个版本是很遥远的过去了，&lt;a href=&#34;https://github.com/zerofancy/blogSystem&#34;&gt;第二个版本&lt;/a&gt;是用springboot写的，颇有杀鸡用牛刀之嫌。一方面不想继续交服务器租金了，另一方面原来部分代码写得很烂，当真懒得改了。加上新学了Kotlin，正想练手，这就有了&lt;a href=&#34;https://github.com/zerofancy/kmdblog&#34;&gt;第三个版本&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/about/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>Friends</title>
        <link>https://ntutn.top/friends/</link>
        <pubDate>Sat, 30 Apr 2022 01:23:47 +0800</pubDate>
        
        <guid>https://ntutn.top/friends/</guid>
        <description>归零幻想 https://ntutn.top/friends/ -&lt;p&gt;有空也去我朋友家坐坐哦～&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.semesse.me/&#34;&gt;色魔是色魔&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.xyx6.top/&#34;&gt;XYX&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://upccaishu.top/&#34;&gt;菜树&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ruiovo.top/&#34;&gt;ruiOvO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Viadimir&#34;&gt;~浮生若梦&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lglh/&#34;&gt;lglh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://ntutn.top/friends/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>把你的光猫变成一个丐版nas</title>
        <link>https://ntutn.top/posts/%E6%8A%8A%E4%BD%A0%E7%9A%84%E5%85%89%E7%8C%AB%E5%8F%98%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%90%E7%89%88nas/</link>
        <pubDate>Tue, 12 Apr 2022 01:21:54 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E6%8A%8A%E4%BD%A0%E7%9A%84%E5%85%89%E7%8C%AB%E5%8F%98%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%90%E7%89%88nas/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E6%8A%8A%E4%BD%A0%E7%9A%84%E5%85%89%E7%8C%AB%E5%8F%98%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%90%E7%89%88nas/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;把你的光猫变成一个丐版nas&#34;&gt;把你的光猫变成一个丐版NAS&lt;/h1&gt;
&lt;p&gt;我的初衷是调研下光猫改桥接的可行性，结果拿到超级管理员密码后还是没有这个选项。但在这个过程中发现直接在光猫上跑个下载服务却是可行的。&lt;/p&gt;
&lt;h2 id=&#34;允许ftp访问和telnet访问&#34;&gt;允许FTP访问和telnet访问&lt;/h2&gt;
&lt;p&gt;访问 http://192.168.1.1 ，输入密码后进入光猫管理后台。这里我找到“上网帐号设置”，备份宽带帐号和密码。不得不说他系统还是挺拉的，密码框直接用审查元素功能把 type 改为 input 就可以看到密码了。&lt;/p&gt;
&lt;p&gt;第一步后台不要退出，访问 http://192.168.1.1/servmngr.html 。这里看到一个空白页面，审查元素后发现大有乾坤。 &lt;img src=&#34;https://images.ntutn.top/2022/04/78e9db7285fda2ee43fd5901902d3208.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;将这些代码取消注释，此时网页还是空白的，但是用 Ctrl+A 可以看到实际是有内容的。在这个页面开启 telnet 访问，并设置密码。注意用户名为 admin 不要改，否则后面 telnet 登陆不进去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;telnet 192.168.1.1&lt;/code&gt; 成功后执行&lt;code&gt;sh&lt;/code&gt;。然后&lt;code&gt;uname -a&lt;/code&gt;看下。这里我就不记录查看管理员密码步骤了，反正这个型号管理员面板也没有设置桥接的选项。&lt;/p&gt;
&lt;h2 id=&#34;开始整活&#34;&gt;开始整活&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt;，发现占用内存最高的是个两个 java 进程。&lt;code&gt;java -version&lt;/code&gt;，发现安装了 java8 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;# java -version
openjdk version &amp;#34;1.8.0-internal&amp;#34;
OpenJDK Runtime Environment (build 1.8.0-internal-jenkinsang_2022_01_15_04_03-b00)
JamVM (build 2.0.0, inline-threaded interpreter with stack-caching)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;free&lt;/code&gt;命令可知总内存约二十多兆，剩余仅 3 兆。这点空间是搞不了什么事情的，因此我尝试干掉前述两个 java 进程。&lt;code&gt;ps -aux | grep java&lt;/code&gt;，发现除了存在两个 java 进程，还写了脚本自动把这两个进程拉起来，即&lt;code&gt;/etc/monitor_java.sh&lt;/code&gt; 。统统 kill 掉。&lt;/p&gt;
&lt;p&gt;现在有 10 兆左右的内存了，对于 java 来说可能还是不太能搞事，但跑个 aria2 足够了！尝试插入 U 盘，发现在&lt;code&gt;/mnt/usb1_1&lt;/code&gt;自动挂载。&lt;/p&gt;
&lt;p&gt;交叉编译 aria2c ，这里我用的是这个脚本：https://gitee.com/logic_2050/auto-build-aria2-mips32-static 。在我的 debian11 编译过程中只遇到一个问题，手动&lt;code&gt;sudo apt install autoreconf&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;如何把文件弄到光猫里，以及取出来？每次插拔 U 盘也太麻烦了。于是我找到一个支持上传的简单文件服务器：https://github.com/mayth/go-simple-upload-server。仍然交叉编译到 mips 静态包。&lt;code&gt;env GOOS=linux GOARCH=mips GOMIPS=softfloat go build -trimpath -ldflags=&amp;quot;-s -w -extldflags=-static&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;成品&#34;&gt;成品&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/04/bc80e51855b842dedd7268113042e378.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;拓展&#34;&gt;拓展&lt;/h2&gt;
&lt;h3 id=&#34;被我干掉的两个-java-进程是做什么的&#34;&gt;被我干掉的两个 java 进程是做什么的&lt;/h3&gt;
&lt;p&gt;光猫跑 java 属实有点离谱，一半内存都是他们占的，干掉后也不影响上网，甚至也不影响光猫后台管理。嗯，有点耐人寻味。&lt;/p&gt;
&lt;h3 id=&#34;ftp访问为空白&#34;&gt;FTP访问为空白&lt;/h3&gt;
&lt;p&gt;经测试，该型号FTP访问根目录是一片空白，但大多数子目录还是可以正常访问的，如&lt;code&gt;/mnt/usb1_1&lt;/code&gt;，完全能满足要求。&lt;/p&gt;
&lt;h3 id=&#34;无法执行重启后文件丢失&#34;&gt;无法执行/重启后文件丢失&lt;/h3&gt;
&lt;p&gt;有些目录下是无法写入的，有些虽然可以写入，但是重启会丢失，还有些目录下无法执行程序。&lt;/p&gt;
&lt;p&gt;我选择把整活用的程序放到&lt;code&gt;/fhconf/&lt;/code&gt;下，因为光猫自己的配置文件备份就放在这里，显然这里是不会重置的。&lt;/p&gt;
&lt;h3 id=&#34;支持-https&#34;&gt;支持 https&lt;/h3&gt;
&lt;p&gt;只要将你的电脑下的&lt;code&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt;文件复制到光猫下，并在aria2的配置文件中指定就可以了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ca-certificate=/fhconf/custom/aria2/ca-certificates.crt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;oom&#34;&gt;OOM&lt;/h3&gt;
&lt;p&gt;尽管aria2确实已经很省资源了，但当尝试BT下载一个比较大的文件时（超过2GB）还是很容易占用超过10M内存，然后关键进程OOM就巴比Q了。我尝试过修改配置文件，关闭disk-cache、关闭预分配甚至限制下载速度等均无法解决。所以该方案的实用性其实并不是很高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也无所谓，生命在于折腾嘛。
也许设置swap可以解决这个问题，但默认没有这个命令，估计还得去编译busybox。唉，算了吧……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
- https://ntutn.top/posts/%E6%8A%8A%E4%BD%A0%E7%9A%84%E5%85%89%E7%8C%AB%E5%8F%98%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%90%E7%89%88nas/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>AUIL学习</title>
        <link>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Sun, 13 Feb 2022 18:11:08 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</guid>
        <description>归零幻想 https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;auil-源码学习-重点问题&#34;&gt;AUIL 源码学习 重点问题&lt;/h1&gt;
&lt;p&gt;AUIL是个比较知名的图片加载库，源码结构比较清晰和简单，我在阅读学习中整理了以下内容。&lt;/p&gt;
&lt;h2 id=&#34;memorycache&#34;&gt;MemoryCache&lt;/h2&gt;
&lt;p&gt;顾名思义，这个是在内存中缓存Bitmap相关的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/02/04ac71a8c8e1622e2bc287f2fd6e92cf.svg&#34; alt=&#34;auil&#34;&gt;&lt;/p&gt;
&lt;p&gt;MemoryCache结合了策略模式和装饰器模式，初始化时可选择不同缓存策略。&lt;/p&gt;
&lt;p&gt;一个Cache类内部持有一定量的Bitmap元素，并根据某种策略自动移除未使用的Bitmap。看结构我们应该从BaseMemoryCache开始看起。&lt;/p&gt;
&lt;p&gt;BaseMemoryCache中持有了所有放入的元素的弱引用，而它的子类根据策略持有了部分缓存对象的强引用。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;整个框架分多少个模块每个模块的作用是什么&#34;&gt;整个框架分多少个模块，每个模块的作用是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ImageLoader 门面。&lt;/li&gt;
&lt;li&gt;ImageAware 对最终处理和展示图片操作的封装。&lt;/li&gt;
&lt;li&gt;MemoryCache bitmap在内存中的缓存。&lt;/li&gt;
&lt;li&gt;BitmapProcessor 图片处理器，处理原始图片。分为预处理和后处理，预处理的结果会存入缓存，而后处理每次展示都会执行。&lt;/li&gt;
&lt;li&gt;BitmapDisplayer 控制图片展示，可为其附加一定的展示效果。&lt;/li&gt;
&lt;li&gt;DiskCache bitmap在磁盘中的缓存&lt;/li&gt;
&lt;li&gt;ImageDecoder 将图片解码为Bitmap，并缩放到合适尺寸&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何仅通过interface就将框架的整个流程串联起来&#34;&gt;如何仅通过interface就将框架的整个流程串联起来&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/02/09ba58caadf71408c7a97bc8e1443154.svg&#34; alt=&#34;模块调用顺序&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何进行内存管理的lru是种什么算法有没有比lru更好的&#34;&gt;如何进行内存管理的，LRU是种什么算法，有没有比LRU更好的？&lt;/h2&gt;
&lt;p&gt;AUIL的图片缓存有二级，一是所有缓存过的图片都会持有WeakReference，可能随时回收；二是部分图片会持有强引用，不会被回收。这里的部分图片的总共大小可以设置，达到阈值之后使用一定的算法淘汰一些图片。这里最常用的就是LRU。&lt;/p&gt;
&lt;p&gt;LRU是淘汰缓存文件的算法，它每次淘汰最久未使用的文件。是一种最常用的页面置换算法。除了LRU之外，AUIL预置的算法还有FIFO（先入先出）、LargestLimitted（淘汰最大的文件）、LFU（淘汰使用频率最低的）。三者各有优劣。&lt;/p&gt;
&lt;p&gt;如，LRU因为图片展示频率在时间上的不均匀性，可能将一些高频展示的图片淘汰掉，导致缓存命中率下降；LFU对于新图片频率统计无法比较好把控。&lt;/p&gt;
&lt;h2 id=&#34;用到了多少个线程池这些线程池之间的区别是什么如果只用一个线程池可以么&#34;&gt;用到了多少个线程池，这些线程池之间的区别是什么，如果只用一个线程池可以么？&lt;/h2&gt;
&lt;p&gt;使用了三个线程池：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;taskExecutor&lt;/li&gt;
&lt;li&gt;taskExecutorForCachedImages&lt;/li&gt;
&lt;li&gt;taskDistributor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;taskExecutor和taskExecutorForCachedImages都是用来执行图片处理和展示任务的，他们处理顺序都是个LIFO（后进先出）的队列，而taskDistributor是个普通的线程池，用于框架内其他任务。&lt;/p&gt;
&lt;p&gt;taskExecutorForCachedImages是专门为缓存中读取的图片展示用的线程池，因为这类图片响应会很快，所以AUIL专门给他们准备了一个线程池。
综上，如果用一个线程池则最终效果会大打折扣。&lt;/p&gt;
- https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>给APP添加构建信息</title>
        <link>https://ntutn.top/posts/%E7%BB%99app%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Sun, 16 Jan 2022 23:24:16 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E7%BB%99app%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E7%BB%99app%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;给app添加构建信息&#34;&gt;给APP添加构建信息&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这两天在琢磨一个问题，一个APP是怎么知道自己是怎么来的呢？
一个应用得知道自己是怎么来的，这样出了问题才知道该找谁。举个例子，当应用发生了一个线上crash，崩溃信息收集上来，然后我们打开堆栈一看懵了——这个发生崩溃的&lt;code&gt;v5.c&lt;/code&gt;是哪个类呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/01/9616ad8a32ec122442705981e9e97847.png&#34; alt=&#34;crash&#34;&gt;&lt;/p&gt;
&lt;p&gt;显然，代码被混淆过，我们要拿到编译时生成的&lt;code&gt;mapping.txt&lt;/code&gt;来还原堆栈，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/01/aaa2591c565385ad28ce781047c567e5.png&#34; alt=&#34;retrace&#34;&gt;&lt;/p&gt;
&lt;p&gt;**然而，我们编译了很多次，客官您要的是哪次的mapping文件呢？**显然，我们不仅要保留每次构建的相关信息，还得能准确区分开每次构建的产物，能做到有问题立即查询到对应构建信息。&lt;/p&gt;
&lt;p&gt;应用需要知道自己是“&lt;em&gt;怎么来的&lt;/em&gt;”。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;区分不同构建结果&#34;&gt;区分不同构建结果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以收集当前commit id，commit不同一定是不同构建。&lt;/li&gt;
&lt;li&gt;可以生成一个较长的随机数每次构建不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看上去前者更优雅，但一个commit id上并不一定只有一个成功的构建，比如你做一应用叫“快音”，测试通过后调整了一些编译选项打出线上包，此时只根据commit id就无法确定是对应测试包的构建还是线上包了。&lt;/p&gt;
&lt;p&gt;所以，最实在的方法还是后者。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;runShellCommand&lt;/span&gt;(command: String): String {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; byteOut = ByteArrayOutputStream()
    project.exec {
        commandLine = command.split(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        standardOutput = byteOut
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; String(byteOut.toByteArray())
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; buildNumber = UUID.randomUUID()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; gitBranch = runShellCommand(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;git branch --show-current&amp;#34;&lt;/span&gt;).trim()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; gitCommitId = runShellCommand(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;git rev-parse HEAD&amp;#34;&lt;/span&gt;).trim()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; buildTimeMILLIS = System.currentTimeMillis()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将信息传给应用&#34;&gt;将信息传给应用&lt;/h2&gt;
&lt;p&gt;不知道大家有没有这种习惯，在开发时加一些测试代码时判断只在Debug版本生效，即&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (BuildConfig.DEBUG) {
    Toast.makeText(applicationContext, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, Toast.LENGTH_SHORT).show()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样即使我真的忘记删除这段代码也不会影响到线上，让用户看到个“test”感到莫名其妙。这里用的&lt;code&gt;BuildConfig&lt;/code&gt;就是在Gradle构建时生成的一个类，里面包含了一些有关当前构建的信息&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;而幸运的是，官方也提供了方法让我们可以往&lt;code&gt;BuildConfig&lt;/code&gt;里面自己加东西，于是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;android {
    defaultConfig {
        buildConfigField(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BUILD_NUMBER&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$buildNumber&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
        buildConfigField(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GIT_BRANCH&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$gitBranch&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
        buildConfigField(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;String&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GIT_COMMIT_ID&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$gitCommitId&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
        buildConfigField(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Long&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BUILD_TIME_MILLIS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${buildTimeMILLIS}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;L&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后这些字段就会出现在&lt;code&gt;BuildConfig&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.ntutn.top/2022/01/55dc59fdd208c87b155b6a3947fc77f4.png&#34; alt=&#34;BuildConfig自定义字段&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们在报告崩溃信息时就可以带上，这样排查时就知道从何开始找起了。&lt;/p&gt;
&lt;h2 id=&#34;保存构建信息&#34;&gt;保存构建信息&lt;/h2&gt;
&lt;p&gt;自定义一个task来进行发布，反正都是Kotlin代码，怎么保存这里不展开了。最终我们的服务端不但记录每一次构建时的最终产物，还记录了&lt;code&gt;mapping.txt&lt;/code&gt;文件，记录了buildNumber，当后面排查问题时就能比较简单复现场景了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;tasks.create(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;apkReleaseAndUpload&amp;#34;&lt;/span&gt;) {
    dependsOn(tasks[&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;assemble&amp;#34;&lt;/span&gt;])
    doLast {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;发布任务开始（构建版本号&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$buildNumber&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;）&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#228b22&#34;&gt;// 保存构建信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;进行到这里，我们就做到了之前说的目标，应用知道自己是怎么来的（保留了构建相关信息），我们排查问题也有个大概方向。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/build/gradle-tips#share-custom-fields-and-resource-values-with-your-app-code&#34;&gt;与应用代码共享自定义字段和资源值 &lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/%E7%BB%99app%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>android项目开发：持久化</title>
        <link>https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/</link>
        <pubDate>Sun, 24 Oct 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;《第一行代码》阅读记录，有关数据持久化存储，略过了数据库的方式。&lt;/p&gt;
&lt;h1 id=&#34;持久化&#34;&gt;持久化&lt;/h1&gt;
&lt;h2 id=&#34;文件存储&#34;&gt;文件存储&lt;/h2&gt;
&lt;p&gt;先暂时只是写了个demo，有需要再深入看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveText&lt;/span&gt;(inputText: String) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; output = openFileOutput(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, Context.MODE_PRIVATE)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; writer = BufferedWriter(OutputStreamWriter(output))
            writer.use {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.write(inputText)
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (e: IOException) {
            e.printStackTrace()
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;loadText&lt;/span&gt;(): String {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; content = StringBuilder()
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; input = openFileInput(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; reader = BufferedReader(InputStreamReader(input))
            reader.use { r -&amp;gt;
                r.forEachLine {
                    content.appendLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;)
                }
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (e: IOException) {
            e.printStackTrace()
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; content.toString()
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sharedpreference&#34;&gt;SharedPreference&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;            saveButton.setOnClickListener {
                getSharedPreferences(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, Context.MODE_PRIVATE).edit {
                    putString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)
                    putInt(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;28&lt;/span&gt;)
                    putBoolean(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;married&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;)
                }
            }
            restoreButton.setOnClickListener {
                getSharedPreferences(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, Context.MODE_PRIVATE).apply {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; name = getString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;苏珊&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; age = getInt(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;)
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; isMarried = getBoolean(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;married&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;)
                    Toast.makeText(
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@MainActivity&lt;/span&gt;,
                        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${name}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;年龄&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${age}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;岁&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${if (isMarried) &amp;#34;已婚&amp;#34; else &amp;#34;未婚&amp;#34;}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;p&gt;基本用法demo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.databasetest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.ContentValues&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.Context&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.database.Cursor&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.database.sqlite.SQLiteDatabase&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.database.sqlite.SQLiteOpenHelper&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.util.Log&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.widget.Toast&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyDatabaseHelper&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; context: Context, name: String, version: Int) :
    SQLiteOpenHelper(context, name, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, version) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; createBook = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;        create table Book (
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            id integer primary key autoincrement,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            author text,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            price real,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            pages integer,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            name text
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;        )
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;.trimIndent()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; createCategory = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;        create table Category (
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            id integer primary key autoincrement,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            category_name text,
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;            category_code integer
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;        )
&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;.trimIndent()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;(db: SQLiteDatabase) {
        db.execSQL(createBook)
        db.execSQL(createCategory)
        Toast.makeText(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;建立数据库完成&amp;#34;&lt;/span&gt;, Toast.LENGTH_LONG).show()
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onUpgrade&lt;/span&gt;(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (oldVersion == newVersion) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;
        Log.d(javaClass.simpleName, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;旧版是&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${oldVersion}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;，新版是&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${newVersion}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;，数据库升级开始&amp;#34;&lt;/span&gt;)
        db.execSQL(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;drop table if exists Book&amp;#34;&lt;/span&gt;)
        db.execSQL(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;drop table if exists Category&amp;#34;&lt;/span&gt;)
        onCreate(db)
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cvOf&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;vararg&lt;/span&gt; pairs: Pair&amp;lt;String, Any?&amp;gt;): ContentValues {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cv = ContentValues()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (pair &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; key = pair.first
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;when&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; value = pair.second) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Int -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Long -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Short -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Float -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Double -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Boolean -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; String -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Byte -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; ByteArray -&amp;gt; cv.put(key, value)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; -&amp;gt; cv.putNull(key)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;不支持的cv类型&amp;#34;&lt;/span&gt;)
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cv
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Cursor&lt;/span&gt;.getString(name: String): String = getString(getColumnIndex(name))
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Cursor&lt;/span&gt;.getInt(name: String): Int = getInt(getColumnIndex(name))
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Cursor&lt;/span&gt;.getDouble(name: String): Double = getDouble(getColumnIndex(name))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.databasetest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.os.Bundle&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.util.Log&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.databasetest.databinding.ActivityMainBinding&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; binding: ActivityMainBinding
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; dbHelper = MyDatabaseHelper(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BookStore.db&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;)
        binding.createDatabaseButton.setOnClickListener {
            dbHelper.writableDatabase
        }
        binding.addDataButton.setOnClickListener {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; db = dbHelper.writableDatabase
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; values1 = cvOf(
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The Da Vinci Code&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Dan Brown&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pages&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;454&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;16.96&lt;/span&gt;
            )
            db.insert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, values1)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; values2 = cvOf(
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The Lost Symbol&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Dan Brown&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pages&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;510&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;19.95&lt;/span&gt;
            )
            db.insert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, values2)
        }
        binding.updateDataButton.setOnClickListener {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; db = dbHelper.writableDatabase
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; values = cvOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;10.99&lt;/span&gt;)
            db.update(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;, values, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name=?&amp;#34;&lt;/span&gt;, arrayOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The Da Vinci Code&amp;#34;&lt;/span&gt;))
        }
        binding.deleteDataButton.setOnClickListener {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; db = dbHelper.writableDatabase
            db.delete(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pages &amp;gt; ?&amp;#34;&lt;/span&gt;, arrayOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;))
        }
        binding.queryDataButton.setOnClickListener {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; db = dbHelper.writableDatabase
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cursor = db.query(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Book&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (cursor.moveToFirst()) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt; {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; name = cursor.getString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; author = cursor.getString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; pages = cursor.getInt(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pages&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; price = cursor.getDouble(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;)
                    Log.d(
                        javaClass.simpleName,
                        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$name&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, author: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$author&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, pages: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$pages&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, price: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$price&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
                    )
                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (cursor.moveToNext())
            }
            cursor.close()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
- https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>android项目开发：Kotlin</title>
        <link>https://ntutn.top/posts/kotlin/</link>
        <pubDate>Tue, 12 Oct 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/kotlin/</guid>
        <description>归零幻想 https://ntutn.top/posts/kotlin/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;kotlin&#34;&gt;Kotlin&lt;/h1&gt;
&lt;h2 id=&#34;变量和函数&#34;&gt;变量和函数&lt;/h2&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;p&gt;用&lt;code&gt;var&lt;/code&gt;和&lt;code&gt;val&lt;/code&gt;定义变量，并有类型自动推导的支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;val&lt;/code&gt;用来声明一个不可变的变量，&lt;code&gt;var&lt;/code&gt;用来声明一个可变的变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; a = &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; b: Int = &lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin完全抛弃了java中的基本数据类型，完全使用对象数据类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;java基本数据类型&lt;/th&gt;
&lt;th&gt;Kotlin对象数据类型&lt;/th&gt;
&lt;th&gt;数据类型说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;整型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;Long&lt;/td&gt;
&lt;td&gt;长整型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;Short&lt;/td&gt;
&lt;td&gt;短整型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;单精度浮点型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;双精度浮点型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;布尔型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;Char&lt;/td&gt;
&lt;td&gt;字符型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;Byte&lt;/td&gt;
&lt;td&gt;字节型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
    println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin中的函数在无必要时可以省略很多东西：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlin.math.max&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;largerNumber&lt;/span&gt;(a: Int, b: Int) = max(a, b)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; a = &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; b = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;
    println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The larger number of a and b is &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${largerNumber(a, b)}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;程序的逻辑控制&#34;&gt;程序的逻辑控制&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;if&lt;/h3&gt;
&lt;p&gt;与java中的if语句相比，Kotlin中的if是可以有返回值的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;judge&lt;/span&gt;(score: Int) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (score &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;你及格了&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;你还需要多努力&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    println(judge(&lt;span style=&#34;color:#b452cd&#34;&gt;55&lt;/span&gt;))
    println(judge(&lt;span style=&#34;color:#b452cd&#34;&gt;66&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与此同时，Kotlin不再有java中的三元运算符&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，语义上清晰了很多。&lt;/p&gt;
&lt;h3 id=&#34;when条件语句&#34;&gt;when条件语句&lt;/h3&gt;
&lt;p&gt;类似于java中的switch语句，根据变量的值执行不同的逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;judge&lt;/span&gt;(score: Int) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (score &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;你及格了&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;你还需要多努力&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getScore&lt;/span&gt;(name: String) = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;when&lt;/span&gt; (name) {
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;78&lt;/span&gt;
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;35&lt;/span&gt;
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jerry&amp;#34;&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;84&lt;/span&gt;
    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Lee&amp;#34;&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;57&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    println(judge(getScore(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)))
    println(judge(getScore(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;)))
    println(judge(getScore(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;)))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对我来说，最令人振奋的是再也不需要在每个分支里面都写个break了。其次when也是有返回值的，这和其他特性组合写出来的代码非常简洁优雅。&lt;/p&gt;
&lt;p&gt;写个小demo吧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Speakable&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;()
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; : Speakable {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;汪汪汪&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Cat&lt;/span&gt; : Speakable {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;喵喵喵&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;climb&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小猫会爬树&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;generateAnimal&lt;/span&gt;(): Speakable? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;when&lt;/span&gt; ((&lt;span style=&#34;color:#b452cd&#34;&gt;1.&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;).random()) {
    &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; -&amp;gt; Dog()
    &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; -&amp;gt; Cat()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;when&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; animal = generateAnimal()) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Dog -&amp;gt; {
            println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生成的动物是小狗&amp;#34;&lt;/span&gt;)
            animal.speak()
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Cat -&amp;gt; {
            println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生成的动物是小猫&amp;#34;&lt;/span&gt;)
            animal.speak()
            animal.climb()
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; -&amp;gt; println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生成动物时出现问题&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循环语句&#34;&gt;循环语句&lt;/h3&gt;
&lt;p&gt;Kotlin中有两类循环，其中&lt;code&gt;while&lt;/code&gt;循环与java学过的while循环非常相似，只说下有差异的&lt;code&gt;for&lt;/code&gt;循环吧。&lt;/p&gt;
&lt;p&gt;Kotlin的for循环只有for..in式的了，如&lt;code&gt;for(i in list)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但有时对数组下标进行遍历还是有必要的。于是我们要先了解下Kotlin的&lt;code&gt;区间&lt;/code&gt;的概念。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; range = &lt;span style=&#34;color:#b452cd&#34;&gt;1.&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这表示&lt;code&gt;[1,10]&lt;/code&gt;。但很多时候，我们需要左开右闭区间，比如数组有三个元素，我们需要&lt;code&gt;[0,3)&lt;/code&gt;表示数组的下标。此时可以使用&lt;code&gt;util&lt;/code&gt;关键字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; indexRange = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; util &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了range再和前面的for配合就完全可以替代之前java里面的for的作用了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; array = arrayOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jackson&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; util array.size) {
    println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${array[i]}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，还可以用&lt;code&gt;step&lt;/code&gt;指定步长值，实现”隔几个输出一次“的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; util &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; step &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;) {
    println(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要10循环到1,则需要&lt;code&gt;downTo&lt;/code&gt;关键字，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt; downTo &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;) {
    println(i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;面向对象编程&#34;&gt;面向对象编程&lt;/h2&gt;
&lt;h3 id=&#34;类与对象&#34;&gt;类与对象&lt;/h3&gt;
&lt;p&gt;与java的class相比Kotlin的class看上去没有多少改变，但创建对象不用new了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; name: String) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;() = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$name&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt; is speaking.&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    Person(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;).speak()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;继承与构造函数&#34;&gt;继承与构造函数&lt;/h3&gt;
&lt;p&gt;与java类似，Kotlin仍然是单继承，可以继承一个类实现多个接口。但继承的写法与java略有不同。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//非抽象类只有带了open才可以继承
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Speakable&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;()
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; : Animal(), Speakable {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;汪汪汪&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Cat&lt;/span&gt; : Animal(), Speakable {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;speak&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;喵喵喵&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;climb&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小猫会爬树&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin中的构造函数分为主构造函数和次构造函数。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; sno: String, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; grade: Int, name: String, age: Int) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(name: String, age: Int) : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, name, age)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;init&lt;/span&gt; {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$age&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt; 的 &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$name&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt; 被初始化了。&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次构造函数必须调用主构造函数（如果有），继承一个类必须调用他的构造函数（这也是为什么常常继承的类后面带着个括号）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kotlin函数的参数可以有默认值的，大多数情况根本不需要使用多个构造函数。
主构造函数中&lt;code&gt;val&lt;/code&gt;和&lt;code&gt;var&lt;/code&gt;标记的变量将直接成为类的属性，没有这个标记的变量则只能在init block中访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;接口&#34;&gt;接口&lt;/h3&gt;
&lt;p&gt;接口与java的接口是类似的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Study&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;readBooks&lt;/span&gt;()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doHomework&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Do homework default implementation&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;java与Kotlin中的可见性修饰略有不同。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th&gt;java&lt;/th&gt;
&lt;th&gt;Kotlin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;所有类可见&lt;/td&gt;
&lt;td&gt;所有类可见（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;当前类可见&lt;/td&gt;
&lt;td&gt;当前类可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;当前类、子类、同一包路径下的类可见&lt;/td&gt;
&lt;td&gt;当前类、子类可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;同一包路径下的类可见&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;internal&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;同一模块中的类可见&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据类与单例类&#34;&gt;数据类与单例类&lt;/h3&gt;
&lt;p&gt;数据类在当今的系统设计中占据了重要的地位，他们格式非常固定，一般实现各种构造函数、getter和setter，重写&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;、&lt;code&gt;toString()&lt;/code&gt;
这几个方法，真的写腻了。很多ide都提供了一键生成这些样板代码的方法，更有项目Lombok添加个注解在编译时生成这些方法&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;而Kotlin中对于数据类有了专门的支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; sno: String, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; age: Int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;idea对于Kotlin有很好的支持。我们用下面的步骤将上面的代码转换为java形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tools-&amp;gt;Kotlin-&amp;gt;Show Kotlin ByteCode&lt;/li&gt;
&lt;li&gt;Decompile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;得到的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlin.Metadata&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlin.jvm.internal.Intrinsics&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;org.jetbrains.annotations.NotNull&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;org.jetbrains.annotations.Nullable&lt;/span&gt;;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Metadata&lt;/span&gt;(
        mv = {1, 4, 0},
        bv = {1, 0, 3},
        k = 1,
        d1 = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\u0000\&amp;#34;\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\r\n\u0002\u0010\u000b\n\u0002\b\u0004\b\u0086\b\u0018\u00002\u00020\u0001B\u001d\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0006¢\u0006\u0002\u0010\u0007J\t\u0010\u000f\u001a\u00020\u0003HÆ\u0003J\t\u0010\u0010\u001a\u00020\u0003HÆ\u0003J\t\u0010\u0011\u001a\u00020\u0006HÆ\u0003J&amp;#39;\u0010\u0012\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u0006HÆ\u0001J\u0013\u0010\u0013\u001a\u00020\u00142\b\u0010\u0015\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u0010\u0016\u001a\u00020\u0006HÖ\u0001J\t\u0010\u0017\u001a\u00020\u0003HÖ\u0001R\u001a\u0010\u0005\u001a\u00020\u0006X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\b\u0010\t\&amp;#34;\u0004\b\n\u0010\u000bR\u0011\u0010\u0004\u001a\u00020\u0003¢\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003¢\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\r¨\u0006\u0018&amp;#34;&lt;/span&gt;},
        d2 = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;LStudent;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sno&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;(Ljava/lang/String;Ljava/lang/String;I)V&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getAge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;()I&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;setAge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;(I)V&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;()Ljava/lang/String;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getSno&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;component1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;component2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;component3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;equals&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hashCode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;toString&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;kotlin-learning.main&amp;#34;&lt;/span&gt;}
)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String sno;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String name;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;getSno&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;getName&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getAge&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setAge&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; var1) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; = var1;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Student&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt; String sno, &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt; String name, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age) {
        Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;checkNotNullParameter&lt;/span&gt;(sno, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sno&amp;#34;&lt;/span&gt;);
        Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;checkNotNullParameter&lt;/span&gt;(name, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt; = sno;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; = age;
    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;component1&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;component2&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;component3&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; Student &lt;span style=&#34;color:#008b45&#34;&gt;copy&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt; String sno, &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt; String name, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age) {
        Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;checkNotNullParameter&lt;/span&gt;(sno, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sno&amp;#34;&lt;/span&gt;);
        Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;checkNotNullParameter&lt;/span&gt;(name, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student(sno, name, age);
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// $FF: synthetic method
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Student &lt;span style=&#34;color:#008b45&#34;&gt;copy$default&lt;/span&gt;(Student var0, String var1, String var2, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; var3, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; var4, Object var5) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((var4 &amp;amp; 1) != 0) {
            var1 = var0.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((var4 &amp;amp; 2) != 0) {
            var2 = var0.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((var4 &amp;amp; 4) != 0) {
            var3 = var0.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; var0.&lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(var1, var2, var3);
    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NotNull&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toString&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Student(sno=&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;, name=&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;, age=&amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;hashCode&lt;/span&gt;() {
        String var10000 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; var1 = (var10000 != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; ? var10000.&lt;span style=&#34;color:#658b00&#34;&gt;hashCode&lt;/span&gt;() : 0) * 31;
        String var10001 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (var1 + (var10001 != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; ? var10001.&lt;span style=&#34;color:#658b00&#34;&gt;hashCode&lt;/span&gt;() : 0)) * 31 + &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@Nullable&lt;/span&gt; Object var1) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt; != var1) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (var1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Student) {
                Student var2 = (Student) var1;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;areEqual&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;, var2.&lt;span style=&#34;color:#658b00&#34;&gt;sno&lt;/span&gt;) &amp;amp;&amp;amp; Intrinsics.&lt;span style=&#34;color:#658b00&#34;&gt;areEqual&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;, var2.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; == var2.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt;) {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
                }
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;孰优孰劣，一目了然。&lt;/p&gt;
&lt;p&gt;类似的，Kotlin也对单例类提供了支持。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;singletonTest&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Singleton test is called.&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这和你费了半天劲写出来的java代码作用是一样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlin.Metadata&lt;/span&gt;;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Metadata&lt;/span&gt;(
        mv = {1, 4, 0},
        bv = {1, 0, 3},
        k = 1,
        d1 = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\bÆ\u0002\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004¨\u0006\u0005&amp;#34;&lt;/span&gt;},
        d2 = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;LSingleton;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;()V&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;singletonTest&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;kotlin-learning.main&amp;#34;&lt;/span&gt;}
)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; Singleton INSTANCE;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;singletonTest&lt;/span&gt;() {
        String var1 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Singleton test is called.&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; var2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(var1);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Singleton&lt;/span&gt;() {
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; {
        Singleton var0 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
        INSTANCE = var0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lambda编程&#34;&gt;Lambda编程&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; map = mapOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Apple&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Banana&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Orange&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Pear&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Grape&amp;#34;&lt;/span&gt; to &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; ((fruit, number) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; map) {
        println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;fruit is &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$fruit&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, number is &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$number&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;函数式api&#34;&gt;函数式API&lt;/h3&gt;
&lt;h4 id=&#34;maxby&#34;&gt;maxBy&lt;/h4&gt;
&lt;p&gt;集合中最长的字符串。&lt;/p&gt;
&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;
&lt;p&gt;将集合中每个元素都映射到另一个元素。&lt;/p&gt;
&lt;h4 id=&#34;filter&#34;&gt;filter&lt;/h4&gt;
&lt;p&gt;过滤集合中的数据。&lt;/p&gt;
&lt;h4 id=&#34;any&#34;&gt;any&lt;/h4&gt;
&lt;p&gt;至少有一个元素满足条件。&lt;/p&gt;
&lt;h4 id=&#34;all&#34;&gt;all&lt;/h4&gt;
&lt;p&gt;所有元素都满足条件。&lt;/p&gt;
&lt;h3 id=&#34;java函数式api&#34;&gt;Java函数式API&lt;/h3&gt;
&lt;p&gt;对于java中的单抽象方法可使用函数式API。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;Thread {
    println(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Thread is running&amp;#34;&lt;/span&gt;)
}.start()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;空指针检查&#34;&gt;空指针检查&lt;/h2&gt;
&lt;p&gt;写java时最常见的错误就是&lt;code&gt;java.lang.NullPointerException&lt;/code&gt;了吧。在Kotlin中，情况有一些改善。&lt;/p&gt;
&lt;p&gt;与java不同，Kotlin中的变量默认是不可空的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doStudy&lt;/span&gt;(study: Study) {
    study.readBooks()
    study.doHomework()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你给这个函数传一个可能为null的值，在编译期间就会得到错误提示。&lt;/p&gt;
&lt;p&gt;当然，很多情况我们还是需要让我们的函数接受一个可空的值的，则可以用这样的写法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doStudy&lt;/span&gt;(study: Study?) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (study != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        study.readBooks()
        study.doHomework()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但在Kotlin中还有更好的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doStudy&lt;/span&gt;(study: Study?) {
    study?.readBooks()
    study?.doHomework()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用上&lt;code&gt;let&lt;/code&gt;我们还可以写得更优雅：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doStudy&lt;/span&gt;(study: Study?) {
    study?.let {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.readBooks()
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.doHomework()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;?.&lt;/code&gt;表示只有不为空时才正常调用。&lt;/p&gt;
&lt;p&gt;有时我们需要这样的逻辑：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getTextLength&lt;/span&gt;(text: String?): Int {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (text != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; text.length
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin也有个方便的操作符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getTextLength&lt;/span&gt;(text: String?) = text?.length ?: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;?:&lt;/code&gt;表示前面为空时返回后面的值。&lt;/p&gt;
&lt;p&gt;当然，有些业务逻辑中Kotlin不一定能正确推断出你的变量是否可能为空，这时Kotlin也提供了让你自己操纵它的机会：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; content: String? = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initContent&lt;/span&gt;() {
    content = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;https://ntutn.top&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
    initContent()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (content != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        printContent()
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;printContent&lt;/span&gt;() {
    println(content!!)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;参考&lt;a href=&#34;https://www.w3cschool.cn/java/java-ternary-operator.html&#34;&gt;Java中的三元运算符&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;，用注解的方式简化java代码，但要求使用的ide必须安装lombok插件才能正确识别lombok生成的代码，有人认为这是在”强奸队友“。另外lombok的实现调用了jdk未公开的方法也引发争议。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/kotlin/ - CC BY-SA 4.0</description>
        </item>
    
    
  </channel>
</rss> 