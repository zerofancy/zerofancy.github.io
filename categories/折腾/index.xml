<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>折腾 on 归零幻想</title>
    <link>https://ntutn.top/categories/%E6%8A%98%E8%85%BE/</link>
    <description>Recent content in 折腾 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Fri, 16 Dec 2022 17:42:29 +0800</lastBuildDate><atom:link href="https://ntutn.top/categories/%E6%8A%98%E8%85%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin的随机数不随机</title>
      <link>https://ntutn.top/posts/kotlin%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8D%E9%9A%8F%E6%9C%BA/</link>
      <pubDate>Fri, 16 Dec 2022 17:42:29 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/kotlin%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8D%E9%9A%8F%E6%9C%BA/</guid>
      <description>大学，我们学校有3座餐厅，然后每个餐厅又有多层楼，可以说是条件还不错了。除了考前一周都无所事事的我们，每天面临最大的难题就是去哪儿吃，吃什么。
既然大家都是学软件的，那就写个app来解决这个问题吧。另外两个老哥（ @ruiOVO 、@xyx ）主要是写前端、服务端的，于是这个重任就交到了我身上。
于是大聪明我一拍脑门就写出来了，
// 实际上是写了个安卓app, 这里只是示意 val list = listOf(&amp;#34;荟萃餐厅&amp;#34;, &amp;#34;玉兰餐厅&amp;#34;, &amp;#34;唐岛湾餐厅&amp;#34;) val floor = listOf(&amp;#34;1楼&amp;#34;, &amp;#34;2楼&amp;#34;, &amp;#34;3楼&amp;#34;) println(list.random() + floor.random()) 简洁优雅，不用算上下界，我们Kotlin真是太厉害辣！
然后我们就在荟萃餐厅一楼连续吃了3天……小伙伴们都不相信我的编程水平了。
故事就到这里，那么问题在哪里呢？
随机数不随机，那么肯定是初始化时没有引入不同seed。list.random()方法默认使用的Random对象定义在kotlin stdlib的Random.kt文件中
接下来找到这个defaultPlatformRandom的实现
这东西最终用的是PlatformThreadLocalRandom，而Android的ThreadLocalRandom中出了个bug——他在zygote进程中初始化，所以每个程序打开时都是相同的初始状态。
我们可以在网上找到相关的讨论：
https://www.reddit.com/r/androiddev/comments/x8z9r1/comment/innw882/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3
https://youtrack.jetbrains.com/issue/KT-52618/ThreadLocalRandom-is-not-a-good-source-of-randomness-on-Android-before-SDK-34-so-dont-use-it-for-Kotlin-Random
解决：
避免使用List.random、Random.nextXxx之类的方法，他们最终都是调用这个PlatformThreadLocalRandom，每次需要随机数时都创建一个Random对象，传入seed：val random = Random(System.currentTimeMills());random.nextInt() 升级Kotlin版本，根据官方的缺陷跟踪器，该问题兜底修复于1.7.20版本 使用字节码修改的方法，编译时替换掉相关的调用，比如可以用lancet来处理 </description>
    </item>
    
    <item>
      <title>一个简单的桌面悬浮时钟</title>
      <link>https://ntutn.top/posts/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%82%AC%E6%B5%AE%E6%97%B6%E9%92%9F/</link>
      <pubDate>Fri, 07 Oct 2022 23:47:22 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%82%AC%E6%B5%AE%E6%97%B6%E9%92%9F/</guid>
      <description>个人非常喜欢macOS下一个叫做 zClock 的应用，它可以在桌面右下角显示一个悬浮的时钟，提醒我掌握好摸鱼节奏。
但这个软件似乎没有Linux版本，于是作为程序员，自己动手丰衣足食，花了一点时间我也写了一个。
本来学了点compose，是想用Compose写的，但是写一半发现还是不行，挺坑的，因为compose的窗口框架是swing的，而我需要在渲染后调整窗口大小，然后这个大小咋换算……于是后来改成纯swing的了，留了一个“关于”窗口用compose是我最后的倔强。
感兴趣的看官可以去 github 下载，如果你安装了 星火应用商店 可以 点击这里 直接下载。目前在 Windows 11、Kubuntu 22.04、deepin v23 测试可以使用。</description>
    </item>
    
    <item>
      <title>安卓连连看游戏设计</title>
      <link>https://ntutn.top/posts/%E5%AE%89%E5%8D%93%E8%BF%9E%E8%BF%9E%E7%9C%8B%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 25 Apr 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%AE%89%E5%8D%93%E8%BF%9E%E8%BF%9E%E7%9C%8B%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>字节取消大小周了，于是周末时间多起来了。虽然想着到处去玩，但现在疫情形势又不好了，于是安心呆在家里当一个肥宅。除了补一补番剧，就是把之前就想过的连连看游戏做出来了。
连连看游戏规则简单，点击两个相同的元素，如果他们能在两次拐弯以内连接起来，那么就可以消除。消除后就会出现空位，可以连接的就更多了。在规定时间内连续操作，直到消除所有元素。
虽然规则比较简单，但真正动手实现一遍还是很费工夫的。游戏既然做好了，那么我水一篇博客不过分吧:&amp;gt;
1
项目的代码我放到了github。写的贼丑，轻喷。 https://github.com/zerofancy/match
资源准备 连连看需要一些素材图，可以考虑用水果、动物甚至我同学的头像等，但我想把难度设计高一点，手机屏幕就这么大，图片很小也能有比较高的辨识度，思来想去还是麻将比较合适。
幸运的是，我找到了这么一套免费的图片素材，Mahjong Icons，只要提供一个指向这个页面的超链接就可以免费用。
另外还需要一个应用图标，这个我是直接在Icon Park上找了一个。
接下来将素材导入到项目，为了随处使用方便，我还定义到了一个类中：
package top.ntutn.match /** * 麻将牌 */ object Mahjong { val bamboos = listOf( R.drawable.bamboo1, R.drawable.bamboo2, R.drawable.bamboo3, R.drawable.bamboo4, R.drawable.bamboo5, R.drawable.bamboo6, R.drawable.bamboo7, R.drawable.bamboo8, R.drawable.bamboo9 ) val dragons = listOf( R.drawable.dragon_chun, R.drawable.dragon_green, R.drawable.dragon_haku ) val faceDown = R.drawable.face_down val mans = listOf( R.drawable.man1, R.drawable.man2, R.drawable.man3, R.drawable.man4, R.drawable.man5, R.drawable.man6, R.drawable.man7, R.drawable.man8, R.drawable.man9 ) val pins = listOf( R.drawable.pin1, R.drawable.pin2, R.drawable.pin3, R.</description>
    </item>
    
    <item>
      <title>干掉macOS的OCSP</title>
      <link>https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/</link>
      <pubDate>Sun, 21 Feb 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/</guid>
      <description>苹果这两天摊上事了，有不少用户说自己的设备打开应用程序会卡好几分钟，然后分析发现是苹果的OCSP校验导致的。
当启动一个新应用程序的时候，系统会把其hash发送到ocsp.apple.com用于校验，而这次是这个服务挂了但是能ping通……
这个事情引起不小的讨论，主要集中在有关隐私的担忧上。本来我没有太在意，但测试发现这好像是我每次休眠恢复后触摸板卡几秒的元凶……
那对不起了。
echo &amp;#34;127.0.0.1 ocsp.apple.com&amp;#34; | sudo tee -a /etc/hosts 反正还有SEP把门呢。</description>
    </item>
    
    <item>
      <title>闷声作大死：删除电脑内的空文件夹</title>
      <link>https://ntutn.top/posts/%E9%97%B7%E5%A3%B0%E4%BD%9C%E5%A4%A7%E6%AD%BB%E5%88%A0%E9%99%A4%E7%94%B5%E8%84%91%E5%86%85%E7%9A%84%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Sun, 16 Jun 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E9%97%B7%E5%A3%B0%E4%BD%9C%E5%A4%A7%E6%AD%BB%E5%88%A0%E9%99%A4%E7%94%B5%E8%84%91%E5%86%85%E7%9A%84%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>电脑卸载软件时，卸载程序常常不会把程序对应的空文件夹删掉，一般这时候我都是手动去把他删掉。
我觉得有点麻烦，又想到电脑内可能还有其他的空文件夹。于是在网上找了个脚本删除电脑内的空文件夹，然后就遇到了麻烦……
也许本文标题应该是一个空文件夹引发的血案……
删除电脑内的空文件夹 本来我曾经写过一个C#版本的删除电脑空文件夹的工具，原理很简单，就是递归嘛：
但是这程序执行比较慢，而且占用内存不少……
在网上搜索了下，果然不能闭门造车啊，有大佬写过批处理：
for /f &amp;#34;tokens=*&amp;#34; %%a in (&amp;#39;dir /b /ad /s C:\^|sort /r&amp;#39;) do rd &amp;#34;%%a&amp;#34; /q 2&amp;gt;nul 试用了下，效果相当不错。于是稍微修改使它能申请管理员权限，顺便修改下控制台颜色，看上去炫一点：
title 删除空文件夹 color 03 echo 程序需要管理员权限…… set /a _Debug=0 ::========================================== :: 获取管理员权限 set _Args=%* if &amp;#34;%~1&amp;#34; NEQ &amp;#34;&amp;#34; ( set _Args=%_Args:&amp;#34;=% ) fltmc 1&amp;gt;nul 2&amp;gt;nul || ( cd /d &amp;#34;%~dp0&amp;#34; cmd /u /c echo Set UAC = CreateObject^(&amp;#34;Shell.Application&amp;#34;^) : UAC.ShellExecute &amp;#34;cmd.exe&amp;#34;, &amp;#34;/k cd &amp;#34;&amp;#34;%~dp0&amp;#34;&amp;#34; &amp;amp;&amp;amp; &amp;#34;&amp;#34;%~dpnx0&amp;#34;&amp;#34; &amp;#34;&amp;#34;%_Args%&amp;#34;&amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;runas&amp;#34;, 1 &amp;gt; &amp;#34;%temp%\GetAdmin.</description>
    </item>
    
    <item>
      <title>使用映像劫持技术屏蔽电脑中的广告进程</title>
      <link>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 28 Mar 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/</guid>
      <description>映像劫持（Image File Execution Options），简单的说法，就是当你打开的是程序A，而运行的确是程序B。映像劫持其实是Windows内设的用来调试程序的功能，但是现在却往往被病毒恶意利用。当用户双击对应的程序后，操作系统就会给外壳程序（例如“explorer.exe”）发布相应的指令，其中包含有执行程序的路径和文件名，然后由外壳程序来执行该程序。事实上在该过程中，Windows还会在注册表的上述路径中查询所有的映像劫持子键，如果存在和该程序名称完全相同的子键，就查询对应子健中包含的“dubugger”键值名，并用其指定的程序路径来代替原始的程序，之后执行的是遭到“劫持”的虚假程序。
国内很多软件都有重度广告，“资讯”、“新闻”、“弹窗”，不胜其烦。直接找到广告进程删除掉，结果一自动更新，又回来了。
于是，我想到了“映像劫持”：
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SLBService.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\TsService.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\FoxitDesktopAd.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\FoxitProtect.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LCServer.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LRServer.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\2345MiniPage.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SohuNews.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\PinyinUp.exe] &amp;#34;Debugger&amp;#34;=&amp;#34;winlogon&amp;#34; [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SGDownload.</description>
    </item>
    
    <item>
      <title>我发现了齐鲁软件大赛系统的漏洞</title>
      <link>https://ntutn.top/posts/%E6%88%91%E5%8F%91%E7%8E%B0%E4%BA%86%E9%BD%90%E9%B2%81%E8%BD%AF%E4%BB%B6%E5%A4%A7%E8%B5%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Thu, 03 Jan 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E6%88%91%E5%8F%91%E7%8E%B0%E4%BA%86%E9%BD%90%E9%B2%81%E8%BD%AF%E4%BB%B6%E5%A4%A7%E8%B5%9B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%8F%E6%B4%9E/</guid>
      <description>事情起因是这样的：
本来我计划今天处理齐软提交作品的事情，然而知乎真是好看……
等我想起了这回事，提交信息后，先弹出修改成功提示，然后告诉我没有登录。
what?没有登录但修改成功了？
吓得我感觉登进去，可不就是我刚刚填写的资料嘛。
为了排除在线编辑器本地保存重新加载的可能，我祭出curl。
然后再次登进去
嗯，没得洗了。直接修改数据的接口竟然不做登录验证。万一我写个循环这不就几乎删库了。
不过我是谁？我是正直的好青年，我当然选择把bug上交国家，不对，是告诉厂家，不对怎么说来着……算了，就是这个意思。
目前这个bug已经修复了，可惜也不能凭借发现这么严重漏洞直接拿个奖……</description>
    </item>
    
  </channel>
</rss>
