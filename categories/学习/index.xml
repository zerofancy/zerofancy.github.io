<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on 归零幻想</title>
    <link>https://ntutn.top/categories/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Sun, 13 Feb 2022 18:11:08 +0800</lastBuildDate><atom:link href="https://ntutn.top/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AUIL学习</title>
      <link>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 13 Feb 2022 18:11:08 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</guid>
      <description>AUIL 源码学习 重点问题 AUIL是个比较知名的图片加载库，源码结构比较清晰和简单，我在阅读学习中整理了以下内容。
MemoryCache 顾名思义，这个是在内存中缓存Bitmap相关的代码。
MemoryCache结合了策略模式和装饰器模式，初始化时可选择不同缓存策略。
一个Cache类内部持有一定量的Bitmap元素，并根据某种策略自动移除未使用的Bitmap。看结构我们应该从BaseMemoryCache开始看起。
BaseMemoryCache中持有了所有放入的元素的弱引用，而它的子类根据策略持有了部分缓存对象的强引用。
整个框架分多少个模块，每个模块的作用是什么 ImageLoader 门面。 ImageAware 对最终处理和展示图片操作的封装。 MemoryCache bitmap在内存中的缓存。 BitmapProcessor 图片处理器，处理原始图片。分为预处理和后处理，预处理的结果会存入缓存，而后处理每次展示都会执行。 BitmapDisplayer 控制图片展示，可为其附加一定的展示效果。 DiskCache bitmap在磁盘中的缓存 ImageDecoder 将图片解码为Bitmap，并缩放到合适尺寸 如何仅通过interface就将框架的整个流程串联起来 如何进行内存管理的，LRU是种什么算法，有没有比LRU更好的？ AUIL的图片缓存有二级，一是所有缓存过的图片都会持有WeakReference，可能随时回收；二是部分图片会持有强引用，不会被回收。这里的部分图片的总共大小可以设置，达到阈值之后使用一定的算法淘汰一些图片。这里最常用的就是LRU。
LRU是淘汰缓存文件的算法，它每次淘汰最久未使用的文件。是一种最常用的页面置换算法。除了LRU之外，AUIL预置的算法还有FIFO（先入先出）、LargestLimitted（淘汰最大的文件）、LFU（淘汰使用频率最低的）。三者各有优劣。
如，LRU因为图片展示频率在时间上的不均匀性，可能将一些高频展示的图片淘汰掉，导致缓存命中率下降；LFU对于新图片频率统计无法比较好把控。
用到了多少个线程池，这些线程池之间的区别是什么，如果只用一个线程池可以么？ 使用了三个线程池：
taskExecutor taskExecutorForCachedImages taskDistributor taskExecutor和taskExecutorForCachedImages都是用来执行图片处理和展示任务的，他们处理顺序都是个LIFO（后进先出）的队列，而taskDistributor是个普通的线程池，用于框架内其他任务。
taskExecutorForCachedImages是专门为缓存中读取的图片展示用的线程池，因为这类图片响应会很快，所以AUIL专门给他们准备了一个线程池。 综上，如果用一个线程池则最终效果会大打折扣。</description>
    </item>
    
    <item>
      <title>android项目开发：持久化</title>
      <link>https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sun, 24 Oct 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>《第一行代码》阅读记录，有关数据持久化存储，略过了数据库的方式。
持久化 文件存储 先暂时只是写了个demo，有需要再深入看。
private fun saveText(inputText: String) { try { val output = openFileOutput(&amp;#34;data&amp;#34;, Context.MODE_PRIVATE) val writer = BufferedWriter(OutputStreamWriter(output)) writer.use { it.write(inputText) } } catch (e: IOException) { e.printStackTrace() } } private fun loadText(): String { val content = StringBuilder() try { val input = openFileInput(&amp;#34;data&amp;#34;) val reader = BufferedReader(InputStreamReader(input)) reader.use { r -&amp;gt; r.forEachLine { content.appendLine(it) } } } catch (e: IOException) { e.printStackTrace() } return content.toString() } SharedPreference saveButton.</description>
    </item>
    
    <item>
      <title>android项目开发：Kotlin</title>
      <link>https://ntutn.top/posts/kotlin/</link>
      <pubDate>Tue, 12 Oct 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/kotlin/</guid>
      <description>Kotlin 变量和函数 变量 用var和val定义变量，并有类型自动推导的支持。
val用来声明一个不可变的变量，var用来声明一个可变的变量。
val a = 10 var b: Int = 12 Kotlin完全抛弃了java中的基本数据类型，完全使用对象数据类型。
java基本数据类型 Kotlin对象数据类型 数据类型说明 int Int 整型 long Long 长整型 short Short 短整型 float Float 单精度浮点型 double Double 双精度浮点型 boolean Boolean 布尔型 char Char 字符型 byte Byte 字节型 函数 语法：
fun main(args: Array&amp;lt;String&amp;gt;) { println(&amp;#34;Hello World!&amp;#34;) } Kotlin中的函数在无必要时可以省略很多东西：
import kotlin.math.max fun largerNumber(a: Int, b: Int) = max(a, b) fun main(args: Array&amp;lt;String&amp;gt;) { val a = 3 val b = 5 println(&amp;#34;The larger number of a and b is ${largerNumber(a, b)}&amp;#34;) } 程序的逻辑控制 if 与java中的if语句相比，Kotlin中的if是可以有返回值的。</description>
    </item>
    
    <item>
      <title>装饰模式实现分享功能</title>
      <link>https://ntutn.top/posts/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 19 Jul 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</guid>
      <description>代码 业务代码不可能直接贴出来，我按照大致的设计写了如下demo。
import java.lang.IllegalArgumentException fun main() { listOf( ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;图2&amp;#34;, &amp;#34;图3&amp;#34;), true), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;图2&amp;#34;, &amp;#34;图3&amp;#34;), false), ShareData(listOf(&amp;#34;视频1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;视频3&amp;#34;), true), ShareData(listOf(&amp;#34;视频1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;视频3&amp;#34;), false), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;图3&amp;#34;), true), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;图3&amp;#34;), false) ).forEach { println(&amp;#34;测试$it&amp;#34;) if (it.handler.requestPermission()) { it.handler.doShare(it) } else { println(&amp;#34;申请权限失败&amp;#34;) } println() } } class ShareData(val urls: List&amp;lt;String&amp;gt;, val isFromSDK: Boolean) { companion object { const val IMAGE = 0x1 const val VIDEO = 0x2 const val MIX = IMAGE.</description>
    </item>
    
    <item>
      <title>ClassLoader双亲委托机制探究</title>
      <link>https://ntutn.top/posts/classloader%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Sun, 11 Apr 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/classloader%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6/</guid>
      <description>最近在研究抖音进入热点内流的耗时问题，种种线索指向了类加载耗时上。为此，我研究了Java类加载的双亲委托机制，并尝试给出了优化建议。
双亲委托机制 双亲委托机制中最重要的是loadClass方法，让我们看看它是怎么实现的。
protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { // First, check if the class has already been loaded Class&amp;lt;?&amp;gt; c = findLoadedClass(name); // 已加载过直接返回 if (c == null) { try { if (parent != null) { c = parent.loadClass(name, false); //尝试让parent加载 } else { c = findBootstrapClassOrNull(name); // bootstrap class loader是否加载过 } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class.</description>
    </item>
    
    <item>
      <title>DebugEntrance和DebugConfig</title>
      <link>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</link>
      <pubDate>Mon, 22 Feb 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</guid>
      <description>工欲善其事，必先利其器。毕设是一个相对复杂的项目了，我觉得要想顺利完成肯定是需要一些手段帮助我调试的。于是这里我准备了debug页面，主要功能就两个：提供某个功能的入口以及存储配置（最好能直接在手机上修改）
DebugEntrance 就是一个各种测试功能的入口。
这个一看实现就很简单，不细说了。
DebugConfig 因为字节自己的ABManager用着挺顺手，感觉自己项目调试时有类似这么个东西会比较舒服，于是搞了这么个东西。
使用 先看使用：
@ZeroConfig(key = &amp;#34;retrofit_config&amp;#34;, title = &amp;#34;Retrofit配置&amp;#34;, owner = &amp;#34;liuhaixin.zero&amp;#34;) data class RetrofitConfig(val baseUrl: String = RetrofitUtil.BASE_URL) private val retrofitConfig by zeroConfig&amp;lt;RetrofitConfig&amp;gt;() private val retrofit by lazy { Retrofit.Builder() .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL) .addConverterFactory(GsonConverterFactory.create()) .client(okHttpClient) .build() } 看上去还是有点让人心动的吧。
属性委托、泛型实化 首先是一段来自菜鸟教程的描述：
属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类属性的统一管理。
val/var &amp;lt;属性名&amp;gt;: &amp;lt;类型&amp;gt; by &amp;lt;表达式&amp;gt; by 关键字之后的表达式就是委托, 属性的 get() 方法(以及set() 方法)将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口, 但必须提供 getValue() 函数(对于 var属性,还需要 setValue() 函数)。
借助这个特征，我们可以定义这样一个委托类：</description>
    </item>
    
    <item>
      <title>ViewBinding、ViewModel和LiveData</title>
      <link>https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/</link>
      <pubDate>Mon, 22 Feb 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/</guid>
      <description>毕设项目没有历史包袱，我可以尽量向best practice努力。
ViewBinding 无数人痛恨findViewById，并且为了干掉它做了许多尝试，比如ButterKnife、kotlin-android-extensions。
现在，有了ViewBinding，项目中真的可以不写findViewById了。至少目前为止我的毕设项目还没有一个findViewById。
其实与ViewBinding相似的，还有一个DataBinding，但我不太喜欢，感觉在xml里面写代码不是一个好主意。
使用 首先在build.gradle（或build.gradle.kts）中的android块添加
buildFeatures { viewBinding = true } 在xml中正常定义你的布局
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; android:orientation=&amp;#34;vertical&amp;#34; tools:context=&amp;#34;.MainActivity&amp;#34;&amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/text_view&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;Hello World!&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/test_button&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;toast&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/change_button&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;change&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt; 接下来就可以愉快使用了
package top.ntutn.viewmodeldemo import android.os.Bundle import android.widget.Toast import androidx.appcompat.app.AppCompatActivity import top.ntutn.viewmodeldemo.databinding.ActivityMainBinding class MainActivity : AppCompatActivity() { private lateinit var binding: ActivityMainBinding override fun onCreate(savedInstanceState: Bundle?</description>
    </item>
    
    <item>
      <title>【译】用BuildSrc和Kotlin_DSL管理Gradle依赖</title>
      <link>https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Sun, 21 Feb 2021 03:00:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/</guid>
      <description>多模块工程中一个更好的引入依赖的方法 翻译自Gradle Dependency Management With BuildSrc and Kotlin DSL
第一次尝试翻译英文文章……
要点 主要集中在如何用buildSrc目录和Kotlin DSL脚本构建一个Gradle依赖管理系统，你也会学到这样做相对使用传统Groovy代码的好处。
如果你倾向于通过视频来看这篇博客，文末附有一个Youtube视频。
问题 众所周知在一个快速发展的项目中维护依赖是一个乏味的工作，而传统的Groovy脚本没有code navigation、自动补全，再加上性能问题和运行时错误让这一切变得更糟糕。
更重要的是，多数安卓开发者不懂Groovy，甚至我也不知道我之前在用Groovy做啥。
感谢Gradle团队和社区的工作提供了一个顺畅安全的构建流程，他们提出的最棒的主意之一就是用Kotlin DSL脚本写buildSrc目录。
解决 依赖库引入和自定义task不应该放到构建脚本中，它们应该被声明到一个独立文件中再被构建脚本使用。在这个实现的早期，开发者习惯于创建一个Gradle文件来声明所有库并在构建脚本中使用。
这确实在一定程度上解决了问题，你可以在这篇文章读到这种方法。但这个简单方案不能解决类似自动补全和code navigation的问题，这使得在长远上看这个方案不够可靠。在这之外，buildSrc似乎有希望解决这个问题。
这个目录被当作一个included build看待。在发现这个目录之后，Gradle自动编译和测试它的代码，并将编译结果放到你的构建脚本的class path中。在一个多模块的工程中只能有一个这样的目录，并且要放到工程的顶级目录中。应该优先通过script plugins因为这样更便于管理、重构和测试代码。 ——Gradle团队
创建buildSrc目录 使用Kotlin DSL脚本不但能解决构建脚本中的这些问题，还能得到先进的IDE支持，包括code navigation、编译时错误提示等。最重要的，我们再也不用使用Groovy了。
我们要做的第一件事是创建一个buildSrc目录：
在工程上右键 点击New并选择Directory 把它命名为buildSrc 如果你仍然不懂怎么创建这个目录，请看这里：
然后我们需要在这个目录里创建一个叫做build.gradle.kts的文件，在这个文件里导入插件和存储库。
plugins{ `kotlin-dsl` } repositories { jcenter() } 完成后你还需要点击gradle的“sync now”按钮，因为gradle把它当作了一个新建目录中的普通文件。现在你可以实现Kotlin DSL脚本了。
下一步是创建一个类似这样的目录结构src&amp;gt;main&amp;gt;java，完成后如上图所示。
现在我们可以创建Kotlin文件来声明依赖库，管理版本或者实现自定义task。
现在我们的目标是实现一个依赖管理系统，所以我们创建一个叫做Dependencies.kt的文件（你可以用你喜欢的任何名字）。
完成后我们就可以通过Kotlin代码来声明依赖库和版本了。这里我们用object来声明特定的类型，例如版本号、AndroidX依赖库等。
首先我们创建一个用来用Kotlin风格定义所有依赖库版本号的object。
object Versions{ val constraint_layout_version = &amp;#34;1.1.3&amp;#34; val lifecycle_version = &amp;#34;2.2.0&amp;#34; val coroutines_version = &amp;#34;1.3.8&amp;#34; val kotlin_version = &amp;#34;1.</description>
    </item>
    
    <item>
      <title>android项目开发：通知</title>
      <link>https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Tue, 12 Jan 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/</guid>
      <description>仍然是第一行代码的笔记，这篇是有关通知的，最基本的用法。
通知的相关知识 通知是什么不再赘述，这里只记录些重要但没接触的概念。
通知渠道在8.0（O）引入。要求APP将通知分类，通过不同渠道进行分发，用户可以选择性禁用某个渠道的通知，或者调整优先等级。
通知可以有不同的重要等级，有四种：IMPORTANCE_HIGH、IMPORTANCE_DEFAULT、IMPORTANCE_LOW、IMPORTANCE_MIN。根据重要等级不同，通知可能有不同的展现策略，比如在前台提示甚至播放声音。
在通知渠道创建时通知的重要等级也就确定了，之后不能再被APP修改。
通知dmeo package top.ntutn.notificationtest import android.app.NotificationChannel import android.app.NotificationManager import android.app.PendingIntent import android.content.Context import android.content.Intent import android.graphics.BitmapFactory import android.os.Build import androidx.appcompat.app.AppCompatActivity import android.os.Bundle import androidx.core.app.NotificationCompat import top.ntutn.notificationtest.databinding.ActivityMainBinding class MainActivity : AppCompatActivity() { private lateinit var binding: ActivityMainBinding override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) binding = ActivityMainBinding.inflate(layoutInflater) setContentView(binding.root) initView() } private fun initView(){ val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager if(Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O){ // 通知渠道 val channel = NotificationChannel(&amp;#34;normal&amp;#34;,&amp;#34;Normal&amp;#34;,NotificationManager.</description>
    </item>
    
    <item>
      <title>android项目开发：UI设计</title>
      <link>https://ntutn.top/posts/ui%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 21 Dec 2020 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/ui%E8%AE%BE%E8%AE%A1/</guid>
      <description>仍然是《第一行代码》的学习笔记，这里记录的东西相对少一点，UI上的东西还是更多在实际项目中感受到。比如我想没有必要写TextView的介绍吧。
控件的使用方法 dp是一种屏幕密度无关的尺寸单位，可以保证在不同分辨率的手机上显示效果尽可能一致。
match_parent表示让当前控件大小和父布局的大小一致。
wrap_content表示让当前控件的大小能正好包裹里面的内容。
android:gravity指定控件内的内容对齐方式，有top、bottom、start、end、center等可选，可以用|指定多个值。比如center等价于center_vertical|center_horizonal。
基本布局 LinearLayout 线性布局，通过android:orientation指定方向。
有一个重要属性：android:layout_weight，它将控件已经占用的空间减掉后按照比重分给各个控件。一般我们直接指定android:layout_width为0dp，而给它指定一个比重，这样控件的尺寸将占满剩余空间。
RelativeLayout 相对布局，复杂，但有迹可循。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;RelativeLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; tools:context=&amp;#34;.MainActivity&amp;#34;&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button1&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_alignParentLeft=&amp;#34;true&amp;#34; android:layout_alignParentTop=&amp;#34;true&amp;#34; android:text=&amp;#34;Button1&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button2&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_alignParentTop=&amp;#34;true&amp;#34; android:layout_alignParentRight=&amp;#34;true&amp;#34; android:text=&amp;#34;Button2&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button3&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_centerInParent=&amp;#34;true&amp;#34; android:text=&amp;#34;Button3&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button4&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_alignParentLeft=&amp;#34;true&amp;#34; android:layout_alignParentBottom=&amp;#34;true&amp;#34; android:text=&amp;#34;Button4&amp;#34; /&amp;gt; &amp;lt;Button android:id=&amp;#34;@+id/button5&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_alignParentRight=&amp;#34;true&amp;#34; android:layout_alignParentBottom=&amp;#34;true&amp;#34; android:text=&amp;#34;Button5&amp;#34; /&amp;gt; &amp;lt;/RelativeLayout&amp;gt; 以上这段布局文件描述的就是一个相对布局，共有5个按钮，分别在父布局的左上、右上、中间、左下、右下位置。
相对布局不仅可以相对于父布局，也可以相对于控件。以下描述了button3在中间，左上button1，右上button2，左下button4，右下button5的布局场景。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;RelativeLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; tools:context=&amp;#34;.</description>
    </item>
    
    <item>
      <title>android项目开发：项目结构</title>
      <link>https://ntutn.top/posts/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 08 Dec 2020 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>虽然已经在字节实习并拿到转正offer，但实际我自己感受我现在对安卓基础知识掌握的程度还差很多，感觉写业务代码本身并不能带来多少提升。
恰逢前两天看到黄正楠那里有一本看上去不错的书1，而在淘宝也在打折，就买了一本。
那么从Hello Wrold开始，先看看安卓项目的项目结构。
[TOC]
.gradle和.idea Android Studio自动生成的文件，无需关心。
app 项目中的代码、资源等内容。
build 编译时自动生成的文件，不需要关心。
libs 存放项目中的第三方jar包，这个目录下的jar包会自动添加到项目的构建路径下。
src androidTest Android Test测试用例，可以对项目进行一些自动化测试。
实际上在公司里发现基本不写测试用例，全靠QA瞎几把点。
test 用来编写单元测试用例，对项目进行自动化测试。
这里的测试用例是不依赖安卓框架的。
main java 存放所有java代码（和Kotlin代码）的地方。
res 项目的资源文件夹，项目中使用到的所有图片、布局、字符串等资源都存在这个目录下。
图片存放在drawable目录下，布局存放在layout目录下，字符串存放在values目录下。
mipmap存放图标，之所以有很多mipmap目录是为了适配各种设备。若只有一份图片，那么放在xxhdpi下就可以了。
AndroidManifest.xml 整个Android项目的配置文件，程序中定义的四大组件都需要在这个文件中注册。此外，还可以在这个文件中添加应用程序的权限声明。
.gitignore 类似外层的.gitignore，用来在版本控制系统中排除app模块中的指定文件。
build.gradle app模块的gradle构建脚本，指定很多项目构建相关的配置。
插件com.android.application用于应用程序模块，com.android.library表示库模块。前者可以直接运行，后者只能作为代码库依附于应用程序模块运行。
proguard-rules.pro 指定项目代码的混淆方式。
build 编译时自动生成的内容。
gradle gradle wrapper的配置文件。Android Studio会根据本地的缓存i去=情况决定是否需要联网下载gradle。
.gitignore 排除文件或文件夹的git版本控制。
对于所有项目都会用到的.gitignore条目，不妨加入~/.gitignore全局配置。
build.gradle 项目全局的构建脚本。
repositories中，google()对应谷歌自家代码仓库依赖，jcenter()中则是很多第三方开源库。
gradle.properties 全局gradle的配置文件。
gradlew和gradlew.bat 这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的，gradlew.bat是在Windows系统中使用的。
local.properties 用于指定本机中的Android SDK路径。
settings.gradle 用来指定项目中所有引入的模块。
《第一行代码》&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>android项目开发：多线程编程</title>
      <link>https://ntutn.top/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 21 Aug 2020 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</guid>
      <description>仍然是《第一行代码》的笔记，不过略过了deprated的内容，并探究了下Handler的工作机制。
上班了，果然没有那么多大块时间写博客了。
Handler 主线程不能进行耗时处理，子线程不能访问UI，所以我们需要异步消息处理机制。
使用 class MainActivity : AppCompatActivity() { private lateinit var binding: ActivityMainBinding private val handler = object : Handler(Looper.getMainLooper()) { override fun handleMessage(msg: Message) { when(msg.what){ MSG_UPDATE_TEXT -&amp;gt; binding.textView.text = &amp;#34;Nice to meet you. &amp;#34; } } } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) binding = ActivityMainBinding.inflate(layoutInflater) setContentView(binding.root) initView() } private fun initView() { binding.apply { changeTextButton.setOnClickListener { thread { val msg = Message() msg.what = MSG_UPDATE_TEXT handler.</description>
    </item>
    
    <item>
      <title>Java自动装箱自动拆箱踩坑</title>
      <link>https://ntutn.top/posts/java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Sun, 01 Mar 2020 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E8%B8%A9%E5%9D%91/</guid>
      <description>int和Integer有什么区别？前者是基础数据类型，后者是封装的Java对象。但在有Autoboxing和Unboxing的情况下我们常常就把两者等同看待，无非后者能放null。
事情要首先从一道力扣题目说起：
删除排序数组中的重复项 II 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
示例 1: 给定 nums = [1,1,1,2,2,3], 函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,0,1,1,1,1,2,3,3], 函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 你不需要考虑数组中超出新长度后面的元素。
Answer 针对这个题目，我写出了这样的代码：
/* * @lc app=leetcode.cn id=80 lang=java * * [80] 删除排序数组中的重复项 II */ // @lc code=start class Solution { public int removeDuplicates(int[] nums) { int l = 0, r = 0; int ans1 = Integer.</description>
    </item>
    
    <item>
      <title>大型数组按行遍历与按列遍历的区别</title>
      <link>https://ntutn.top/posts/%E5%A4%A7%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 16 Sep 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%A4%A7%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>今天这学期开学第一天，上了《计算机操作系统原理》，老师提出个问题
对于一个很大的数组（如70000×70000），按行遍历速度快还是按列遍历快，为什么？
乍一看，程序时间复杂度一样，理论上不是应该一样快吗？难道老师在钓鱼？
实践出真知，我们就写个程序跑一跑。
程序 70000×70000我电脑在默认情况下开不下，我这里用20000×20000测试
按行遍历 /** * M1 */ public class M1 { public static void main(String[] args) { final int N=20000; int[][] a = new int[N][N]; Long start=System.currentTimeMillis(); for(int i=0;i&amp;lt;N;i++){ for (int j = 0; j &amp;lt; N; j++) { a[i][j]=1; } } Long stop=System.currentTimeMillis(); System.out.println(stop-start); } } 按列遍历 /** * M2 */ public class M2 { public static void main(String[] args) { final int N=20000; int[][] a = new int[N][N]; Long start=System.</description>
    </item>
    
    <item>
      <title>学生管理系统</title>
      <link>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 13 Apr 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description>翻出了以前C语言C实验的大作业，当时搞了好多奇技淫巧，最终拿到99分。
介绍 学生成绩管理系统v6.0是由软件工程1702刘海鑫设计的一款用于学生成绩管理的软件。
文件列表 Stuv6.0.exe	主体程序，用于实现整体功能。 main.dat	程序的数据文件，用于存储学生信息。 goodbye.bmp	程序退出时加载的图片。 desktop.ini	修改程序所在文件夹的图标。 consoletest.exe	编译的au3程序，用于辅助输入中文。 代码：
$re=InputBox(&amp;#34;Input&amp;#34;,&amp;#34;You can input your massage now.(支持中文)&amp;#34;) ConsoleWrite($re) code.dat	密码存储文件。该文件存储的是xor算法加密的账号密码。 black.bmp	一张纯黑的图片，用于清除控制台加载图片的痕迹。2018年1月20日使用了image /d清除图片，本文件不再使用。 background.bmp	程序启动时加载的图片。 about.rtf	程序的说明文档。 scaned.txt	存储用户输入的临时文件，一般会自动清除。 subjects.dat	存储科目的名称，每行一个，最多允许50个，可用记事本直接打开编辑。 image.exe	外部程序，用于加载图片。 使用说明 双击stuv6.0.exe，程序启动。
待启动图片显示过后，出现密码输入框，回车确认输入。
默认账号：admin
默认密码：admin888
输入密码时如果输入~符号，将弹出一个信息框提示输入。这是为了便于输入中文和特殊符号。
本程序的密码存储是xor运算的结果，仅用于比对密码是否正确。
接下来进入主菜单。菜单使用黄色为底色，红色标定选中项。你可以按上下键选择，或直接按项目对应数字，回车确认。
开发日志 2018年3月10日，加入了控制台窗口大小控制的代码。
修改了exe文件的图标。
改用外部程序image.exe加载图片，并修改gotoxy函数的使用，成功使代码兼容了gun gcc系列编译器。
测试WIN7运行效果，图片加载错位，无法全屏，其他功能不受影响。
在科目分析功能加入分层成绩展示，至此，程序主体开发完毕。
加入查找功能，查找方式为遍历，依据为id或姓名。 同理，加入按id排序、按姓名的字典顺序排序。 数据排序功能，选择后弹出二级菜单，进行升序排序或降序排序。 排序的结果不会保存。 排序后将自动展示排序结果。
加入了科目分析，统计各科总分平均分。
删除学生功能准备完成。
将修改密码部分移出主函数，便于管理。
学生信息展示准备完成。
添加学生功能准备完成，界面比较简陋。
发现有点控制台用BitBlt画的图不会自动清除，于是找了一张全黑的图片将其覆盖。
发现在WIN7等系统控制台加载图片会出现错位，暂时不打算解决。
开始准备程序主体功能。
记事本太单调，决定将about改为写字板，内容为本文件。
发现了atexit函数，于是顺理成章地加入了程序退出图。
找到一个取巧的方法。控制台也是一个窗口，获取了他的句柄就可以在上面用BitBlt直接画图了吧。
决定加入加载启动退出图片功能。可是Windows环境下C语言直接调用GDI常常导致系统蓝屏。虽然直接用其他语言就可以轻松写出，但总是有点不甘心。</description>
    </item>
    
  </channel>
</rss>
