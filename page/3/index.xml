<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>归零幻想</title>
    <link>https://ntutn.top/</link>
    <description>Recent content on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Fri, 16 Dec 2022 17:42:29 +0800</lastBuildDate>
    
        <atom:link href="https://ntutn.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>DebugEntrance和DebugConfig</title>
        <link>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</link>
        <pubDate>Mon, 22 Feb 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</guid>
        <description>归零幻想 https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;工欲善其事，必先利其器。毕设是一个相对复杂的项目了，我觉得要想顺利完成肯定是需要一些手段帮助我调试的。于是这里我准备了debug页面，主要功能就两个：提供某个功能的入口以及存储配置（最好能直接在手机上修改）&lt;/p&gt;
&lt;h2 id=&#34;debugentrance&#34;&gt;DebugEntrance&lt;/h2&gt;
&lt;p&gt;就是一个各种测试功能的入口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/22/gOV6niTxoBfXbWv.jpg&#34; alt=&#34;1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个一看实现就很简单，不细说了。&lt;/p&gt;
&lt;h2 id=&#34;debugconfig&#34;&gt;DebugConfig&lt;/h2&gt;
&lt;p&gt;因为字节自己的ABManager用着挺顺手，感觉自己项目调试时有类似这么个东西会比较舒服，于是搞了这么个东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/22/Mi8lCJdZBcjnYmO.jpg&#34; alt=&#34;2.jpg&#34;&gt; &lt;img src=&#34;https://i.loli.net/2021/02/22/cEAfgMVPzrSXmuY.jpg&#34; alt=&#34;3.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;先看使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@ZeroConfig&lt;/span&gt;(key = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;retrofit_config&amp;#34;&lt;/span&gt;, title = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Retrofit配置&amp;#34;&lt;/span&gt;, owner = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;liuhaixin.zero&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;RetrofitConfig&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; baseUrl: String = RetrofitUtil.BASE_URL)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; retrofitConfig &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; zeroConfig&amp;lt;RetrofitConfig&amp;gt;()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; retrofit &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy {
    Retrofit.Builder()
        .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())
        .client(okHttpClient)
        .build()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看上去还是有点让人心动的吧。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;属性委托泛型实化&#34;&gt;属性委托、泛型实化&lt;/h3&gt;
&lt;p&gt;首先是一段来自&lt;a href=&#34;https://www.runoob.com/kotlin/kotlin-delegated.html&#34;&gt;菜鸟教程&lt;/a&gt;的描述：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类属性的统一管理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;lt;&lt;/span&gt;属性名&amp;gt;: &amp;lt;类型&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; &amp;lt;表达式&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;by 关键字之后的表达式就是委托, 属性的 get() 方法(以及set() 方法)将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口, 但必须提供 getValue() 函数(对于 var属性,还需要 setValue() 函数)。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;借助这个特征，我们可以定义这样一个委托类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ZeroConfigDelegate&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; clazz: Class&amp;lt;T&amp;gt;) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getValue&lt;/span&gt;(thisRef: Any?, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;property&lt;/span&gt;: KProperty&amp;lt;*&amp;gt;): T? =
        ZeroConfigHelper.readConfig(clazz)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setValue&lt;/span&gt;(thisRef: Any?, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;property&lt;/span&gt;: KProperty&amp;lt;*&amp;gt;, value: T?) =
        ZeroConfigHelper.saveConfig(clazz, value)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样我们需要存取配置的时候只要&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; config &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; ZeroConfigDelegate(ConfigClass::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java)
&lt;span style=&#34;color:#228b22&#34;&gt;// 存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;config = ConfigClass(arg)
&lt;span style=&#34;color:#228b22&#34;&gt;// 取
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;println(config.key1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来定义一个顶级函数（&lt;em&gt;我也不知道这样有啥好处，但看Kotlin库lazy函数就是这样实现的&lt;/em&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 委托获取配置值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param clazz 配置类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;zeroConfig&lt;/span&gt;(clazz: Class&amp;lt;T&amp;gt;): ZeroConfigDelegate&amp;lt;T&amp;gt; = ZeroConfigDelegate(clazz)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相对java的泛型，Kotlin还提供了一个叫做“泛型实化”的东西，可以进一步让我们上面写法更优雅：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 委托获取配置值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 泛型实化，调用更方便
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reified&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;zeroConfig&lt;/span&gt;(): ZeroConfigDelegate&amp;lt;T&amp;gt; =
    zeroConfig(T::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在调用时就是开始的那个例子那样了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; config &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; zeroConfig&amp;lt;ConfigClass&amp;gt;()
&lt;span style=&#34;color:#228b22&#34;&gt;// 存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;config = ConfigClass(arg)
&lt;span style=&#34;color:#228b22&#34;&gt;// 取
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;println(config.key1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置的存取&#34;&gt;配置的存取&lt;/h3&gt;
&lt;p&gt;这里代码目前实现很简单，就是直接转换成json然后存到sp里。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveConfig&lt;/span&gt;(clazz: Class&amp;lt;*&amp;gt;, value: T) {
    bufferMap[clazz] = value
    sp.edit {
        putString(getKeyOfClass(clazz), gson.toJson(value))
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;readConfig&lt;/span&gt;(clazz: Class&amp;lt;*&amp;gt;): T {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (bufferMap.containsKey(clazz)) {
        bufferMap[clazz]
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; jsonString = sp.getString(getKeyOfClass(clazz), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;)
        gson.fromJson(jsonString, clazz)
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; T
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;注解定义&#34;&gt;注解定义&lt;/h3&gt;
&lt;p&gt;注意上面有一个&lt;code&gt;getKeyOfClass(clazz)&lt;/code&gt;，这个方法是怎么实现的？&lt;/p&gt;
&lt;p&gt;其实如果照目前为止，只要保证定义的配置字段key互不相同就行了，那么可以直接用&lt;code&gt;clazz.canonicalName&lt;/code&gt;。不过我们这里的需求还希望实现一个能直接在手机操作的管理界面，所以用注解去定义下配置字段相关的信息会比较好。&lt;/p&gt;
&lt;p&gt;首先新建一个kotlin模块（注意不是安卓模块），叫做libzeroconfig，用来放我们的注解，这样后面用到的地方直接导入这个模块就行了。&lt;/p&gt;
&lt;p&gt;参考字节的ABManager，我这样定义我的注解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.libzeroconfig&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlin.reflect.KClass&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 标注于配置实体类之上，指定配置字段名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param key 配置字段
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param title 配置项名（给人看的）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param owner 负责人
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param scope 所属的业务线
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Target&lt;/span&gt;(AnnotationTarget.CLASS)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Retention&lt;/span&gt;(AnnotationRetention.SOURCE)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ZeroConfig&lt;/span&gt;(
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; key: String,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; title: String = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; owner: String,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; scope: KClass&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; ZeroScope&amp;gt; = DefaultScope::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要求key和owner必须填写，title是这个配置在本地管理面板中显示的名字。一目了然。&lt;/p&gt;
&lt;p&gt;这个注解要标在定义的配置实体类上，注意如果是data class要求所有字段都提供默认值，因为否则的话gson反射创建对象的时候会因为data class没有默认构造函数遇到问题。虽然这个问题可以通过应用kotlin-noarg插件解决，但我觉得强制要求所有配置类都提供所有字段的默认值也不错。&lt;/p&gt;
&lt;h3 id=&#34;注解的编译期处理&#34;&gt;注解的编译期处理&lt;/h3&gt;
&lt;p&gt;Retention指定的合适，注解是可以被带到运行期间的。看springboot的一大票注解，上面指定的都是&lt;code&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但你可以注意到我上面注解定义的代码并没有这么做，安卓上大家基本都尽量不这么做。springboot可以在运行时递归扫描注解，但我们安卓手机上来说这个开销就太大了。&lt;/p&gt;
&lt;p&gt;所以要在编译期间把这个事情（扫描注解信息）办妥，所以就要用到&lt;code&gt;kapt&lt;/code&gt;了（安卓上此前这个事情是用&lt;code&gt;annotationProcessor&lt;/code&gt;处理）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kapt 即 Kotlin annotation processing tool（Kotlin 注解处理工具）缩写。通过定义注解处理器可以在编译时对源代码进行检测生成额外的源文件和其他文件，之后编译生成的源文件和原来的源文件一起生成class文件。
听上去很cool的操作，使人不由自主联想到如果生成的源文件还有这个注解咋办……答案是kapt会执行多次，直到没有新的注解发现为止。虽然这对我们这个需求没啥用处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仍然是定义一个kotlin模块，这次叫&lt;code&gt;libzeroconfigcompiler&lt;/code&gt;吧。在这里我们定义我们的注解处理器。&lt;/p&gt;
&lt;p&gt;其实要做的事情就两件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个类继承自AbstractProcessor&lt;/li&gt;
&lt;li&gt;把你的类名（带包名）写到META-INF/service/javax.annotation.processing.Processor中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第二步，Google提供了一个叫&lt;code&gt;auto service&lt;/code&gt;的东西可以帮我们生成这个文件，只要引入后在你的Annotation Processor类上加上&lt;code&gt;@AutoService(Processor.class)&lt;/code&gt;就可以了。&lt;/p&gt;
&lt;p&gt;至于这个注解处理类的实现，建议还是别看我代码了，有两个我认为很值得参考的项目：一个是前面提到的&lt;a href=&#34;https://github.com/google/auto/tree/master/service&#34;&gt;Auto Service&lt;/a&gt;，另一个是&lt;a href=&#34;https://github.com/greenrobot/EventBus/tree/master/EventBusAnnotationProcessor&#34;&gt;EventBus的注解处理器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;日志输出&#34;&gt;日志输出&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;note&lt;/span&gt;(message: String) {
    processingEnv.messager.printMessage(Diagnostic.Kind.NOTE, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$message&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#228b22&#34;&gt;// \r\n换行 https://medium.com/@cafonsomota/annotation-processor-printing-a-message-and-doing-it-in-a-new-line-1b6609e86e5c
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;warning&lt;/span&gt;(message: String) {
    processingEnv.messager.printMessage(Diagnostic.Kind.WARNING, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$message&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;error&lt;/span&gt;(message: String) {
    processingEnv.messager.printMessage(Diagnostic.Kind.ERROR, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$message&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;strong&gt;换行要用\r\n，另外error会让编译终止&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;信息收集&#34;&gt;信息收集&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;process&lt;/span&gt;(
    annotations: MutableSet&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; TypeElement&amp;gt;,
    roundEnvironment: RoundEnvironment
): Boolean {
    counter++
    note(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Processing round &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$counter&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, new annotations: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${annotations.isNotEmpty()}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;, processingOver: &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${roundEnvironment.processingOver()}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (roundEnvironment.processingOver() &amp;amp;&amp;amp; annotations.isNotEmpty()) {
        error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Unexpected processing state: annotations still available after processing over&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (annotations.isEmpty()) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (wasWrittenToFile) {
        error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Unexpected processing state: annotations still available after writing.&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 收集数据
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    roundEnvironment.getElementsAnnotatedWith(ZeroConfig::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java).forEach { element -&amp;gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;//使用了注解的某个类
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (element !is TypeElement) {
            error(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;注解只能标记在实体类上：&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$element&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; annotation = element.getAnnotation(ZeroConfig::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!checkAnnotationValid(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;)) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
        classInfoMap[&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;.key] = ZeroConfigInformation(
            key = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;.key,
            clazz = element.qualifiedName.toString(),
            title = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;.title,
            scope = getClassFromAnnotation { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;.scope.qualifiedName!! },
            owner = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;annotation&lt;/span&gt;.owner
        )
    }
    generateCode()
    wasWrittenToFile = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要注意的其实也就是annotationProcessor会多次执行，做好处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过filer写文件是不允许覆盖的，在此前我尝试用了某个有点dirty的方法绕过了这个限制，但后来看了EventBus的实现后改为了现在这个样子。
注意上面有一个&lt;code&gt;scope = getClassFromAnnotation { annotation.scope.qualifiedName!! }&lt;/code&gt;，怎么说呢，又是一个有点dirty的实现：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 获取annotation中的Class
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * https://www.jianshu.com/p/6822278f4771
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getClassFromAnnotation&lt;/span&gt;(block: () -&amp;gt; String): String {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        block()
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (e: MirroredTypeException) {
        e.typeMirror.toString()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为定义的类还没编译，所以会抛出异常，然后在异常中拿到了这个类名……想到这个方法的人真是鬼才。&lt;/p&gt;
&lt;h4 id=&#34;kotlin代码生成&#34;&gt;Kotlin代码生成&lt;/h4&gt;
&lt;p&gt;KotlinPoet，使用方法和javapoet类似。它原来有个slogan挺吸引我的，大意是用最美的Kotlin代码生成最美的Kotlin代码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://square.github.io/kotlinpoet/&#34;&gt;KotlinPoet - KotlinPoet (square.github.io)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实我们要生成的类很简单，只拼接字符串就能完成，&lt;em&gt;但用KotlinPoet显然逼格高不少。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;初始化&#34;&gt;初始化&lt;/h3&gt;
&lt;p&gt;前面步骤之后就已经生成了多个类文件了，他们形如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ZeroConfigHolder&lt;/span&gt; : IZeroConfigHolder {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getValue&lt;/span&gt;(): Map&amp;lt;String, ZeroConfigInformation&amp;gt; = mapOf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;metrics_config&amp;#34;&lt;/span&gt; to
      top.ntutn.libzeroconfig.ZeroConfigInformation(key=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;metrics_config&amp;#34;&lt;/span&gt;,title=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;埋点配置&amp;#34;&lt;/span&gt;,clazz=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.commonutil.MetricsConfig&amp;#34;&lt;/span&gt;,scope=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.libzeroconfig.DefaultScope&amp;#34;&lt;/span&gt;,owner=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;liuhaixin.zero&amp;#34;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但我们还是要在启动时注册一下，这样就可以在管理面板枚举出所有配置项了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;ZeroConfigHelper.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;init&lt;/span&gt;(applicationContext)
    .addConfigHolder(top.ntutn.zeroconfigutil.ZeroConfigHolder())
    .addConfigHolder(ZeroConfigHolder())
    .addConfigHolder(top.ntutn.commonutil.ZeroConfigHolder())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;管理面板&#34;&gt;管理面板&lt;/h3&gt;
&lt;p&gt;为了提供一个通用的配置编辑界面，还是准备个json的存取方式比较合理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;readRawConfig&lt;/span&gt;(key: String): String? {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; clazz = getClassByKey(key) ?: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; rawString = sp.getString(getKeyOfClass(clazz), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
    &lt;span style=&#34;color:#228b22&#34;&gt;// 正确显示配置的默认值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (rawString == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        rawString = gson.toJson(clazz.newInstance())
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rawString
}
&lt;span style=&#34;color:#707a7c&#34;&gt;@Throws&lt;/span&gt;(ClassNotFoundException::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveRawConfig&lt;/span&gt;(key: String, value: String) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; clazz = getClassByKey(key) ?: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; ClassNotFoundException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;未找到配置项：&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;$key&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;)
    bufferMap.remove(clazz)
    sp.edit {
        putString(getKeyOfClass(clazz), value)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;剩下的就是准备一个配置列表和编辑界面，也没什么值得说的了。&lt;/p&gt;
- https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>ViewBinding、ViewModel和LiveData</title>
        <link>https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/</link>
        <pubDate>Mon, 22 Feb 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/</guid>
        <description>归零幻想 https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;毕设项目没有历史包袱，我可以尽量向best practice努力。&lt;/p&gt;
&lt;h2 id=&#34;viewbinding&#34;&gt;ViewBinding&lt;/h2&gt;
&lt;p&gt;无数人痛恨findViewById，并且为了干掉它做了许多尝试，比如ButterKnife、kotlin-android-extensions。&lt;/p&gt;
&lt;p&gt;现在，有了ViewBinding，项目中真的可以不写findViewById了。至少目前为止我的毕设项目还没有一个findViewById。&lt;/p&gt;
&lt;p&gt;其实与ViewBinding相似的，还有一个DataBinding，但我不太喜欢，感觉在xml里面写代码不是一个好主意。&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;首先在build.gradle（或build.gradle.kts）中的android块添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;buildFeatures {
    viewBinding = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在xml中正常定义你的布局&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;android:orientation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;vertical&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/text_view&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/test_button&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;toast&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/change_button&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就可以愉快使用了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.os.Bundle&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.widget.Toast&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo.databinding.ActivityMainBinding&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; binding: ActivityMainBinding
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initView&lt;/span&gt;() {
        binding.apply {
            changeButton.setOnClickListener { textView.text = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Changed!&amp;#34;&lt;/span&gt; }
            testButton.setOnClickListener {
                Toast.makeText(
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@MainActivity&lt;/span&gt;,
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;,
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在xml里面用下划线分隔的id在这里就直接变成了binding里面的字段，相当舒服。&lt;/p&gt;
&lt;h3 id=&#34;在recyclerview中的使用&#34;&gt;在RecyclerView中的使用&lt;/h3&gt;
&lt;p&gt;在RecyclerView中代码要稍微发生一点变化，因为我们是在onCreateViewHolder时反射创建布局的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo.databinding.ItemTestBinding&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyAdapter&lt;/span&gt; : RecyclerView.Adapter&amp;lt;MyAdapter.ViewHolder&amp;gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ViewHolder&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; binding: ItemTestBinding) : RecyclerView.ViewHolder(binding.root)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreateViewHolder&lt;/span&gt;(parent: ViewGroup, viewType: Int): ViewHolder {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ViewHolder(
            ItemTestBinding.inflate(LayoutInflater.from(parent.context), parent, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;)
        )
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onBindViewHolder&lt;/span&gt;(holder: ViewHolder, position: Int) {
        holder.binding.textView.text = TODO(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Not yet implemented&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getItemCount&lt;/span&gt;(): Int {
        TODO(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Not yet implemented&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仍然不需要findViewById！&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;viewmodel和livedata&#34;&gt;ViewModel和LiveData&lt;/h2&gt;
&lt;p&gt;应用MVVM模式更好管理代码，使之便于拓展和测试，好处不多说。&lt;/p&gt;
&lt;p&gt;首先引入ViewModel、LiveData和Kotlin Coroutines的拓展包和Retrofit的依赖包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;implementation(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1&amp;#39;&lt;/span&gt;)
implementation(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;androidx.core:core-ktx:1.3.2&amp;#39;&lt;/span&gt;)
implementation(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0&amp;#39;&lt;/span&gt;)
implementation(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;androidx.lifecycle:lifecycle-livedata-ktx:2.3.0&amp;#39;&lt;/span&gt;)
implementation(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;com.squareup.retrofit2:retrofit:2.9.0&amp;#39;&lt;/span&gt;)
implementation &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.fragment:fragment-ktx:1.3.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;准备ViewModel&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.LiveData&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.MutableLiveData&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.ViewModel&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainViewModel&lt;/span&gt; : ViewModel() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; _text = MutableLiveData&amp;lt;String&amp;gt;().apply {
        value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;我的&amp;#34;&lt;/span&gt;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; text: LiveData&amp;lt;String&amp;gt; = _text
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;changeText&lt;/span&gt;() {
        _text.value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;修改过的&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在MainActivity中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; mainViewModel &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; viewModels&amp;lt;MainViewModel&amp;gt;()
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initView&lt;/span&gt;() {
    binding.apply {
        changeButton.setOnClickListener { mainViewModel.changeText() }
        testButton.setOnClickListener {
            Toast.makeText(
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@MainActivity&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;,
                Toast.LENGTH_LONG
            ).show()
        }
    }
    mainViewModel.text.observe(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
        binding.textView.text = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，VC负责视图层的展示逻辑，VM负责业务逻辑，清晰了许多。&lt;/p&gt;
&lt;p&gt;LiveData具有生命周期感知功能，随时监听修改并更新视图。它有setValue()和postValue()两个方法设置值，相对于前者，后者将setValue放到了下一个消息循环，可以在非UI线程调用。&lt;/p&gt;
&lt;h3 id=&#34;initedlivedata&#34;&gt;InitedLiveData&lt;/h3&gt;
&lt;p&gt;然而自带的LiveData和MutableLiveData用多了总感觉难受，因为getValue()返回的是一个可空的数据，当我写了n多次&lt;code&gt;_field.value?.key?:&amp;quot;&amp;quot;&lt;/code&gt;后，我爆发了。很多场景下这个value都可以定义成不可空的，所以还是简单封装一个不需要判空的更好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.LiveData&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 解决LiveData的空安全问题
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CheckedLiveData&lt;/span&gt;&amp;lt;T&amp;gt; : LiveData&amp;lt;T&amp;gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getValue&lt;/span&gt;(): T {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.getValue() ?: run {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; res = initValue()
            value = res
            initValue()
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initValue&lt;/span&gt;(): T
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;InitedLiveData&lt;/span&gt;&amp;lt;E&amp;gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; initBlock: () -&amp;gt; E) : CheckedLiveData&amp;lt;E&amp;gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initValue&lt;/span&gt;() = initBlock.invoke()
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setValue&lt;/span&gt;(value: E) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.setValue(value)
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;postValue&lt;/span&gt;(value: E) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.postValue(value)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此这般，上面的代码就可以这样表示了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.viewmodeldemo&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.ViewModel&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainViewModel&lt;/span&gt; : ViewModel() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; _text = InitedLiveData { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;我的&amp;#34;&lt;/span&gt; }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; text: CheckedLiveData&amp;lt;String&amp;gt; = _text
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;changeText&lt;/span&gt;() {
        _text.value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;修改过的&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kotlin协程与retrofit更搭&#34;&gt;Kotlin协程与Retrofit更搭&lt;/h3&gt;
&lt;p&gt;首先Retrofit也值得我们封装一个工具类来创建Service：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;RetrofitUtil&lt;/span&gt; {
    ...
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; retrofit &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;by&lt;/span&gt; lazy {
        Retrofit.Builder()
            .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .client(okHttpClient)
            .build()
    }
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;create&lt;/span&gt;(serviceClass: Class&amp;lt;T&amp;gt;): T = retrofit.create(serviceClass)
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;reified&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;create&lt;/span&gt;(): T = create(T::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前文提到，我们主要业务逻辑写到VM中，所以&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.ui.viewmodel.main&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.ViewModel&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.lifecycle.viewModelScope&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlinx.coroutines.Dispatchers&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlinx.coroutines.launch&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;kotlinx.coroutines.withContext&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;retrofit2.await&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;timber.log.Timber&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.NovelService&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.arch.CheckedLiveData&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.arch.InitedLiveData&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.model.NovelModel&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.novelrecommend.utils.RetrofitUtil&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;DiscoverViewModel&lt;/span&gt; : ViewModel() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; _novelList =
        InitedLiveData&amp;lt;MutableList&amp;lt;NovelModel&amp;gt;&amp;gt; { mutableListOf() }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; novelList: CheckedLiveData&amp;lt;MutableList&amp;lt;NovelModel&amp;gt;&amp;gt; = _novelList
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getNovel&lt;/span&gt;(): List&amp;lt;NovelModel&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; RetrofitUtil.create&amp;lt;NovelService&amp;gt;()
            .getNovel(deviceInfo = DeviceUtil.getDeviceInfoMap())
            .await()
            .map { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;it&lt;/span&gt;.copy(localId = (&lt;span style=&#34;color:#b452cd&#34;&gt;0.&lt;/span&gt;.Long.MAX_VALUE).random()) }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;loadMore&lt;/span&gt;() {
        viewModelScope.launch {
            _novelList.value = withContext(Dispatchers.IO) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                    _novelList.value.addAll(getNovel())
                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (e: Exception) {
                    Timber.e(e, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;获取小说失败&amp;#34;&lt;/span&gt;)
                }
                _novelList.value
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是不是很舒服？&lt;/p&gt;
- https://ntutn.top/posts/viewbindingviewmodel%E5%92%8Clivedata/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>干掉macOS的OCSP</title>
        <link>https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/</link>
        <pubDate>Sun, 21 Feb 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;苹果这两天摊上事了，有不少用户说自己的设备打开应用程序会卡好几分钟，然后分析发现是苹果的OCSP校验导致的。&lt;/p&gt;
&lt;p&gt;当启动一个新应用程序的时候，系统会把其hash发送到&lt;code&gt;ocsp.apple.com&lt;/code&gt;用于校验，而这次是这个服务挂了但是能ping通……&lt;/p&gt;
&lt;p&gt;这个事情引起不小的讨论，主要集中在有关隐私的担忧上。本来我没有太在意，&lt;strong&gt;但测试发现这好像是我每次休眠恢复后触摸板卡几秒的元凶……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那对不起了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;127.0.0.1 ocsp.apple.com&amp;#34;&lt;/span&gt; | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反正还有SEP把门呢。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
- https://ntutn.top/posts/%E5%B9%B2%E6%8E%89macos%E7%9A%84ocsp/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>【译】用BuildSrc和Kotlin_DSL管理Gradle依赖</title>
        <link>https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/</link>
        <pubDate>Sun, 21 Feb 2021 03:00:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/ -&lt;blockquote&gt;
&lt;p&gt;多模块工程中一个更好的引入依赖的方法
翻译自&lt;a href=&#34;https://medium.com/better-programming/gradle-dependency-management-with-buildsrc-and-kotlin-dsl-1de958eab166&#34;&gt;Gradle Dependency Management With BuildSrc and Kotlin DSL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次尝试翻译英文文章……&lt;/p&gt;
&lt;h2 id=&#34;要点&#34;&gt;要点&lt;/h2&gt;
&lt;p&gt;主要集中在如何用&lt;code&gt;buildSrc&lt;/code&gt;目录和Kotlin DSL脚本构建一个Gradle依赖管理系统，你也会学到这样做相对使用传统Groovy代码的好处。&lt;/p&gt;
&lt;p&gt;如果你倾向于通过视频来看这篇博客，文末附有一个Youtube视频。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;众所周知在一个快速发展的项目中维护依赖是一个乏味的工作，而传统的Groovy脚本没有code navigation、自动补全，再加上性能问题和运行时错误让这一切变得更糟糕。&lt;/p&gt;
&lt;p&gt;更重要的是，多数安卓开发者不懂Groovy，甚至我也不知道我之前在用Groovy做啥。&lt;/p&gt;
&lt;p&gt;感谢Gradle团队和社区的工作提供了一个顺畅安全的构建流程，他们提出的最棒的主意之一就是用Kotlin DSL脚本写buildSrc目录。&lt;/p&gt;
&lt;h1 id=&#34;解决&#34;&gt;解决&lt;/h1&gt;
&lt;p&gt;依赖库引入和自定义task不应该放到构建脚本中，它们应该被声明到一个独立文件中再被构建脚本使用。在这个实现的早期，开发者习惯于创建一个Gradle文件来声明所有库并在构建脚本中使用。&lt;/p&gt;
&lt;p&gt;这确实在一定程度上解决了问题，你可以在&lt;a href=&#34;https://medium.com/@sgkantamani/next-level-of-dependencies-declaration-with-kotlin-dsl-scripits-48bfe1cb1f10&#34;&gt;这篇文章&lt;/a&gt;读到这种方法。但这个简单方案不能解决类似自动补全和code navigation的问题，这使得在长远上看这个方案不够可靠。在这之外，buildSrc似乎有希望解决这个问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个目录被当作一个&lt;a href=&#34;https://docs.gradle.org/current/userguide/composite_builds.html#composite_build_intro&#34;&gt;included build&lt;/a&gt;看待。在发现这个目录之后，Gradle自动编译和测试它的代码，并将编译结果放到你的构建脚本的class path中。在一个多模块的工程中只能有一个这样的目录，并且要放到工程的顶级目录中。应该优先通过&lt;a href=&#34;https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins&#34;&gt;script plugins&lt;/a&gt;因为这样更便于管理、重构和测试代码。
——Gradle团队&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;创建buildsrc目录&#34;&gt;创建buildSrc目录&lt;/h2&gt;
&lt;p&gt;使用Kotlin DSL脚本不但能解决构建脚本中的这些问题，还能得到先进的IDE支持，包括code navigation、编译时错误提示等。最重要的，我们再也不用使用Groovy了。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;我们要做的第一件事是创建一个buildSrc目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在工程上右键&lt;/li&gt;
&lt;li&gt;点击New并选择Directory&lt;/li&gt;
&lt;li&gt;把它命名为&lt;code&gt;buildSrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你仍然不懂怎么创建这个目录，请看这里：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*rDhflrwxcwwr4mcefTrQEg.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们需要在这个目录里创建一个叫做&lt;code&gt;build.gradle.kts&lt;/code&gt;的文件，在这个文件里导入插件和存储库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;plugins{
    `kotlin-dsl&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;
}
repositories {
    jcenter()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后你还需要点击gradle的“sync now”按钮，因为gradle把它当作了一个新建目录中的普通文件。现在你可以实现Kotlin DSL脚本了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/870/1*L1zYKShhvKrrgTyn07S3aw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下一步是创建一个类似这样的目录结构&lt;code&gt;src&amp;gt;main&amp;gt;java&lt;/code&gt;，完成后如上图所示。&lt;/p&gt;
&lt;p&gt;现在我们可以创建Kotlin文件来声明依赖库，管理版本或者实现自定义task。&lt;/p&gt;
&lt;p&gt;现在我们的目标是实现一个依赖管理系统，所以我们创建一个叫做&lt;code&gt;Dependencies.kt&lt;/code&gt;的文件（你可以用你喜欢的任何名字）。&lt;/p&gt;
&lt;p&gt;完成后我们就可以通过Kotlin代码来声明依赖库和版本了。这里我们用object来声明特定的类型，例如版本号、AndroidX依赖库等。&lt;/p&gt;
&lt;p&gt;首先我们创建一个用来用Kotlin风格定义所有依赖库版本号的object。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Versions&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; constraint_layout_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.1.3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; lifecycle_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.2.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; coroutines_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.3.8&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; kotlin_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.3.41&amp;#34;&lt;/span&gt;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; appcompat = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.1.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; recycelerview_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; material_design_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.2.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cardview_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; viewpager2_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; play_core_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.8.0&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下一步我们创建各种依赖库类型的专属object文件，例如Kotlinlibraries、AndroidXLibraries和UiLibraries等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;kotlinDependencies&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; kotlin = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.kotlin_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; coroutines = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.coroutines_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;androidxsupportDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; appcompat = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.appcompat:appcompat:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.appcompat}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cardview = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.cardview:cardview:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.cardview_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; contraintLayout = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.constraintlayout:constraintlayout:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.constraint_layout_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; recyclerview = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.recyclerview:recyclerview:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.recycelerview_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; viewpager2 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.viewpager2:viewpager2:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.viewpager2_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;materialDesignDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; materialDesign = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.google.android.material:material:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.material_design_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;playcoreDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; play_core =  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.google.android.play:core:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.play_core_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后把完整代码片段放到这里&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Versions&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; constraint_layout_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.1.3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; lifecycle_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.2.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; coroutines_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.3.8&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; kotlin_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.3.41&amp;#34;&lt;/span&gt;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; appcompat = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.1.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; recycelerview_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; material_design_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.2.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cardview_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; viewpager2_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; play_core_version = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.8.0&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;kotlinDependencies&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; kotlin = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.kotlin_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; coroutines = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.coroutines_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;androidxsupportDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; appcompat = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.appcompat:appcompat:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.appcompat}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; cardview = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.cardview:cardview:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.cardview_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; contraintLayout = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.constraintlayout:constraintlayout:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.constraint_layout_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; recyclerview = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.recyclerview:recyclerview:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.recycelerview_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; viewpager2 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.viewpager2:viewpager2:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.viewpager2_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;materialDesignDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; materialDesign = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.google.android.material:material:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.material_design_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;playcoreDependencies&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; play_core =  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.google.android.play:core:&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;${Versions.play_core_version}&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一步就是在project、app和模块级的build.gradle文件中使用这些object了。这相当简单，只要object的name和成员变量的name就行了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;dependencies {
    &lt;span style=&#34;color:#228b22&#34;&gt;/** Kotlin */&lt;/span&gt;
    implementation( kotlinDependencies.kotlin)
    &lt;span style=&#34;color:#228b22&#34;&gt;/** Coroutines */&lt;/span&gt;
    implementation( coroutineDependencies.coroutines)
    
    &lt;span style=&#34;color:#228b22&#34;&gt;/** support androidx ibraries */&lt;/span&gt;
    implementation( androidxsupportDependencies.appcompat)
    implementation( androidxsupportDependencies.contraintLayout)
    implementation( androidxsupportDependencies.recyclerview)
    implementation( androidxsupportDependencies.cardview)
    implementation( androidxsupportDependencies.viewpager2)
    &lt;span style=&#34;color:#228b22&#34;&gt;/*** Material design */&lt;/span&gt;
    implementation( materialDesignDependencies.materialDesign)
    
    &lt;span style=&#34;color:#228b22&#34;&gt;/** Playcore */&lt;/span&gt;
    implementation( playcoreDependencies.play_core)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方法看上去简单，但拥有很多优点，比如code navigation、自动补全、运行时错误提示等。看下面的gif。（gif见原文）&lt;/p&gt;
&lt;p&gt;此外，我们可以在整个项目的所有模块中使用这些定义的依赖。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;目前为止，我们实现了与依赖有关的所有东西，但我们确实可以在编译脚本中做更多事情，比如替换掉defaultConfig块，它看上去这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;compileSdkVersion(&lt;span style=&#34;color:#b452cd&#34;&gt;29&lt;/span&gt;)
defaultConfig {
    applicationId = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.example.app&amp;#34;&lt;/span&gt;
    minSdkVersion(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;)
    targetSdkVersion (&lt;span style=&#34;color:#b452cd&#34;&gt;29&lt;/span&gt;)
    multiDexEnabled = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
    versionCode = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
    versionName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;
    testInstrumentationRunner = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.test.runner.AndroidJUnitRunner&amp;#34;&lt;/span&gt;
    vectorDrawables.useSupportLibrary = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如我所说，把常量移到编译脚本外更安全。所以我们可以在下面另外创建一个Kotlin文件，或者在Dependencies.kt文件中创建一个新的object。然后声明所有常量，比如min、编译SDK版本等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;buildConfigVersions&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; compileSdkVersion = &lt;span style=&#34;color:#b452cd&#34;&gt;29&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; buildToolsVersion = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;29.0.3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; minSdkVersion = &lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; targetSdkVersion = &lt;span style=&#34;color:#b452cd&#34;&gt;29&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; versionCode = &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; versionName = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们可以在block中使用这个object了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;compileSdkVersion(buildConfigVersions.compileSdkVersion)
defaultConfig {
    applicationId = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;com.example.app&amp;#34;&lt;/span&gt;
    minSdkVersion(buildConfigVersions.minSdkVersion)
    targetSdkVersion (buildConfigVersions.targetSdkVersion)
    multiDexEnabled = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
    versionCode = buildConfigVersions.versionCode
    versionName = buildConfigVersions.versionName
    testInstrumentationRunner = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;androidx.test.runner.AndroidJUnitRunner&amp;#34;&lt;/span&gt;
    vectorDrawables.useSupportLibrary = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你的工程中有任何顶级字符串或常量需要维护，你可以创建一个单独的文件，而不是在编译脚本中写的一团糟。&lt;/p&gt;
&lt;p&gt;（Youtube视频见&lt;a href=&#34;https://youtu.be/w5qCmvS9JGE&#34;&gt;https://youtu.be/w5qCmvS9JGE&lt;/a&gt; ）&lt;/p&gt;
- https://ntutn.top/posts/%E8%AF%91%E7%94%A8buildsrc%E5%92%8Ckotlin_dsl%E7%AE%A1%E7%90%86gradle%E4%BE%9D%E8%B5%96/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>我的黑历史被github埋到北极了</title>
        <link>https://ntutn.top/posts/%E6%88%91%E7%9A%84%E9%BB%91%E5%8E%86%E5%8F%B2%E8%A2%ABgithub%E5%9F%8B%E5%88%B0%E5%8C%97%E6%9E%81%E4%BA%86/</link>
        <pubDate>Tue, 26 Jan 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E6%88%91%E7%9A%84%E9%BB%91%E5%8E%86%E5%8F%B2%E8%A2%ABgithub%E5%9F%8B%E5%88%B0%E5%8C%97%E6%9E%81%E4%BA%86/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E6%88%91%E7%9A%84%E9%BB%91%E5%8E%86%E5%8F%B2%E8%A2%ABgithub%E5%9F%8B%E5%88%B0%E5%8C%97%E6%9E%81%E4%BA%86/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;昨天整理自己的github仓库的时候发现自己的个人主页多了个徽章：&lt;code&gt;Arctic Code Vault Contributor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/26/CJOcmPn12o734KQ.png&#34; alt=&#34;QQ20210126-143812@2x.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;github-code-vault是什么&#34;&gt;GitHub Code Vault是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Code Vault（GitHub 代码保险库）是由 GitHub Archive Program（GitHub 代码永久保存计划）设立的代码档案库，旨在保存开源软件以供未来使用。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;天灾人祸，世界末日，地球回到原始时代重新发展，或者&lt;a href=&#34;https://code2048.com/series/betacat/&#34;&gt;betacat&lt;/a&gt;污染了所有开源代码库啦，人类就可以找到这份代码库，重建网络世界。&lt;/p&gt;
&lt;p&gt;该项目给github上活跃的开源代码库建立&lt;code&gt;快照&lt;/code&gt;，将他们存储在胶片上运往北极。据称这些代码将被保存至少1000年。&lt;/p&gt;
&lt;p&gt;每个细节都充满了科幻的味道，比如考虑一前年后的人类不一定读懂今天的代码，在&lt;a href=&#34;https://github.com/github/archive-program/blob/master/GUIDE_zh.md&#34;&gt;《GitHub Code Vault 指南》&lt;/a&gt;中介绍了二进制、计算机、软件、编译等基本概念，以及如何解码胶片上的信息。 &lt;strong&gt;当然，这个指南本身并没有被压缩和编码，他们没有犯某些网站的&lt;code&gt;RARSetup.rar&lt;/code&gt;的错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;考虑到地球文明重建，人类不一定造出了计算机，于是还放了一份&lt;a href=&#34;https://github.com/github/archive-program/blob/master/TheTechTree.md&#34;&gt;科技树&lt;/a&gt;指南，包含理解软件所需的多层技术基础，如微处理器、网络、电子、半导体，甚至工业社会前的技术。有了这些技术，让人类可以重新造出现代计算机。&lt;/p&gt;
&lt;h2 id=&#34;我的被选中的代码库&#34;&gt;我的被选中的代码库&lt;/h2&gt;
&lt;h3 id=&#34;ctodo&#34;&gt;ctodo&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zerofancy/ctodo&#34;&gt;https://github.com/zerofancy/ctodo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个终端todo工具。c不是指C语言，而是&lt;code&gt;console&lt;/code&gt;（事实上这个项目是java写的）。&lt;/p&gt;
&lt;p&gt;项目代码本身写的很垃圾，也就这个主意有点意思。在终端直接管理TODO List，听上去不错，但我没有坚持用太久。后来还是觉得有GUI的todo工具更好，比如微软的待办事项。&lt;/p&gt;
&lt;p&gt;然而即使是这个主意，我也找到了更好的实现：&lt;a href=&#34;https://swapoff.org/devtodo.html&#34;&gt;devtodo&lt;/a&gt;，所以我的那个仓库也就不再维护了。&lt;/p&gt;
&lt;h3 id=&#34;noveldownloader&#34;&gt;noveldownloader&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zerofancy/noveldownloader&#34;&gt;https://github.com/zerofancy/noveldownloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个用Java+selenium写的小说下载器，基本原理就是模仿用户不断点“下一页”&lt;/p&gt;
&lt;p&gt;没错，这个项目就是我看小说不想买正版又忍受不了盗版的广告时写的。当然因为是自用所以代码写的很随意，这不说放到1000年后，就是一两年后也是妥妥的黑历史啊……&lt;/p&gt;
&lt;h2 id=&#34;吃瓜&#34;&gt;吃瓜&lt;/h2&gt;
&lt;h3 id=&#34;dress被选中了&#34;&gt;Dress被选中了&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/komeiji-satori/Dress/issues/910&#34;&gt;你们的照片现在已经被冰封在北极了。。。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;女装一时爽，破照留千年。坦白讲，除了公司的项目，我克隆过的最大的项目就是&lt;a href=&#34;https://github.com/komeiji-satori/Dress&#34;&gt;Dress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然该项目会忽略大于100KB的二进制文件，但这个限制会随着star数逐渐解除。考虑到这个项目的star数……为1000年后的考古学家的头发默哀3秒。&lt;/p&gt;
&lt;h3 id=&#34;996icu被选中了&#34;&gt;996.icu被选中了&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://996.icu/#/zh_CN&#34;&gt;https://996.icu/#/zh_CN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的代码留点bug给后世解决不算什么，但996.icu也被选中了。这下真的被钉到历史的耻辱柱上了……&lt;/p&gt;
&lt;h3 id=&#34;面向stackoverflow编程&#34;&gt;面向Stackoverflow编程&lt;/h3&gt;
&lt;p&gt;不同时快照一份 stackoverflow ，后代也不会抄啊。&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;大家还贡献了什么&#34;&gt;大家还贡献了什么&lt;/h3&gt;
&lt;p&gt;dotfile、Github Pages、个人演讲库和个人网站、给女朋友的信，听说鸿蒙的ppt也在里面……&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/162808193&#34;&gt;除了bug，GitHub可能还把你的女装照冻到了北极，1000年后还能读那种&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archiveprogram.github.com/&#34;&gt;https://archiveprogram.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-07-16-github-archive-program-the-journey-of-the-worlds-open-source-code-to-the-arctic/&#34;&gt;GitHub Archive Program: the journey of the world’s open source code to the Arctic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/github/archive-program/blob/master/GUIDE_zh.md&#34;&gt;GitHub Code Vault 指南&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/355902523/answer/894681961&#34;&gt;如何看待 GitHub 将公共存储库快照保存到北极地下？ - est的回答 - 知乎&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/%E6%88%91%E7%9A%84%E9%BB%91%E5%8E%86%E5%8F%B2%E8%A2%ABgithub%E5%9F%8B%E5%88%B0%E5%8C%97%E6%9E%81%E4%BA%86/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>android项目开发：通知</title>
        <link>https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/</link>
        <pubDate>Tue, 12 Jan 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;仍然是第一行代码的笔记，这篇是有关通知的，最基本的用法。&lt;/p&gt;
&lt;h2 id=&#34;通知的相关知识&#34;&gt;通知的相关知识&lt;/h2&gt;
&lt;p&gt;通知是什么不再赘述，这里只记录些重要但没接触的概念。&lt;/p&gt;
&lt;p&gt;通知渠道在8.0（O）引入。要求APP将通知分类，通过不同&lt;em&gt;渠道&lt;/em&gt;进行分发，用户可以选择性禁用某个渠道的通知，或者调整优先等级。&lt;/p&gt;
&lt;p&gt;通知可以有不同的重要等级，有四种：&lt;code&gt;IMPORTANCE_HIGH&lt;/code&gt;、&lt;code&gt;IMPORTANCE_DEFAULT&lt;/code&gt;、&lt;code&gt;IMPORTANCE_LOW&lt;/code&gt;、&lt;code&gt;IMPORTANCE_MIN&lt;/code&gt;。根据重要等级不同，通知可能有不同的展现策略，比如在前台提示甚至播放声音。&lt;/p&gt;
&lt;p&gt;在通知渠道创建时通知的重要等级也就确定了，之后不能再被APP修改。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;通知dmeo&#34;&gt;通知dmeo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.notificationtest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.app.NotificationChannel&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.app.NotificationManager&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.app.PendingIntent&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.Context&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.Intent&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.graphics.BitmapFactory&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.os.Build&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.os.Bundle&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.core.app.NotificationCompat&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.notificationtest.databinding.ActivityMainBinding&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lateinit&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; binding: ActivityMainBinding
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initView&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; manager = getSystemService(Context.NOTIFICATION_SERVICE) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; NotificationManager
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O){
            &lt;span style=&#34;color:#228b22&#34;&gt;// 通知渠道
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; channel = NotificationChannel(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Normal&amp;#34;&lt;/span&gt;,NotificationManager.IMPORTANCE_DEFAULT)
            manager.createNotificationChannel(channel)
        }
        binding.sendNotice.setOnClickListener {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; intent = Intent(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;,NotificationActivity::&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt;.java)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; pi = PendingIntent.getActivity(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;,REQUEST_NOTIFICATION_ACTIVITY,intent,&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; notification = NotificationCompat.Builder(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;)
                    .setContentTitle(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This is content title&amp;#34;&lt;/span&gt;)
                    .setContentText(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;This is content text. &amp;#34;&lt;/span&gt;)
                    .setSmallIcon(R.drawable.ic_launcher_foreground)
                    .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.ic_launcher_foreground))
                    .setContentIntent(pi)
                    .setAutoCancel(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)
                    .build()
            manager.notify(CHANNEL,notification)
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; CHANNEL = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; REQUEST_NOTIFICATION_ACTIVITY = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E9%80%9A%E7%9F%A5/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>截图不可信,我们能信什么</title>
        <link>https://ntutn.top/posts/%E6%88%AA%E5%9B%BE%E4%B8%8D%E5%8F%AF%E4%BF%A1%E6%88%91%E4%BB%AC%E8%83%BD%E4%BF%A1%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 04 Jan 2021 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E6%88%AA%E5%9B%BE%E4%B8%8D%E5%8F%AF%E4%BF%A1%E6%88%91%E4%BB%AC%E8%83%BD%E4%BF%A1%E4%BB%80%E4%B9%88/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E6%88%AA%E5%9B%BE%E4%B8%8D%E5%8F%AF%E4%BF%A1%E6%88%91%E4%BB%AC%E8%83%BD%E4%BF%A1%E4%BB%80%E4%B9%88/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这两天网上流传一件事，又有一个拼多多员工猝死了，而这名员工是&lt;strong&gt;98年出生的，年仅23岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/437702180&#34;&gt;如何看待网传拼多多员工加班后猝死一事？拼多多需要承担哪些责任？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前虽然一直有程序员猝死的案例，但总感觉离自己很远，甚至拿&lt;em&gt;程序员钱多话少死的快&lt;/em&gt;这种梗自嘲，但这次我慌了，因为我也是98年的。&lt;/p&gt;
&lt;p&gt;之后也在对这个事情保持关注，然后突然在知乎流传一张截图，截图为拼多多自己在上述问题下的回答，并称该回答已经被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/04/yCpvnFqzYGObQju.jpg&#34; alt=&#34;v2-965e16d02fbc62ea9ad792318c88d372_r.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是要搞事情的节奏啊。当然接下来拼多多自然说自己没说过，于是有了第二个问题：&lt;a href=&#34;https://www.zhihu.com/question/437783708&#34;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后知乎小管家发布内容证明拼多多说过：&lt;a href=&#34;https://www.zhihu.com/question/437783708/answer/1660566169&#34;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎小管家的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，拼多多栽了，那么我们有没有别的方法证明这件事情发生过？万一下次是腾讯出了什么问题，小管家扛得住压力吗？&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;截图不可靠&#34;&gt;截图不可靠&lt;/h2&gt;
&lt;p&gt;截图真的是个很神奇的东西，一行字只要被截成图可信度好像就上升了不少，但截图伪造起来也太容易了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/04/WrceRVl6G71npux.jpg&#34; alt=&#34;EVYJwu2UEAAPg2_.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;有三人成虎旧事，人们总结了『耳听为虚，眼见为实』的真理，但现在信息时代眼见也不一定为实了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图片有可能被软件处理过&lt;/li&gt;
&lt;li&gt;网页内容可能被修改过&lt;/li&gt;
&lt;li&gt;发布内容的账号可能是个高仿&lt;/li&gt;
&lt;li&gt;图片可能没截全，存在被断章取义的现象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这方面，比如&lt;code&gt;F12&lt;/code&gt;，永远的神。&lt;/p&gt;
&lt;h2 id=&#34;互联网档案馆&#34;&gt;互联网档案馆&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网档案馆（英语：Internet Archive）是美国的一个由Alexa创始人布鲁斯特·卡利创办于1996年的非营利性的、提供互联网多媒体资料文件阅览服务的数字图书馆，总部位于加利福尼亚州旧金山的列治文区，其使命是“普及所有知识”（英语：universal access to all knowledge.）。该“档案馆”提供的数字资料有如网站、网页、图形材料音乐、视频、音频、软件、动态图像和数百万书籍等的永久性免费储存及获取的副本。 迄至2012年10月，其信息储量达到10PB。除此之外，该档案馆也是网络开放与自由化的倡议者之一。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如上面提到的小管家的这个回答：&lt;a href=&#34;https://www.zhihu.com/question/437783708/answer/1660566169&#34;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎小管家的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们日后需要证明小管家说过，那么先打开互联网档案馆：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://archive.org/&#34;&gt;https://archive.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加小管家这条回答&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/04/btRYTenH6wjDyfL.jpg&#34; alt=&#34;v2-b4787a60eeab648a2e427ad6144c5819_b.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后archive.org的爬虫会抓取这个链接并保存下来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/04/DGvpNtZE7sg2QL8.jpg&#34; alt=&#34;v2-03fc4b6e3db7716cd4459f63ee46e342_b.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果有一天知乎倒闭了，我们仍然能用这个链接证明小管家说过这句话。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20210104115016/https://www.zhihu.com/question/437783708/answer/1660566169&#34;&gt;https://web.archive.org/web/20210104115016/https://www.zhihu.com/question/437783708/answer/1660566169&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86&#34;&gt;互联网档案馆&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/%E6%88%AA%E5%9B%BE%E4%B8%8D%E5%8F%AF%E4%BF%A1%E6%88%91%E4%BB%AC%E8%83%BD%E4%BF%A1%E4%BB%80%E4%B9%88/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>android项目开发：Broadcast</title>
        <link>https://ntutn.top/posts/broadcast/</link>
        <pubDate>Thu, 24 Dec 2020 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/broadcast/</guid>
        <description>归零幻想 https://ntutn.top/posts/broadcast/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;仍然是《第一行代码》的学习笔记，安卓内置广播机制。&lt;/p&gt;
&lt;p&gt;Android中每个应用程序都可以对自己感兴趣的广播进行注册，包括来自系统的，和其他应用程序的。&lt;/p&gt;
&lt;p&gt;广播分为标准广播和有序广播。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准广播异步执行，所有BroadcastReceiver几乎同时收到广播的消息。&lt;/li&gt;
&lt;li&gt;有序广播 同步执行，只有前一个Receiver逻辑执行完后才会传递给下一个，且可以将广播截断。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;接收系统广播&#34;&gt;接收系统广播&lt;/h2&gt;
&lt;p&gt;BroadcastReceiver的&lt;code&gt;onReceive()&lt;/code&gt;方法是在主线程调用的，不应执行耗时操作。但开一个新线程操作也是不可靠的&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;监听时间变化动态注册&#34;&gt;监听时间变化（动态注册）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MainActivity&lt;/span&gt; : AppCompatActivity() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; timeReceiver = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BroadcastReceiver&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onReceive&lt;/span&gt;(context: Context?, intent: Intent?) {
            text.text = Date(System.currentTimeMillis()).toString()
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState: Bundle?) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; intentFilter = IntentFilter()
        intentFilter.addAction(Intent.ACTION_TIME_TICK)
        registerReceiver(timeReceiver, intentFilter)
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onDestroy&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.onDestroy()
        unregisterReceiver(timeReceiver)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;开机启动静态注册&#34;&gt;开机启动（静态注册）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#658b00&#34;&gt;package=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.broadcasttest&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;android.permission.RECEIVE_BOOT_COMPLETED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;application&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:allowBackup=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:icon=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@mipmap/ic_launcher&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@string/app_name&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:roundIcon=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@mipmap/ic_launcher_round&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:supportsRtl=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#658b00&#34;&gt;android:theme=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@style/Theme.BroadcastTest&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;receiver&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.BootCompleteReceiver&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:enabled=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:exported=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;android.intent.action.BOOT_COMPLETED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/receiver&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;activity&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;android.intent.action.MAIN&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;android.intent.category.LAUNCHER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.broadcasttest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.BroadcastReceiver&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.Context&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.content.Intent&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.widget.Toast&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BootCompleteReceiver&lt;/span&gt; : BroadcastReceiver() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onReceive&lt;/span&gt;(context: Context, intent: Intent) {
        Toast.makeText(context, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Boot Complete&amp;#34;&lt;/span&gt;, Toast.LENGTH_LONG).show()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;发送自定义广播&#34;&gt;发送自定义广播&lt;/h2&gt;
&lt;h3 id=&#34;普通广播&#34;&gt;普通广播&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; intent = Intent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.broadcasttest.MY_BROADCAST&amp;#34;&lt;/span&gt;)
intent.`package&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt; = packageName
sendBroadcast(intent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;intent中可以带上一些其他信息。&lt;/p&gt;
&lt;p&gt;不指定package默认发送隐式广播，无法被静态注册的Receiver接收。指定package指定接收者。&lt;/p&gt;
&lt;h3 id=&#34;有序广播&#34;&gt;有序广播&lt;/h3&gt;
&lt;p&gt;通过设置intent-filter的&lt;code&gt;android:priority&lt;/code&gt;属性来调整各个接收者的优先级。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; intent = Intent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.broadcasttest.MY_BROADCAST&amp;#34;&lt;/span&gt;)
intent.`package&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt; = packageName
sendOrderedBroadcast(intent, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个参数是个有关权限的。&lt;/p&gt;
&lt;p&gt;先接收到的可以用&lt;code&gt;abortBroadcast()&lt;/code&gt;方法阻止广播继续传播。&lt;/p&gt;
&lt;h2 id=&#34;broadcast和eventbus&#34;&gt;Broadcast和Eventbus&lt;/h2&gt;
&lt;p&gt;今天学习了这章之后我第一个联想到的是之前学习的EventBus，它们在这里起到的作用相似。便好奇它们的区别，实际项目中的选择。&lt;/p&gt;
&lt;p&gt;不过在网上搜到的回答千篇一律，各个都是CV能手，说EventBus更轻量级更灵活，但逻辑复杂时难以理出一个清楚的时间流程什么的。&lt;/p&gt;
&lt;p&gt;先这么理解吧，以后工程经验丰富后再对比学习。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lyabc123456/article/details/83104832&#34;&gt;为什么不能在BroadcastReceiver中开启子线程&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/broadcast/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>禁用macOS的窗口标签</title>
        <link>https://ntutn.top/posts/%E7%A6%81%E7%94%A8macos%E7%9A%84%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE/</link>
        <pubDate>Tue, 22 Dec 2020 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E7%A6%81%E7%94%A8macos%E7%9A%84%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E7%A6%81%E7%94%A8macos%E7%9A%84%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE/ -&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;作为一个对更新相对激进的用户，我当然是第一时间升级了最新的macOS Big Sur。说实在的，这名字给我的第一印象并不好，因为被我看成了『Big Bug』。&lt;/p&gt;
&lt;p&gt;圆角变大了，还有我一开始比较喜欢的功能，姑且称之为窗口标签。在BigSur中，当你打开两个全屏的Android Studio，它们将出现在同一个窗口，窗口上方出现不同的标签页，和浏览器一样。&lt;/p&gt;
&lt;p&gt;好景不长，这个功能表现很不稳定，我不得不考虑干掉这个功能。如果只是没有成功触发也就算了，大不了当没升级用，但它常常会把一些弹出窗口也搞成和原窗口并列的标签。比如当你rename一个文件时，弹出的窗口有时就会并列到标签上，然后Android Studio就卡死了。&lt;/p&gt;
&lt;p&gt;好吧，既然它开始影响我的工作效率了，我就找了找禁用的方法&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults write com.google.android.studio AppleWindowTabbingMode manual
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;来自&lt;a href=&#34;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&#34;&gt;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://ntutn.top/posts/%E7%A6%81%E7%94%A8macos%E7%9A%84%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>android项目开发：Fragment</title>
        <link>https://ntutn.top/posts/fragment/</link>
        <pubDate>Mon, 21 Dec 2020 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/fragment/</guid>
        <description>归零幻想 https://ntutn.top/posts/fragment/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;fragment&#34;&gt;Fragment&lt;/h1&gt;
&lt;h2 id=&#34;fragment的使用方式&#34;&gt;Fragment的使用方式&lt;/h2&gt;
&lt;h3 id=&#34;静态添加fragment&#34;&gt;静态添加Fragment&lt;/h3&gt;
&lt;p&gt;Fragment的写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;android:orientation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;vertical&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;Button&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/button&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:text=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_gravity=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;center_horizontal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;top.ntutn.fragmenttest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.os.Bundle&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.view.View&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;androidx.fragment.app.Fragment&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LeftFragment&lt;/span&gt; : Fragment() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreateView&lt;/span&gt;(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; inflater.inflate(R.layout.left_fragment, container, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;静态添加Fragment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;android:orientation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;horizontal&amp;#34;&lt;/span&gt;
              &lt;span style=&#34;color:#658b00&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;fragment&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/leftFragment&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.fragmenttest.LeftFragment&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0dp&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_weight=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;fragment&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@+id/rightFragment&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;top.ntutn.fragmenttest.RightFragment&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0dp&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#658b00&#34;&gt;android:layout_weight=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;动态添加fragment&#34;&gt;动态添加Fragment&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fragmentManager = supportFragmentManager
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; transaction = fragmentManager.beginTransaction()
transaction.replace(R.id.rightLayout, fragment)
transaction.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;在fragment中实现返回栈&#34;&gt;在Fragment中实现返回栈&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fragmentManager = supportFragmentManager
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; transaction = fragmentManager.beginTransaction()
transaction.replace(R.id.rightLayout, fragment)
transaction.addToBackStack(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
transaction.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fragment与activity交互&#34;&gt;Fragment与Activity交互&lt;/h3&gt;
&lt;p&gt;Activity中获取Fragment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fragment = supportFragmentManager.findFragmentById(R.id.leftFragment) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; LeftFragment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或使用&lt;code&gt;kotlin-android-extensions&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fragment = leftFragment &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; LeftFragment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fragment的生命周期&#34;&gt;Fragment的生命周期&lt;/h2&gt;
&lt;p&gt;和Activity的生命周期类似，重点是几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;onAttach() 当Fragment和Activity建立关联的时候调用&lt;/li&gt;
&lt;li&gt;onCreateView() 为Fragment创建视图时调用&lt;/li&gt;
&lt;li&gt;onActivityCreated() 确保与Fragment相关联的Activity创建完毕时调用。&lt;/li&gt;
&lt;li&gt;onDestroyView() 与Fragment关联的视图被移除时调用。&lt;/li&gt;
&lt;li&gt;onDetach() 当Fragment与Activity解除关联时调用&lt;/li&gt;
&lt;/ul&gt;
- https://ntutn.top/posts/fragment/ - CC BY-SA 4.0</description>
        </item>
    
    
  </channel>
</rss> 