<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>归零幻想</title>
    <link>https://ntutn.top/</link>
    <description>Recent content on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Fri, 07 Oct 2022 23:47:22 +0800</lastBuildDate>
    
        <atom:link href="https://ntutn.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>线性表ADT的实现</title>
        <link>https://ntutn.top/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8adt%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 13 May 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8adt%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8adt%E7%9A%84%E5%AE%9E%E7%8E%B0/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;线性表adt的实现&#34;&gt;线性表ADT的实现&lt;/h1&gt;
&lt;p&gt;数据结构平时测试的题目开放了，这次平时测试睡过了，全宿舍都睡过了。现在回头做做题目，还是有坑点的。&lt;/p&gt;
&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;假设线性表ADT的数据元素类型为正整数，采用带头结点的单链式存储结构。线性表ADT实现的大部分代码已经给出，请补充写出类的两个成员函数&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;reverse&lt;/code&gt;。  注意：&lt;strong&gt;只需提交需要补充的函数代码，其他代码不能自己重写和修改。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;函数：在元素值从小到大有序的线性表中插入一个元素，仍然保持有序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt;函数：实现线性表元素的倒置，即将线性表中数据元素的顺序反转。&lt;/p&gt;
&lt;p&gt;线性表元素输入时，以 &lt;code&gt;endTag&lt;/code&gt; 作为结束标志。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;例如输入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3 8 7 2 4 9 1 6 5 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;9 8 7 6 5 4 3 2 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;预置代码如下： （其中/*   */ 部分是要补充的&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;reverse&lt;/code&gt;函数）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ElemType;  &lt;span style=&#34;color:#228b22&#34;&gt;//数据元素类型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;//前视定义,否则友元无法定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//结点类定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LinkNode&lt;/span&gt;
{  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;friend&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;; 
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;: 
     LinkNode *link; 
     ElemType data;  
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;: 
     LinkNode (LinkNode *ptr = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)    {link=ptr;}
     LinkNode(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; ElemType &amp;amp; item, LinkNode *ptr = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;){  data=item;link=ptr;} 
     ~LinkNode(){}; 
}; 
&lt;span style=&#34;color:#228b22&#34;&gt;//单链表类定义 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;   
{  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:    
     LinkNode *first; &lt;span style=&#34;color:#228b22&#34;&gt;//指向链表头结点的指针          
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
     List (ElemType x) { first = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkNode (x);}   &lt;span style=&#34;color:#228b22&#34;&gt;// 带头结点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     ~List (){ MakeEmpty();}         &lt;span style=&#34;color:#228b22&#34;&gt;//析构函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MakeEmpty&lt;/span&gt; ( );      &lt;span style=&#34;color:#228b22&#34;&gt;//线性表置空    
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;insert&lt;/span&gt;(ElemType val);   &lt;span style=&#34;color:#228b22&#34;&gt;//在有序线性表中插入元素val
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;reverse&lt;/span&gt;();   &lt;span style=&#34;color:#228b22&#34;&gt;//线性表的倒置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;output&lt;/span&gt;();    &lt;span style=&#34;color:#228b22&#34;&gt;//线性表的输出               
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}; 
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List:: MakeEmpty ( )
 { LinkNode *q;
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (  first-&amp;gt;link != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; ) 
	{ q = first-&amp;gt;link;  &lt;span style=&#34;color:#228b22&#34;&gt;//指向别摘下结点 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      first-&amp;gt;link = q-&amp;gt;link;&lt;span style=&#34;color:#228b22&#34;&gt;//从链中摘下结点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; q;        &lt;span style=&#34;color:#228b22&#34;&gt;//释放摘下的结点 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
};	
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List ::output ( )
{  LinkNode  *p=first-&amp;gt;link; 
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(p!=&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
   { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(p==first-&amp;gt;link) cout&amp;lt;&amp;lt;p-&amp;gt;data;
     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;  cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;p-&amp;gt;data;
     p=p-&amp;gt;link;
   }
   cout&amp;lt;&amp;lt;endl;
}
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;请写出 insert 成员函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;请写出 reverse 成员函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{   List list(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
    ElemType endTag=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    ElemType val;
    &lt;span style=&#34;color:#228b22&#34;&gt;//下面通过不断读入元素，插入到有序单链表中，建立从小到大的有序单链表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    cin&amp;gt;&amp;gt;val;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(val!=endTag) 
     {  list.insert(val);     &lt;span style=&#34;color:#228b22&#34;&gt;//在有序表中插入一个元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cin&amp;gt;&amp;gt;val;  
      }
    list.reverse ();   &lt;span style=&#34;color:#228b22&#34;&gt;//线性表倒置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The result is:&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
    list.output ();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;基础题，注意边界的判断和特例的处理。&lt;/p&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;请写出 insert 成员函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List::insert(ElemType val){
    LinkNode*pNew=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkNode(val);
    LinkNode*pPointer=first;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(pPointer-&amp;gt;link!=&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(val&amp;lt;pPointer-&amp;gt;link-&amp;gt;data){
            pNew-&amp;gt;link=pPointer-&amp;gt;link;
            pPointer-&amp;gt;link=pNew;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        pPointer=pPointer-&amp;gt;link;
    }
    pPointer-&amp;gt;link=pNew;
}
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;请写出 reverse 成员函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;**************************************************
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List::reverse(){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(first-&amp;gt;link==&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;||first-&amp;gt;link-&amp;gt;link==&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
    }
    LinkNode*pParent=first-&amp;gt;link;
    LinkNode*pChild=first-&amp;gt;link-&amp;gt;link;
    first-&amp;gt;link-&amp;gt;link=&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(pChild!=&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;){
        LinkNode*pTemp=pChild-&amp;gt;link;
        pChild-&amp;gt;link=pParent;
        pParent=pChild;
        pChild=pTemp;
    }
    first-&amp;gt;link=pParent;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E7%BA%BF%E6%80%A7%E8%A1%A8adt%E7%9A%84%E5%AE%9E%E7%8E%B0/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>计算机组成原理笔记</title>
        <link>https://ntutn.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 13 May 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/ -&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;计算机组成原理马上就要期中考试了，我也在积极准备复习，顺着课本也做了一波笔记，把每个部分的知识点都整理了一下。没理解的暂时还空着（比如海明校验码），有些整理起来不方便的也暂时空着，回头去查课本吧。&lt;/p&gt;
&lt;p&gt;结课了，顺着课本捋了一遍，做的一些笔记：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;计算机组成原理&#34;&gt;计算机组成原理&lt;/h1&gt;
&lt;h2 id=&#34;概述-1&#34;&gt;概述&lt;/h2&gt;
&lt;h3 id=&#34;计算机硬件&#34;&gt;计算机硬件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;采用&lt;strong&gt;存储程序&lt;/strong&gt;工作方式。&lt;/li&gt;
&lt;li&gt;由&lt;strong&gt;运算器&lt;/strong&gt;、&lt;strong&gt;控制器&lt;/strong&gt;、&lt;strong&gt;存储器&lt;/strong&gt;、&lt;strong&gt;输入设备&lt;/strong&gt;、&lt;strong&gt;输出设备&lt;/strong&gt;部件组成。&lt;/li&gt;
&lt;li&gt;存储器：存储数据/指令
控制器：控制指令的自动执行
运算器：加减乘除、逻辑运算
操作人员通过输入输出设备控制计算机。&lt;/li&gt;
&lt;li&gt;计算机内部以&lt;strong&gt;二进制&lt;/strong&gt;表示指令和数据
指令由&lt;strong&gt;操作码&lt;/strong&gt;和&lt;strong&gt;地址码&lt;/strong&gt;组成。
总线：传输信息的介质。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ALU：数据处理部件，执行算数和逻辑运算。&lt;/p&gt;
&lt;h3 id=&#34;计算机软件&#34;&gt;计算机软件&lt;/h3&gt;
&lt;h2 id=&#34;计算机系统层次结构&#34;&gt;计算机系统层次结构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;应用（问题）        最终用户
算法                程序员
编程（语言）
操作系统/虚拟机
指令集体系结构（ISA）架构师
微体系结构
功能部件/RTL        电子工程师
电路
器件
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;机器级语言&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;和运行程序的计算机底层结构密切相关。
可读性差，不易于记忆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;汇编语言&lt;/li&gt;
&lt;li&gt;机器语言&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;高级语言&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;和底层计算机结构关系不大。
可读性相当较好。
大多数程序员使用高级语言编写程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;程序设计语言处理系统&#34;&gt;程序设计语言处理系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;汇编程序：汇编器，汇编语言》机器语言&lt;/li&gt;
&lt;li&gt;解释程序：解释器，将源程序中的语句按顺序逐条翻译并立即执行。&lt;/li&gt;
&lt;li&gt;编译程序：编译器，高级语言》汇编语言/机器语言。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机系统的不同用户&#34;&gt;计算机系统的不同用户&lt;/h2&gt;
&lt;h3 id=&#34;最终用户&#34;&gt;最终用户&lt;/h3&gt;
&lt;p&gt;使应用程序完成特定任务的用户。&lt;/p&gt;
&lt;p&gt;简单的人机交互界面、安装在计算机中的相关应用程序。&lt;/p&gt;
&lt;h3 id=&#34;系统管理员&#34;&gt;系统管理员&lt;/h3&gt;
&lt;p&gt;利用操作系统等软件提供的功能对系统进行配置管理维护的操作人员。&lt;/p&gt;
&lt;p&gt;部分硬件层面、系统管理层面、相关实用程序和人机交互界面。&lt;/p&gt;
&lt;h3 id=&#34;应用程序员&#34;&gt;应用程序员&lt;/h3&gt;
&lt;p&gt;使用高级语言编制应用软件的程序员。&lt;/p&gt;
&lt;p&gt;硬件、操作系统提供的编程接口、人机交互界面、实用程序、相关的语言程序处理系统。&lt;/p&gt;
&lt;h3 id=&#34;系统程序员&#34;&gt;系统程序员&lt;/h3&gt;
&lt;p&gt;设计和开发系统软件的程序员。&lt;/p&gt;
&lt;p&gt;计算机底层相关硬件和系统结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人可以既是最终用户，又是系统管理员、……
ISA处于硬件和软件交界面，是计算机系统核心部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;程序开发与执行过程&#34;&gt;程序开发与执行过程&lt;/h2&gt;
&lt;p&gt;对于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(){
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;通过程序编辑软件得到&lt;code&gt;hello.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;hello.c&lt;/code&gt;预处理、编译、汇编、链接，生成可执行目标程序&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gcc -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预处理：将以&lt;code&gt;#&lt;/code&gt;开头的命令进行处理
编译：编译得到汇编语言源程序
汇编：得到（二进制）可重定位目标文件
链接：多个可重定位目标文件和标准库函数合并为一个可执行目标文件。&lt;/p&gt;
&lt;p&gt;启动和执行依靠操作系统的支持。&lt;/p&gt;
&lt;h3 id=&#34;程序与指令之间的关系&#34;&gt;程序与指令之间的关系&lt;/h3&gt;
&lt;p&gt;可执行程序目标文件包括机器代码段，执行实质是机器代码段执行。机器代码段由一条条指令构成。&lt;/p&gt;
&lt;p&gt;指令是一个0/1序列，用来指示CPU完成一个特定的原子操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作码 指令操作类型&lt;/li&gt;
&lt;li&gt;地址码 指令操作数的地址&lt;/li&gt;
&lt;li&gt;立即数 具体一个数/偏移地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令的执行过程&#34;&gt;指令的执行过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据PC取指令到IR&lt;/li&gt;
&lt;li&gt;指令译码并送出控制信号&lt;/li&gt;
&lt;li&gt;取操作数&lt;/li&gt;
&lt;li&gt;指令执行&lt;/li&gt;
&lt;li&gt;回写结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机系统性能评价&#34;&gt;计算机系统性能评价&lt;/h2&gt;
&lt;p&gt;用户感觉到的时间分为CPU时间和其他时间。&lt;/p&gt;
&lt;p&gt;CPU时间分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户CPU时间&lt;/li&gt;
&lt;li&gt;系统CPU时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时钟周期：CPU的主脉冲信号宽度。&lt;/p&gt;
&lt;p&gt;时钟频率：CPU的主脉冲信号的频率，时钟周期的倒数。&lt;/p&gt;
&lt;p&gt;CPI：执行一条指令所用的时钟周期数&lt;/p&gt;
&lt;p&gt;$$CPU执行时间=\frac{程序所含时钟周期数}{时钟频率}=程序所含时钟周期数×时钟周期$$&lt;/p&gt;
&lt;p&gt;$$程序总时钟周期数=程序所含指令条数×CPI$$&lt;/p&gt;
&lt;p&gt;n种不同指令，第i条指令数和CPI已知综合CPI：&lt;/p&gt;
&lt;p&gt;$$程序总时钟周期数=\sum_{i=1}^n(CPI_i\times F_i)$$&lt;/p&gt;
&lt;p&gt;所以：
$$CPU执行时间=CPI\times 程序总指令条数\times 时钟周期$$&lt;/p&gt;
&lt;h2 id=&#34;用指令执行速度进行性能评估&#34;&gt;用指令执行速度进行性能评估&lt;/h2&gt;
&lt;p&gt;MIPS：指令速度的单位，每秒钟执行多少百万条指令。&lt;/p&gt;
&lt;p&gt;相对MIPS：被测机型速度是相对参考机型的多少倍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同机器用MIPS进行性能比较是不准确/不客观的：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;M1上一条指令的功能，M2上要多条指令来完成&lt;/li&gt;
&lt;li&gt;不同机器的CPI和时钟周期不同，执行一条指令所用的时间也不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数据的机器级表示&#34;&gt;数据的机器级表示&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;二进制八进制十六进制十进制写法标记（开头）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;十进制非零开头&lt;/li&gt;
&lt;li&gt;二进制0b开头&lt;/li&gt;
&lt;li&gt;八进制0开头&lt;/li&gt;
&lt;li&gt;十六进制0x开头&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;进制简化符号（结尾）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二进制 B（Binary）&lt;/li&gt;
&lt;li&gt;八进制 （Octal）&lt;/li&gt;
&lt;li&gt;十进制 D（Decimal）&lt;/li&gt;
&lt;li&gt;十六进制 H（Hexadecimal）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数制和编码&#34;&gt;数制和编码&lt;/h3&gt;
&lt;p&gt;信息使用二进制编码原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制只有两种状态，制作有两种稳态的物理器件很方便。&lt;/li&gt;
&lt;li&gt;编码和运算规则简单，可以开关电路实现，简单易行。&lt;/li&gt;
&lt;li&gt;1、0对应逻辑真假，为逻辑运算和逻辑判断提供便利条件，可以用逻辑门电路实现算术运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进位计数制&#34;&gt;进位计数制&lt;/h3&gt;
&lt;p&gt;（略）&lt;/p&gt;
&lt;h3 id=&#34;定点与浮点表示&#34;&gt;定点与浮点表示&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;定点 小数点固定&lt;/li&gt;
&lt;li&gt;浮点 尾数决定表示精度，指数决定表示范围&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定点数的编码表示&#34;&gt;定点数的编码表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真值：现实世界带有正负号的数。&lt;/li&gt;
&lt;li&gt;原码：符号位后跟数值位。&lt;/li&gt;
&lt;li&gt;反码：正数不变，数（除符号位）按位取反&lt;/li&gt;
&lt;li&gt;补码：正数不变，负数反码加一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已知反码/补码求原码，同上述操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移码：每个数加一个偏置常数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;若将移码第一位看做符号位，则同一个真值的移码和补码只有符号位不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;整数的表示&#34;&gt;整数的表示&lt;/h2&gt;
&lt;h3 id=&#34;无符号整数的表示&#34;&gt;无符号整数的表示&lt;/h3&gt;
&lt;p&gt;无符号位，略&lt;/p&gt;
&lt;h3 id=&#34;带符号数的表示&#34;&gt;带符号数的表示&lt;/h3&gt;
&lt;p&gt;常用补码表示。优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0的表示形式唯一&lt;/li&gt;
&lt;li&gt;可以用加法实现减法运算，符号位可以参与运算&lt;/li&gt;
&lt;li&gt;与原码和反码相比，多一个最小负数&lt;/li&gt;
&lt;li&gt;不需要通过循环进位调整结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;c语言中的整数类型&#34;&gt;C语言中的整数类型&lt;/h3&gt;
&lt;p&gt;（略）&lt;/p&gt;
&lt;h2 id=&#34;实数的表示&#34;&gt;实数的表示&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机中用浮点数表示实数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;浮点数的表示格式&#34;&gt;浮点数的表示格式&lt;/h3&gt;
&lt;p&gt;（无）&lt;/p&gt;
&lt;h3 id=&#34;浮点数的规格化&#34;&gt;浮点数的规格化&lt;/h3&gt;
&lt;p&gt;规格化数：尾数最高位具有非零数字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右归：有效数字在小数点之前，需右归。尾数每右移一位，阶码+1。&lt;/li&gt;
&lt;li&gt;左归：……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ieee754浮点数标准&#34;&gt;IEEE754浮点数标准&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;32位单精度 1符号 8阶码 32尾数&lt;/li&gt;
&lt;li&gt;64位双精度 1符号 11阶码 52尾数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尾数用原码，1在小数点之前（省略第一个1）&lt;/p&gt;
&lt;p&gt;指数用移码&lt;/p&gt;
&lt;h3 id=&#34;c语言中的浮点数类型&#34;&gt;C语言中的浮点数类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;转换&lt;/th&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th&gt;float&lt;/th&gt;
&lt;th&gt;double&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;可能有数据被舍入&lt;/td&gt;
&lt;td&gt;保留精确值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;可能向0方向截断，可能溢出&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;保留精确值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;可能向0方向截断，可能溢出&lt;/td&gt;
&lt;td&gt;可能有数据被舍入，可能溢出&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;十进制数的表示&#34;&gt;十进制数的表示&lt;/h2&gt;
&lt;h3 id=&#34;ascii字符表示&#34;&gt;ASCII字符表示&lt;/h3&gt;
&lt;p&gt;将数看做字符串，方便输入输出，但运算不方便。&lt;/p&gt;
&lt;h3 id=&#34;用bcd码表示&#34;&gt;用BCD码表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有权BCD码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8421&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无权BCD码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;余三码、格雷码&lt;/p&gt;
&lt;h2 id=&#34;非数值数据的编码表示&#34;&gt;非数值数据的编码表示&lt;/h2&gt;
&lt;h3 id=&#34;逻辑值&#34;&gt;逻辑值&lt;/h3&gt;
&lt;p&gt;0 1&lt;/p&gt;
&lt;h2 id=&#34;数据的宽度和存储&#34;&gt;数据的宽度和存储&lt;/h2&gt;
&lt;h3 id=&#34;数据的宽度和单位&#34;&gt;数据的宽度和单位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;字 用来处理信息的单位，用来度量各种数据类型的宽度&lt;/li&gt;
&lt;li&gt;字长 表示进行数据运算、存储、传送的各种部件的宽度，反映计算机处理信息的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的存储和排列顺序&#34;&gt;数据的存储和排列顺序&lt;/h3&gt;
&lt;p&gt;i=01234567H&lt;/p&gt;
&lt;p&gt;&amp;amp;i=0800H&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;0800H&lt;/th&gt;
&lt;th&gt;0801H&lt;/th&gt;
&lt;th&gt;0802H&lt;/th&gt;
&lt;th&gt;0803H&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;大端方式&lt;/td&gt;
&lt;td&gt;01H&lt;/td&gt;
&lt;td&gt;23H&lt;/td&gt;
&lt;td&gt;45H&lt;/td&gt;
&lt;td&gt;67H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小端方式&lt;/td&gt;
&lt;td&gt;67H&lt;/td&gt;
&lt;td&gt;45H&lt;/td&gt;
&lt;td&gt;23H&lt;/td&gt;
&lt;td&gt;01H&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;数据校验码&#34;&gt;数据校验码&lt;/h2&gt;
&lt;h3 id=&#34;奇偶校验码&#34;&gt;奇偶校验码&lt;/h3&gt;
&lt;p&gt;不能确定错误位置，没有纠错能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;奇校验位 有奇数个1时P取0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$B=b_{n-1}\oplus b_{n-2}\oplus \ldots \oplus b_1 \oplus b_0 \oplus 1$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偶校验位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$B=b_{n-1}\oplus b_{n-2}\oplus \ldots \oplus b_1 \oplus b_0$$&lt;/p&gt;
&lt;h3 id=&#34;海明校验码&#34;&gt;海明校验码&lt;/h3&gt;
&lt;p&gt;（待补全）&lt;/p&gt;
&lt;h3 id=&#34;循环冗余校验码&#34;&gt;循环冗余校验码&lt;/h3&gt;
&lt;p&gt;（待补全）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;高级语言和机器指令中的运算&#34;&gt;高级语言和机器指令中的运算&lt;/h2&gt;
&lt;h3 id=&#34;c程序中涉及的运算&#34;&gt;C程序中涉及的运算&lt;/h3&gt;
&lt;h3 id=&#34;mips指令中涉及的运算&#34;&gt;MIPS指令中涉及的运算&lt;/h3&gt;
&lt;h2 id=&#34;基本运算部件&#34;&gt;基本运算部件&lt;/h2&gt;
&lt;h3 id=&#34;串行进位加法器&#34;&gt;串行进位加法器&lt;/h3&gt;
&lt;h3 id=&#34;并行进位加法器&#34;&gt;并行进位加法器&lt;/h3&gt;
&lt;h3 id=&#34;带标志加法器&#34;&gt;带标志加法器&lt;/h3&gt;
&lt;h3 id=&#34;算数逻辑部件&#34;&gt;算数逻辑部件&lt;/h3&gt;
&lt;h2 id=&#34;定点数运算&#34;&gt;定点数运算&lt;/h2&gt;
&lt;h3 id=&#34;补码加减运算&#34;&gt;补码加减运算&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Latex公式无法显示，反而导致后面排版错位……
$$
\begin{cases}
[x+y]_补=[x]_补+[y]_补(mod 2^n)\\\\
[x-y]_补=[x]_补+[-y]_补(mod 2^n)
\end{cases}
$$
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    CF—进位标志，加法时的最高位（D7或D15）产生进位或减法时最高位出现借位，则CF=1，否则CF=0；
    AF—辅助进位标志，供BCD码使用。当D3位出现进位或借位时AF=1，否则AF=0；
    OF—溢出标志，带符号数进行算术运算时，其结果超出了8位或16位的表示范围，产生溢出，则OF=1，否则OF=0；
    ZF—零标志，运算结果各位都为零，则ZF=1，否则ZF=0；
    SF—符号标志，运算结果为负数时，即运算结果的最高位为1，则SF=1，否则SF=0；
    PF—奇偶标志，反映操作结果中“1”的个数的情况，若有偶数个“1”，则PF=1，否则PF=0。
3个控制标志位
   DF—方向标志，用来控制数据串操作指令的步进方向；
    当设置DF=1时，将以递减顺序对数据串中的数据进行处理。当设置DF=0时，递增。
   IF—中断允许标志，当设置IF=1，开中断，CPU可响应可屏蔽中断请求；当设置IF=0时，关中断，CPU不响应可屏蔽中断请求。 
   TF—陷阱标志，为程序调试而设的。当设置TF=1，CPU处于单步执行指令的方式；当设置TF=0时，CPU正常执行程序。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;原码加减运算&#34;&gt;原码加减运算&lt;/h3&gt;
&lt;h3 id=&#34;移码加减运算&#34;&gt;移码加减运算&lt;/h3&gt;
&lt;h3 id=&#34;原码乘法运算&#34;&gt;原码乘法运算&lt;/h3&gt;
&lt;h4 id=&#34;原码一位乘&#34;&gt;原码一位乘&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;确定乘机的符号位&lt;/li&gt;
&lt;li&gt;计算乘积的数值位&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;自行查书看样例掌握无符号数相乘运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;补码一位乘&#34;&gt;补码一位乘&lt;/h4&gt;
&lt;h4 id=&#34;原码一位除&#34;&gt;原码一位除&lt;/h4&gt;
&lt;h4 id=&#34;补码一位除&#34;&gt;补码一位除&lt;/h4&gt;
&lt;h2 id=&#34;浮点数运算&#34;&gt;浮点数运算&lt;/h2&gt;
&lt;h3 id=&#34;浮点数加减运算&#34;&gt;浮点数加减运算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对阶&lt;/li&gt;
&lt;li&gt;尾数加减&lt;/li&gt;
&lt;li&gt;规格化&lt;/li&gt;
&lt;li&gt;舍入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运算部件的组成&#34;&gt;运算部件的组成&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓运算部件，通常是指ALU、移位器、存放临时数据的寄存器，加上用于数据选择的多路选择器和实现数据传送的总线等构成的一个运算数据通路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;指令系统&#34;&gt;指令系统&lt;/h1&gt;
&lt;h2 id=&#34;指令格式设计&#34;&gt;指令格式设计&lt;/h2&gt;
&lt;h3 id=&#34;指令地址码的个数&#34;&gt;指令地址码的个数&lt;/h3&gt;
&lt;p&gt;每条指令必须包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作码 指定操作类型&lt;/li&gt;
&lt;li&gt;源操作数或地址&lt;/li&gt;
&lt;li&gt;结果的地址&lt;/li&gt;
&lt;li&gt;下一条指令地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令格式设计原则&#34;&gt;指令格式设计原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;指令应尽量短 减少空间开销&lt;/li&gt;
&lt;li&gt;要有足够的操作码位数 向后兼容，预留&lt;/li&gt;
&lt;li&gt;操作码的编码必须有唯一解释&lt;/li&gt;
&lt;li&gt;指令长度应是字节的整数倍 便于指令的读取和指令地址的计算&lt;/li&gt;
&lt;li&gt;合理选择地址字段的个数 空间开销与事件开销权衡&lt;/li&gt;
&lt;li&gt;指令应尽量规整 简化硬件的设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;指令系统的设计&#34;&gt;指令系统的设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完整性或完备性 较复杂的功能可以通过伪指令实现&lt;/li&gt;
&lt;li&gt;兼容性 高档机的指令系统应兼容以前低端机的指令系统，给软件资源重复利用带来方便&lt;/li&gt;
&lt;li&gt;均匀性 运算系统应能应对多种类型的数据进行处理&lt;/li&gt;
&lt;li&gt;可扩充性 操作码预留编码空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本设计问题&#34;&gt;基本设计问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;操作码的个数、种类、复杂度如何选择？&lt;/li&gt;
&lt;li&gt;运算指令能对哪几种数据类型进行操作？&lt;/li&gt;
&lt;li&gt;采用什么样的指令格式？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;规整型 定长指令字定长操作码，减少时间开销，增加空间开销&lt;/li&gt;
&lt;li&gt;紧凑型&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;通用寄存器的个数、功能、长度如何规定？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;增加通用寄存器个数可以减少指令执行访存次数，但会增加寄存器存取延迟，增大CPU成本&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;如何设计寻址方式的种类和编码已经各种寻址方式下有效地址如何计算？&lt;/li&gt;
&lt;li&gt;下一条指令的地址如何确定？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般通过一个专门的寄存器，叫做 &lt;strong&gt;程序计数器（PC）&lt;/strong&gt; 或 &lt;strong&gt;指令指针（IP）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;操作数类型&#34;&gt;操作数类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;指针或地址&lt;/li&gt;
&lt;li&gt;数值数据 带符号整数、浮点数&lt;/li&gt;
&lt;li&gt;位、位串、字符、字符串&lt;/li&gt;
&lt;li&gt;布尔&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;寻址方式&#34;&gt;寻址方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;立即寻址 指令中直接给出操作数本身&lt;/li&gt;
&lt;li&gt;直接寻址 指令中给出操作数的地址&lt;/li&gt;
&lt;li&gt;间接寻址 指令中给出操作数的地址的地址……&lt;/li&gt;
&lt;li&gt;寄存器寻址 指令中给出寄存器的编号&lt;/li&gt;
&lt;li&gt;寄存器间接寻址 寄存器中存的是操作数的地址&lt;/li&gt;
&lt;li&gt;变址寻址 指令中给出基准地址，变址寄存器给出偏移量，相加得到实际地址&lt;/li&gt;
&lt;li&gt;相对寻址 指令中给出偏移量，基准地址由PC给出&lt;/li&gt;
&lt;li&gt;基址寻址 指令中给出偏移量，基准地址由基址寄存器给出&lt;/li&gt;
&lt;li&gt;其他寻址方式&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基址寻址、变址寻址、相对寻址&lt;/strong&gt;统称为 &lt;strong&gt;偏移寻址&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;操作数类型-1&#34;&gt;操作数类型&lt;/h3&gt;
&lt;h3 id=&#34;操作码编码&#34;&gt;操作码编码&lt;/h3&gt;
&lt;h3 id=&#34;标志信息的生成和使用&#34;&gt;标志信息的生成和使用&lt;/h3&gt;
&lt;h3 id=&#34;指令系统设计风格&#34;&gt;指令系统设计风格&lt;/h3&gt;
&lt;h4 id=&#34;按操作数位置指定风格来分&#34;&gt;按操作数位置指定风格来分&lt;/h4&gt;
&lt;h4 id=&#34;按指令格式的复杂度来分&#34;&gt;按指令格式的复杂度来分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;CISC指令系统&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;指令系统复杂&lt;/li&gt;
&lt;li&gt;指令周期长&lt;/li&gt;
&lt;li&gt;指令周期差距大&lt;/li&gt;
&lt;li&gt;采用微程序控制&lt;/li&gt;
&lt;li&gt;难以进行编译优化&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;RISC指令系统&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;指令数目少&lt;/li&gt;
&lt;li&gt;指令格式规整&lt;/li&gt;
&lt;li&gt;采用&lt;code&gt;Load/Store&lt;/code&gt;型指令设计风格&lt;/li&gt;
&lt;li&gt;采用流水线方式执行指令&lt;/li&gt;
&lt;li&gt;采用大量寄存器&lt;/li&gt;
&lt;li&gt;采用硬连线控制器&lt;/li&gt;
&lt;li&gt;采用优化的编译系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指令系统实例&#34;&gt;指令系统实例&lt;/h2&gt;
&lt;h2 id=&#34;程序的机器级表示&#34;&gt;程序的机器级表示&lt;/h2&gt;
&lt;h1 id=&#34;中央处理器&#34;&gt;中央处理器&lt;/h1&gt;
&lt;h2 id=&#34;cpu概述&#34;&gt;CPU概述&lt;/h2&gt;
&lt;h3 id=&#34;指令执行过程&#34;&gt;指令执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;取指令并计算下一条指令地址&lt;/li&gt;
&lt;li&gt;对指令操作码译码&lt;/li&gt;
&lt;li&gt;计算源操作数地址并取源操作数&lt;/li&gt;
&lt;li&gt;数据操作&lt;/li&gt;
&lt;li&gt;目的操作数地址计算并存结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu的基本功能和基本组成&#34;&gt;CPU的基本功能和基本组成&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;程序计数器PC 用来存指令的地址&lt;/li&gt;
&lt;li&gt;指令寄存器IR 用于存现行指令‘&lt;/li&gt;
&lt;li&gt;指令译码器&lt;/li&gt;
&lt;li&gt;脉冲源及启停控制线路&lt;/li&gt;
&lt;li&gt;时序信号产生部件&lt;/li&gt;
&lt;li&gt;操作控制信号形成部件&lt;/li&gt;
&lt;li&gt;总线控制逻辑&lt;/li&gt;
&lt;li&gt;中断机构&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据通路的基本结构&#34;&gt;数据通路的基本结构&lt;/h3&gt;
&lt;h2 id=&#34;单周期处理器设计&#34;&gt;单周期处理器设计&lt;/h2&gt;
&lt;h3 id=&#34;指令功能的描述&#34;&gt;指令功能的描述&lt;/h3&gt;
&lt;h3 id=&#34;数据通路的设计&#34;&gt;数据通路的设计&lt;/h3&gt;
&lt;h3 id=&#34;控制逻辑单元的设计&#34;&gt;控制逻辑单元的设计&lt;/h3&gt;
&lt;h3 id=&#34;时钟周期的确定&#34;&gt;时钟周期的确定&lt;/h3&gt;
&lt;h2 id=&#34;多周期处理器的设计&#34;&gt;多周期处理器的设计&lt;/h2&gt;
&lt;h2 id=&#34;微程序控制器设计&#34;&gt;微程序控制器设计&lt;/h2&gt;
&lt;p&gt;硬连线控制器速度快，适合简单或规整的指令系统。对于复杂指令系统或其中的复杂指令，大多采用微程序方式设计控制器。&lt;/p&gt;
&lt;h3 id=&#34;微程序控制器的结构&#34;&gt;微程序控制器的结构&lt;/h3&gt;
&lt;h2 id=&#34;异常和中断处理&#34;&gt;异常和中断处理&lt;/h2&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;基本概念&lt;/h3&gt;
&lt;p&gt;在程序正常执行过程中，CPU会遇到一些特殊情况而无法继续执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部异常 处理器内部异常引起的意外事件&lt;/li&gt;
&lt;li&gt;外部中断 外设完成任务或完成某些特殊事件，发中断事件，等待处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;指令流水线&#34;&gt;指令流水线&lt;/h1&gt;
&lt;h2 id=&#34;流水线概述&#34;&gt;流水线概述&lt;/h2&gt;
&lt;h3 id=&#34;流水线的执行效率&#34;&gt;流水线的执行效率&lt;/h3&gt;
&lt;h3 id=&#34;适合流水线的指令集特征&#34;&gt;适合流水线的指令集特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指令长度尽量一致&lt;/li&gt;
&lt;li&gt;指令格式尽量规整，尽量保持源寄存器的位置相同&lt;/li&gt;
&lt;li&gt;采用&lt;code&gt;Load/Store&lt;/code&gt;型指令风格&lt;/li&gt;
&lt;li&gt;数据和指令在存储器中“对齐”存放&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线处理器的实现&#34;&gt;流水线处理器的实现&lt;/h2&gt;
&lt;h3 id=&#34;每条指令的流水段的分析&#34;&gt;每条指令的流水段的分析&lt;/h3&gt;
&lt;h3 id=&#34;流水线数据通路的设计&#34;&gt;流水线数据通路的设计&lt;/h3&gt;
&lt;h3 id=&#34;流水线控制器的设计&#34;&gt;流水线控制器的设计&lt;/h3&gt;
&lt;h2 id=&#34;流水线冒险及处理&#34;&gt;流水线冒险及处理&lt;/h2&gt;
&lt;h3 id=&#34;结构冒险&#34;&gt;结构冒险&lt;/h3&gt;
&lt;p&gt;也称硬件资源冲突，同一部件被不同指令同时使用。&lt;/p&gt;
&lt;h3 id=&#34;数据冒险&#34;&gt;数据冒险&lt;/h3&gt;
&lt;p&gt;后一指令要用到前面指令的结果，而结果还没产生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入空操作&lt;/li&gt;
&lt;li&gt;插入气泡 阻塞&lt;/li&gt;
&lt;li&gt;使用转发技术 将中间数据之间转发到ALU的输入端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制冒险&#34;&gt;控制冒险&lt;/h3&gt;
&lt;h2 id=&#34;高级流水线技术&#34;&gt;高级流水线技术&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;超流水线技术
增加流水线级数使更多的指令同时在流水线中重叠执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;流水线的级数越多，用于流水段寄存器的开销越大，因而流水线级数是有限制的，不可能无限增加。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多发射流水线技术
同时启动多条指令独立运行提高指令并行性。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;指令打包 将并行处理的多条指令同时发送到发射槽 推测技术&lt;/li&gt;
&lt;li&gt;冒险处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;存储器分层体系结构&#34;&gt;存储器分层体系结构&lt;/h1&gt;
&lt;h2 id=&#34;存储器概述&#34;&gt;存储器概述&lt;/h2&gt;
&lt;h3 id=&#34;存储器的分类&#34;&gt;存储器的分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;按存储原件分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;半导体存储器&lt;/li&gt;
&lt;li&gt;磁表面存储器&lt;/li&gt;
&lt;li&gt;光盘存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按存取方式分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;随机存取存储器 按地址访问存储单元&lt;/li&gt;
&lt;li&gt;顺序存取存储器 信息按顺序存入和读出 存储容量大，存取速度慢&lt;/li&gt;
&lt;li&gt;直接存取存储器 兼有随机访问和顺序存储的特点 磁盘&lt;/li&gt;
&lt;li&gt;相联存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按信息的可更改性分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;读写存储器&lt;/li&gt;
&lt;li&gt;只读存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;按断电后信息的可保存程度分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;非易失性存储器&lt;/li&gt;
&lt;li&gt;易失性存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;按功能分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;高速缓冲存储器 静态RAM芯片&lt;/li&gt;
&lt;li&gt;主存储器 &lt;strong&gt;核心存储器&lt;/strong&gt; MOS管半导体存储器&lt;/li&gt;
&lt;li&gt;辅助存储器 磁盘存储器&lt;/li&gt;
&lt;li&gt;海量后备存储器 容量大 速度慢&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;辅存和海量后备存储器统称为 &lt;em&gt;外部存储器&lt;/em&gt; ，简称 &lt;em&gt;外存&lt;/em&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主存储器的组成和基本操作&#34;&gt;主存储器的组成和基本操作&lt;/h3&gt;
&lt;h3 id=&#34;存储器的主要性能指标&#34;&gt;存储器的主要性能指标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;容量&lt;/li&gt;
&lt;li&gt;价格&lt;/li&gt;
&lt;li&gt;速度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问时间用读出时间T_A和写入时间T_W来描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接到命令开始到信息被送到数据线上的时间&lt;/li&gt;
&lt;li&gt;接到命令到信息写入存储器的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储周期（T_M）：一次读写操作需要的全部时间，存储器进行连续读写操作的最短时间间隔。&lt;/p&gt;
&lt;h3 id=&#34;存储器的层次化结构&#34;&gt;存储器的层次化结构&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;典型存取时间&lt;/th&gt;
&lt;th&gt;存储器&lt;/th&gt;
&lt;th&gt;典型容量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1ns&lt;/td&gt;
&lt;td&gt;寄存器&lt;/td&gt;
&lt;td&gt;&amp;lt;1KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2ns&lt;/td&gt;
&lt;td&gt;高速缓存（cache）&lt;/td&gt;
&lt;td&gt;4MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10ns&lt;/td&gt;
&lt;td&gt;主存储器（RAM和ROM）&lt;/td&gt;
&lt;td&gt;500MB~4GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10ms&lt;/td&gt;
&lt;td&gt;辅助存储器（硬盘）&lt;/td&gt;
&lt;td&gt;40~500G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10s&lt;/td&gt;
&lt;td&gt;海量后备存储器（磁带库、光盘等）&lt;/td&gt;
&lt;td&gt;10~100TB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;半导体随机存取存储器&#34;&gt;半导体随机存取存储器&lt;/h2&gt;
&lt;h3 id=&#34;基本存储原件&#34;&gt;基本存储原件&lt;/h3&gt;
&lt;p&gt;用来存储一位二进制信息，是组成存储器的最基本电路。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;六管静态MOS管存储元件&lt;/li&gt;
&lt;li&gt;单管动态MOS管存储元件 降低了功耗&lt;/li&gt;
&lt;li&gt;静态存储元件和动态存储元件的比较&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SRAM存储元件所用MOS管多，占硅片面积大，功耗大，集成度低&lt;/li&gt;
&lt;li&gt;DRAM存储元件MOS管少，占硅片面积小，功耗小，集成度更高，但因电容存储电荷，有漏电现象，必须定时刷新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sram芯片和dram芯片&#34;&gt;SRAM芯片和DRAM芯片&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;存储器芯片的内部结构&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;存储体&lt;/li&gt;
&lt;li&gt;地址译码器&lt;/li&gt;
&lt;li&gt;驱动器&lt;/li&gt;
&lt;li&gt;I/O控制电路 放大信息的作用&lt;/li&gt;
&lt;li&gt;片选控制信号&lt;/li&gt;
&lt;li&gt;读写控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;DRAM芯片的刷新&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;集中刷新 时间较长，影响系统的执行效率&lt;/li&gt;
&lt;li&gt;分散刷新 不存在死时间区，但每个存储时间周期被加成&lt;/li&gt;
&lt;li&gt;异步刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;DRAM芯片读写周期&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sdram芯片技术&#34;&gt;SDRAM芯片技术&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SDRAM&lt;/code&gt;芯片技术
每一步操作都在CLK的控制下，支持 &lt;strong&gt;突发&lt;/strong&gt; 传输方式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DDR SDRAM&lt;/code&gt;芯片技术&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DDR2 SDRAM&lt;/code&gt;芯片技术&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DDR3 SDRAM&lt;/code&gt;芯片技术&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;存储器芯片的扩展及其与cpu的连接&#34;&gt;存储器芯片的扩展及其与CPU的连接&lt;/h2&gt;
&lt;h3 id=&#34;内存条和内存条插槽&#34;&gt;内存条和内存条插槽&lt;/h3&gt;
&lt;h3 id=&#34;存储器芯片的扩展&#34;&gt;存储器芯片的扩展&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;位扩展&lt;/li&gt;
&lt;li&gt;字扩展 容量扩充，位数不变&lt;/li&gt;
&lt;li&gt;字、位同时扩展&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;半导体只读存储器和flash存储器&#34;&gt;半导体只读存储器和Flash存储器&lt;/h2&gt;
&lt;h3 id=&#34;半导体只读存储器&#34;&gt;半导体只读存储器&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;掩膜只读存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;双极型&lt;/li&gt;
&lt;li&gt;MOS型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内容固定，可靠性高，但灵活性差，生产周期长，用户和厂家依赖性大，只适合定型批量生产&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可编程只读存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;熔丝型&lt;/li&gt;
&lt;li&gt;反向二极管型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写入不可逆&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;可擦除可编程只读存储器&lt;/li&gt;
&lt;li&gt;电擦除电改写只读存储器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;半导体flash存储器&#34;&gt;半导体Flash存储器&lt;/h3&gt;
&lt;p&gt;闪存，高密度非易失型读写存储器。功耗低，集成度高，不需要后备电源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Flash存储元&lt;/li&gt;
&lt;li&gt;Flash存储器的基本操作&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;编程&lt;/li&gt;
&lt;li&gt;擦除&lt;/li&gt;
&lt;li&gt;读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并行存储器结构技术&#34;&gt;并行存储器结构技术&lt;/h2&gt;
&lt;h3 id=&#34;双口存储器&#34;&gt;双口存储器&lt;/h3&gt;
&lt;p&gt;两组独立的读写控制电路和两个独立的读写端口。&lt;/p&gt;
&lt;h3 id=&#34;多模块存储器&#34;&gt;多模块存储器&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;连续编址方式&lt;/li&gt;
&lt;li&gt;交叉编址方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;高速缓冲存储器&#34;&gt;高速缓冲存储器&lt;/h2&gt;
&lt;h3 id=&#34;程序访问的局限性&#34;&gt;程序访问的局限性&lt;/h3&gt;
&lt;p&gt;较短时间间隔内，程序产生的地址往往集中在存储器的很小的一个范围。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间局限性 被访问的某存储单元在较短时间内可能又被访问&lt;/li&gt;
&lt;li&gt;空间局限性 被访问的某个存储单元在一个较短的时间间隔内很可能也被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache的基本工作原理&#34;&gt;cache的基本工作原理&lt;/h3&gt;
&lt;h3 id=&#34;cache行和主内存块之间的映射关系&#34;&gt;cache行和主内存块之间的映射关系&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接映射&lt;/li&gt;
&lt;li&gt;全相联映射&lt;/li&gt;
&lt;li&gt;组相联映射&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cache中主存块的替换算法&#34;&gt;cache中主存块的替换算法&lt;/h3&gt;
&lt;h3 id=&#34;cache的一致性问题&#34;&gt;cache的一致性问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;全写法&lt;/li&gt;
&lt;li&gt;回写法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;虚拟存储器&#34;&gt;虚拟存储器&lt;/h2&gt;
&lt;h3 id=&#34;虚拟地址空间&#34;&gt;虚拟地址空间&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简化存储&lt;/li&gt;
&lt;li&gt;使主存空间有效利用&lt;/li&gt;
&lt;li&gt;保护各自进程不被其他进程破坏&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;虚拟存储器的实现&#34;&gt;虚拟存储器的实现&lt;/h3&gt;
&lt;h1 id=&#34;互联及输入输出组织&#34;&gt;互联及输入输出组织&lt;/h1&gt;
&lt;h2 id=&#34;外部设备的分类和特点&#34;&gt;外部设备的分类和特点&lt;/h2&gt;
&lt;h3 id=&#34;外设的分类&#34;&gt;外设的分类&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;按信息的传输方向分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入设备&lt;/li&gt;
&lt;li&gt;输出设备&lt;/li&gt;
&lt;li&gt;输入输出设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;按功能分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人机交互设备&lt;/li&gt;
&lt;li&gt;存储设备&lt;/li&gt;
&lt;li&gt;机-机通信设备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;外设的特点&#34;&gt;外设的特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;异步性&lt;/li&gt;
&lt;li&gt;实时性&lt;/li&gt;
&lt;li&gt;多样性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;输入设备和输出设备&#34;&gt;输入设备和输出设备&lt;/h2&gt;
&lt;h2 id=&#34;外部存储设备&#34;&gt;外部存储设备&lt;/h2&gt;
&lt;h3 id=&#34;磁表面存储器的原理&#34;&gt;磁表面存储器的原理&lt;/h3&gt;
&lt;h3 id=&#34;硬盘存储器&#34;&gt;硬盘存储器&lt;/h3&gt;
&lt;h3 id=&#34;冗余磁盘阵列&#34;&gt;冗余磁盘阵列&lt;/h3&gt;
&lt;h3 id=&#34;u盘和固态硬盘&#34;&gt;U盘和固态硬盘&lt;/h3&gt;
&lt;h2 id=&#34;外设与cpu主存的互联&#34;&gt;外设与CPU、主存的互联&lt;/h2&gt;
&lt;h3 id=&#34;总线概述&#34;&gt;总线概述&lt;/h3&gt;
&lt;p&gt;计算机内数据传输的公共路径，用于实现两个或两个以上部件之间的信息交换。&lt;/p&gt;
&lt;p&gt;通常由一组数据线、一组控制线和一组地址线组成。有些总线没有单独的地址线，地址信息通过数据线来传送，这种行为称为数据线和地址线复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总线宽度 总线中数据线的条数&lt;/li&gt;
&lt;li&gt;总线工作频率&lt;/li&gt;
&lt;li&gt;总线带宽 单位时间最多可传递的数据量
$B=W*F/N$&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;W 总线宽度&lt;/li&gt;
&lt;li&gt;F 总线的时钟频率&lt;/li&gt;
&lt;li&gt;N 完成一次数据传送所用的时钟周期数&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;总线的寻址能力 地址线位数所确定的可寻址空间的大小&lt;/li&gt;
&lt;li&gt;总线定时方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;同步&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;半同步&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;总线传送方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;非突发 先传地址，再传数据&lt;/li&gt;
&lt;li&gt;突发 先给出首地址，连续传送数据块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在总线宽度和总线时钟频率相同的情况下，突发方式数据传输更快。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;总线负载能力 总线的负载一般指总线上扩展槽的个数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基于总线的互连结构&#34;&gt;基于总线的互连结构&lt;/h3&gt;
&lt;h2 id=&#34;io接口&#34;&gt;I/O接口&lt;/h2&gt;
&lt;p&gt;解决外设与主机之间同步与协调、工作速度的匹配和数据格式的转换等问题。&lt;/p&gt;
&lt;h3 id=&#34;io接口的功能&#34;&gt;I/O接口的功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数据缓冲&lt;/li&gt;
&lt;li&gt;错误或状态检测&lt;/li&gt;
&lt;li&gt;控制和定时&lt;/li&gt;
&lt;li&gt;数据格式转换&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;io接口的通用结构&#34;&gt;I/O接口的通用结构&lt;/h3&gt;
&lt;h3 id=&#34;io端口及其编址&#34;&gt;I/O端口及其编址&lt;/h3&gt;
&lt;h2 id=&#34;io数据传送控制方式&#34;&gt;I/O数据传送控制方式&lt;/h2&gt;
&lt;h3 id=&#34;程序直接控制io方式&#34;&gt;程序直接控制I/O方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;无条件传送方式 适用于简单外设&lt;/li&gt;
&lt;li&gt;条件传送方式 适用于自身能独立启动I/O的设备&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;定时查询&lt;/li&gt;
&lt;li&gt;独占查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序中新io方式&#34;&gt;程序中新I/O方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;中断的概念&lt;/li&gt;
&lt;li&gt;中断系统的基本职能和结构&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;及时记录各种中断请求信号&lt;/li&gt;
&lt;li&gt;自动响应中断请求&lt;/li&gt;
&lt;li&gt;自动判优&lt;/li&gt;
&lt;li&gt;保护被中断程序的断点和现场&lt;/li&gt;
&lt;li&gt;中断屏蔽&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;中断过程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;io子系统概述&#34;&gt;I/O子系统概述&lt;/h2&gt;
&lt;h2 id=&#34;内核空间io软件&#34;&gt;内核空间I/O软件&lt;/h2&gt;
&lt;h3 id=&#34;与设备无关的io软件&#34;&gt;与设备无关的I/O软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;设备驱动程序统一接口&lt;/li&gt;
&lt;li&gt;缓冲区处理&lt;/li&gt;
&lt;li&gt;错误报告&lt;/li&gt;
&lt;li&gt;打开和关闭文件&lt;/li&gt;
&lt;li&gt;逻辑块大小处理&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;设备驱动程序&#34;&gt;设备驱动程序&lt;/h3&gt;
&lt;h3 id=&#34;中断服务程序&#34;&gt;中断服务程序&lt;/h3&gt;
&lt;h1 id=&#34;并行处理系统&#34;&gt;并行处理系统&lt;/h1&gt;
&lt;p&gt;通过采用多个功能部件或多个处理器核或多个CPU或多台计算机的互连，使得一个系统中可以同时进行多条指令或多个线程或多个任务的处理，从而实现计算速度和计算能力的大幅提升。&lt;/p&gt;
&lt;h2 id=&#34;并行处理系统概述&#34;&gt;并行处理系统概述&lt;/h2&gt;
&lt;h3 id=&#34;并行处理的主要技术性问题&#34;&gt;并行处理的主要技术性问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;互连&lt;/li&gt;
&lt;li&gt;数据一致性&lt;/li&gt;
&lt;li&gt;同步控制&lt;/li&gt;
&lt;li&gt;任务划分&lt;/li&gt;
&lt;li&gt;并行程序设计&lt;/li&gt;
&lt;li&gt;资源调度和管理&lt;/li&gt;
&lt;li&gt;容错性和安全性&lt;/li&gt;
&lt;li&gt;性能分析与评估&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并行处理系统的分类&#34;&gt;并行处理系统的分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Flynn分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;单指令流单数据流结构&lt;/li&gt;
&lt;li&gt;单指令流多数据流结构&lt;/li&gt;
&lt;li&gt;多指令流单数据流结构&lt;/li&gt;
&lt;li&gt;多指令流多数据流结构&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按地址空间的访问方式分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;多计算机系统 具有多个私有地址空间的并行处理系统&lt;/li&gt;
&lt;li&gt;多处理器系统 共享的单一地址空间的并行处理器系统&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按存储访问时间是否一致划分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一致性内存访问结构&lt;/li&gt;
&lt;li&gt;非一致性内存访问结构&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;按处理器单元的位置及其互连方式划分&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;多核芯片 一个CPU芯片中包含多个处理单元，每个处理单元称为一个 &lt;strong&gt;核&lt;/strong&gt;，所有核可能共享一个LLC，并共享主存储器&lt;/li&gt;
&lt;li&gt;众核芯片 一个面向三维图形、视频和可视化处理的GPU芯片中，包含多达几百个的简单核&lt;/li&gt;
&lt;li&gt;对称多处理器 多个相同类型的GPU通过总线互连，并以相同地位共享系统的所有资源&lt;/li&gt;
&lt;li&gt;大规模并行处理机 以专用内联网络连接数量众多的处理单元而构成的一种并行计算系统&lt;/li&gt;
&lt;li&gt;集群 通过高性能网卡将若干个普通PC或SMP服务器或工作站连接而成的并行处理系统&lt;/li&gt;
&lt;li&gt;网格 用因特网等广域网连接起来的远距离分布的一组异构计算机系统构成的分布式并行处理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多处理器系统&#34;&gt;多处理器系统&lt;/h2&gt;
&lt;h3 id=&#34;uma多处理器系统&#34;&gt;UMA多处理器系统&lt;/h3&gt;
&lt;p&gt;每个处理器对存储单元的访问时间是一致的&lt;/p&gt;
&lt;h3 id=&#34;numa多处理器系统&#34;&gt;NUMA多处理器系统&lt;/h3&gt;
&lt;h3 id=&#34;多处理器系统中的互连网络&#34;&gt;多处理器系统中的互连网络&lt;/h3&gt;
&lt;h3 id=&#34;片级多处理器和多线程技术&#34;&gt;片级多处理器和多线程技术&lt;/h3&gt;
&lt;h2 id=&#34;多计算机系统&#34;&gt;多计算机系统&lt;/h2&gt;
&lt;h3 id=&#34;集群多计算机系统&#34;&gt;集群多计算机系统&lt;/h3&gt;
&lt;h2 id=&#34;向量处理机和simd技术&#34;&gt;向量处理机和SIMD技术&lt;/h2&gt;
&lt;h3 id=&#34;向量处理机&#34;&gt;向量处理机&lt;/h3&gt;
&lt;h3 id=&#34;intel中的simd技术&#34;&gt;Intel中的SIMD技术&lt;/h3&gt;
&lt;h3 id=&#34;gpu架构&#34;&gt;GPU架构&lt;/h3&gt;
&lt;h2 id=&#34;并行处理编程模式简介&#34;&gt;并行处理编程模式简介&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;共享存储变量方式&lt;/li&gt;
&lt;li&gt;消息传递方式&lt;/li&gt;
&lt;li&gt;MapReduce并行程序设计方式&lt;/li&gt;
&lt;li&gt;CUDA并行程序设计方式&lt;/li&gt;
&lt;/ol&gt;
- https://ntutn.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>数据结构 栈应用 1 括号匹配</title>
        <link>https://ntutn.top/posts/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</link>
        <pubDate>Thu, 25 Apr 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/ -&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;大概是一道栈的应用的水题吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入一行符号,以&lt;code&gt;#&lt;/code&gt;结束，判断其中的括号是否匹配。
遇到左括号入栈，遇到右括号出栈。如果字符串结束栈不空，输出栈内左括号对应右括号。&lt;/p&gt;
&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;用栈实现：输入一行符号,以#结束，判断其中的括号是否匹配。括号包括：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ } 、 [ ] 、 ( )、  &amp;lt; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果匹配，输出 &lt;code&gt;right&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果不匹配，给出错误提示。包括：&lt;/p&gt;
&lt;p&gt;第几个符号处理时出现错误；哪几个符号失配等&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;遇到左括号入栈，遇到右括号出栈。如果字符串结束栈不空，输出栈内左括号对应右括号。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有一遍过，因为题目中没说如果出错就不再继续处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;相关&#34;&gt;相关&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈：顺序表，只允许在一端输入输出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline(cin,str);&lt;/code&gt;可输入整行，支持空格。&lt;/li&gt;
&lt;li&gt;如果用数组实现栈，则其存储空间必须是一次性申请得到的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;指定初始&lt;code&gt;maxsize=1&lt;/code&gt;是我某种程度上的强迫症，反正这题时间限制很宽松。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;mystack&lt;/span&gt;{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *data;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxsize;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; top;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    mystack(){
        maxsize=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        data=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[maxsize];
        top=-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;isEmpty&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; top==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getTop&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top&amp;gt;-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; data[top];
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;pop&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top&amp;gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;){
            top--;
        }
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;expand&lt;/span&gt;(){
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*tmp=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[maxsize*&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;];
        strncpy(tmp,data,maxsize);
        maxsize*=&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;[] data;
        data=tmp;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;==maxsize){
            expand();
        }
        data[++top]=x;
    }
    ~mystack(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;[] data;
    }
};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getPar&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(x){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;isKH&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(x){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    string tmp;
    getline(cin,tmp);
    mystack*stk=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; mystack();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; erred=&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;tmp.size();i++){
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x=tmp.at(i);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(x==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!stk-&amp;gt;isEmpty()){
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;loss of right character &amp;#34;&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(!stk-&amp;gt;isEmpty()){
                    cout&amp;lt;&amp;lt;getPar(stk-&amp;gt;getTop());
                    stk-&amp;gt;pop();
                }
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#228b22&#34;&gt;//erred=true;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!erred){
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(isKH(x)==&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
            stk-&amp;gt;push(x);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(isKH(x)==&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(getPar(stk-&amp;gt;getTop())==x){
                stk-&amp;gt;pop();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;{
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;i+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; character &amp;#39;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#39; is wrong.&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#228b22&#34;&gt;//erred=true;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
            }
        }
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;//cout &amp;lt;&amp;lt; &amp;#34;Hello world!&amp;#34; &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>数据结构 栈应用2 表达式求值</title>
        <link>https://ntutn.top/posts/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</link>
        <pubDate>Thu, 25 Apr 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/ -&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;表达式求值是程序设计语言编译中的一个最基本问题，它的实现是栈应用的一个典型例子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;表达式求值是进行数据处理的最基本操作。请编写程序完成一个简单算术表达式的求值。要求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运算符包括：&lt;code&gt;+、-、*、-、^(乘方)、括号&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运算量为数值常量，根据自己的能力可以对运算量做不同的约束，例如1位整数、多位整数、实数等（会有不同的测试用例）；&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;输入：一行，即表达式，以“=”结束。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;5*(8-3)+6/5=
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;输出：一行，即表达式的值。结果值为整数时输出为整数，如果有小数时保留5位小数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;26.20000
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;问题与分析&#34;&gt;问题与分析&lt;/h2&gt;
&lt;h3 id=&#34;栈&#34;&gt;栈&lt;/h3&gt;
&lt;p&gt;栈是特殊的线性表，其一端固定，只允许在另一端插入或删除。其特性是“先进后出”。&lt;/p&gt;
&lt;h3 id=&#34;表达式的书写形式&#34;&gt;表达式的书写形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前缀式 &lt;code&gt;+ × a b × - c / d e f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中缀式 &lt;code&gt;a × b + (c - d / e) × f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后缀式 &lt;code&gt;a b × c d e / - f × +&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前缀式的运算规则&#34;&gt;前缀式的运算规则&lt;/h4&gt;
&lt;p&gt;连续出现的两个操作数和在它们之前且紧靠它们的运算符构成一个最小表达式;&lt;/p&gt;
&lt;p&gt;运算符出现的顺序与运算顺序相反&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中缀式与后缀式略。其中中缀式是我们最常书写的形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;后缀式的运算&#34;&gt;后缀式的运算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是操作数，入栈&lt;/li&gt;
&lt;li&gt;是符号，取出两个操作数运算后入栈&lt;/li&gt;
&lt;li&gt;表达式处理完毕后栈内唯一元素即运算结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中缀式转换为后缀式&#34;&gt;中缀式转换为后缀式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://ntutn.top/res/img/stack1.png&#34; alt=&#34;优先级顺序处理&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ntutn.top/res/img/stack2.png&#34; alt=&#34;表达式求值流程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;直接对中缀式求值&#34;&gt;直接对中缀式求值&lt;/h3&gt;
&lt;p&gt;类似中缀式转后缀式的过程，把运算量的输出改为“入OPND栈”，把运算符的“输出”改为“计算”：根据运算符，出栈需要的运算量，计算值，结果作为运算量再入栈。其他不需要变化。&lt;/p&gt;
&lt;h3 id=&#34;遇到的其他问题&#34;&gt;遇到的其他问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用float交这道题会出错，精度不够，要用double。&lt;/li&gt;
&lt;li&gt;判断有没有小数的方法：截断后与原值相减绝对值在误差允许范围内。不能用相等，因为浮点数的存储性质，直接比较相等很可能出错。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;cin&lt;/code&gt;的&lt;code&gt;setiosflags&lt;/code&gt;和&lt;code&gt;setprecision&lt;/code&gt;格式化提交也会有问题，因为这样竟然是进行四舍五入的……&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;T&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;mystack&lt;/span&gt;{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    T *data;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxsize;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; top;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    mystack(){
        maxsize=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
        data=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; T[maxsize];
        top=-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;isEmpty&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; top==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    T &lt;span style=&#34;color:#008b45&#34;&gt;getTop&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top&amp;gt;-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; data[top];
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;pop&lt;/span&gt;(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top&amp;gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;){
            top--;
        }
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;expand&lt;/span&gt;(){
        T*tmp=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; T[maxsize*&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;];
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;maxsize;i++){
            tmp[i]=data[i];
        }
        maxsize*=&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;[] data;
        data=tmp;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;push&lt;/span&gt;(T x){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(top+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;==maxsize){
            expand();
        }
        data[++top]=x;
    }
    ~mystack(){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;[] data;
    }
};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getid&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x){
    string str=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;+-*/^()#&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;str.size();i++){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(x==str.at(i)){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
}
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;* 栈外符号大于栈内，返回1，小于返回-1，其他返回0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;* @param ch1 栈内的符号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;* @param ch2 栈外的符号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpp&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; ch1,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; ch2){
    string chart[]={
        &lt;span style=&#34;color:#228b22&#34;&gt;//+-*/^()#
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//+
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//-
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;///
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//^
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;=X&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//(
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;X&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#228b22&#34;&gt;//)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;X=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//#
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        };
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(chart[ch1].at(ch2)==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(chart[ch1].at(ch2)==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Type&lt;/span&gt;&amp;gt;
Type stringToNum(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; string&amp;amp; str)
{
	istringstream &lt;span style=&#34;color:#008b45&#34;&gt;iss&lt;/span&gt;(str);
	Type num;
	iss &amp;gt;&amp;gt; num;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; num;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cal&lt;/span&gt;(string str){
    mystack&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;&amp;gt;* OPTR=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; mystack&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;&amp;gt;();
    mystack&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;&amp;gt;* OPND=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; mystack&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;&amp;gt;();
    OPTR-&amp;gt;push(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;);
    string buf=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;//数值缓冲，使数值作为整体处理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; res;&lt;span style=&#34;color:#228b22&#34;&gt;//返回结果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;i&amp;lt;str.size();i++){
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x=str.at(i);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(getid(x)==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;){
            buf+=x;
        }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;{
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(buf.size()&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;){
                OPND-&amp;gt;push(stringToNum&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;&amp;gt;(buf));
                buf=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(cmpp(getid(OPTR-&amp;gt;getTop()),getid(x))){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
                OPTR-&amp;gt;push(x);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#228b22&#34;&gt;//计算
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; tmp1,tmp2,tmp;
                tmp2=OPND-&amp;gt;getTop();
                OPND-&amp;gt;pop();
                tmp1=OPND-&amp;gt;getTop();
                OPND-&amp;gt;pop();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(OPTR-&amp;gt;getTop()){
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;:
                    tmp=tmp1+tmp2;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;:
                    tmp=tmp1-tmp2;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;:
                    tmp=tmp1*tmp2;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;:
                    tmp=tmp1/tmp2;
                    &lt;span style=&#34;color:#228b22&#34;&gt;//可以进行除数为0的判断
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt;:
                    tmp=pow(tmp1,tmp2);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                }
                OPND-&amp;gt;push(tmp);
                OPTR-&amp;gt;pop();
                i--;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
                OPTR-&amp;gt;pop();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
            }
        }
    }
    res=OPND-&amp;gt;getTop();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; OPTR;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; OPND;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; res;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    string str;
    getline(cin,str);
    str=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;+str;
    str.erase(str.size()-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    str+=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; res=cal(str);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(abs(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;(res))-res)&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;0.000001&lt;/span&gt;){
        cout&amp;lt;&amp;lt;res&amp;lt;&amp;lt;endl;
    }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;{
        cout&amp;lt;&amp;lt;setiosflags(ios::fixed)&amp;lt;&amp;lt;setprecision(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1e5&lt;/span&gt;*res)/&lt;span style=&#34;color:#b452cd&#34;&gt;1e5&lt;/span&gt;&amp;lt;&amp;lt;endl;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>图书管理系统</title>
        <link>https://ntutn.top/posts/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Sat, 13 Apr 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ -&lt;p&gt;翻出了以前写的C++作业，图书管理系统，虽然挺简单的，但留下纪念下吧。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CUser&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; code;      &lt;span style=&#34;color:#228b22&#34;&gt;//表示用户编号；
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];  &lt;span style=&#34;color:#228b22&#34;&gt;//表示用户姓名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    CUser()
    {
        ;
    };   &lt;span style=&#34;color:#228b22&#34;&gt;// 默认构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CUser(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; na[])
    {
        code=id;
        strcpy(name,na);
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//构造函数，初始化用户信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setcode&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n)
    {
        code=n;
    };      &lt;span style=&#34;color:#228b22&#34;&gt;//用来设置用户编号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getcode&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; code;
    };          &lt;span style=&#34;color:#228b22&#34;&gt;//用来获取用户编号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setname&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; na[])
    {
        strcpy(name,na);
    };  &lt;span style=&#34;color:#228b22&#34;&gt;//用来设置用户姓名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;* &lt;span style=&#34;color:#008b45&#34;&gt;getname&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; name;
    };        &lt;span style=&#34;color:#228b22&#34;&gt;//用来获取用户姓名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;()
    {
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;code&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;姓名：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;name&amp;lt;&amp;lt;endl;
    };           &lt;span style=&#34;color:#228b22&#34;&gt;//用来显示用户的基本信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CBook&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; code;              &lt;span style=&#34;color:#228b22&#34;&gt;//图书编号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];      &lt;span style=&#34;color:#228b22&#34;&gt;//图书名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Is_Stock;          &lt;span style=&#34;color:#228b22&#34;&gt;//true为在架，false为借出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Is_Existing;       &lt;span style=&#34;color:#228b22&#34;&gt;//true为存在, false为删除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    CBook()
    {
        ;
    }; &lt;span style=&#34;color:#228b22&#34;&gt;//默认构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CBook(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; no,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; na[])
    {
        code=no;
        strcpy(name,na);
        Is_Stock=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
        Is_Existing=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    };    &lt;span style=&#34;color:#228b22&#34;&gt;//构造函数，初始化图书信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setcode&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n)
    {
        code=n;
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//设置图书编号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getcode&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; code;
    };    &lt;span style=&#34;color:#228b22&#34;&gt;//获取图书编号
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setname&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; na[])
    {
        strcpy(name,na);
    };    &lt;span style=&#34;color:#228b22&#34;&gt;//设置图书名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;* &lt;span style=&#34;color:#008b45&#34;&gt;getname&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; name;
    };  &lt;span style=&#34;color:#228b22&#34;&gt;//获取图书名称
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;  &lt;span style=&#34;color:#008b45&#34;&gt;get_Stock&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Is_Stock;
    };  &lt;span style=&#34;color:#228b22&#34;&gt;//获取图书是否在库信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;set_Stock&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isstock)
    {
        Is_Stock=isstock;
    };&lt;span style=&#34;color:#228b22&#34;&gt;// 设置图书是否在库信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;  &lt;span style=&#34;color:#008b45&#34;&gt;get_Existing&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Is_Existing;
    };&lt;span style=&#34;color:#228b22&#34;&gt;//获取存在标志
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;set_Existing&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isex)
    {
        Is_Existing=isex;
    };&lt;span style=&#34;color:#228b22&#34;&gt;//设置存在标志
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CReader&lt;/span&gt;:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CUser
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Is_Existing;  &lt;span style=&#34;color:#228b22&#34;&gt;//true存在，false删除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Is_Borrowing;  &lt;span style=&#34;color:#228b22&#34;&gt;//true借过书，false没有借书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CBook brbook;     &lt;span style=&#34;color:#228b22&#34;&gt;//表示读者所借的图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    CReader()
    {
        CUser();
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//构造函数，初始化读者信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CReader(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; na[])
    {
        CUser(id,na);
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//构造函数，初始化读者信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;get_Existing&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Is_Existing;
    };        &lt;span style=&#34;color:#228b22&#34;&gt;//用来获取删除标志
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;set_Existing&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isex)
    {
        Is_Existing=isex;
    };     &lt;span style=&#34;color:#228b22&#34;&gt;//用来设置删除标志
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;get_Borrowing&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Is_Borrowing;
    };      &lt;span style=&#34;color:#228b22&#34;&gt;//用来获取读者借阅情况
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;set_Borrowing&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; isbo)
    {
        Is_Borrowing=isbo;
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//用来设置读者借阅情况
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setbrbook&lt;/span&gt;(CBook bt)
    {
        brbook=bt;
        Is_Borrowing=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    };  &lt;span style=&#34;color:#228b22&#34;&gt;//用来记录读者结束信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CBook &lt;span style=&#34;color:#008b45&#34;&gt;getbrbook&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; brbook;
    };     &lt;span style=&#34;color:#228b22&#34;&gt;//用来获取读者结束信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;()
    {
        CUser::show();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(Is_Borrowing)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;当前借书：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;brbook.getname()&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;当前用户没有借书！&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
    };               &lt;span style=&#34;color:#228b22&#34;&gt;//重写基类成员，显示读者的基本信息情况和借书情况
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CReaderManager&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    CReader rdarray[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];&lt;span style=&#34;color:#228b22&#34;&gt;// 存储读者信息的集合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; top;      &lt;span style=&#34;color:#228b22&#34;&gt;//当前数组中存储的读者数量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    CReaderManager()
    {
        top=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    };  &lt;span style=&#34;color:#228b22&#34;&gt;// 构造函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    ~CReaderManager()
    {
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//析构函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addreaders&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_no;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入读者的相关信息：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入读者的名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入读者的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp_no;
        CReader tmp_reader(tmp_no,tmp);
        rdarray[top]=tmp_reader;
        top++;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;读者添加成功。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
    };          &lt;span style=&#34;color:#228b22&#34;&gt;//添加读者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findreaders&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; suffix)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(rdarray[i].getcode()==suffix)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;&lt;span style=&#34;color:#228b22&#34;&gt;//返回在库中的位置。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;//未找到
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    };     &lt;span style=&#34;color:#228b22&#34;&gt;//查找读者，这个函数用于借书还书操作。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findreaders&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入需要查找的用户的名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strcmp(rdarray[i].getname(),tmp)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    };            &lt;span style=&#34;color:#228b22&#34;&gt;//查找读者，这个函数用于读者维护操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;editreaders&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; code;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num=findreaders();
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_ex;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(num==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您要的用户没有找到。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户姓名：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;rdarray[num].getname()&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;rdarray[num].getcode()&amp;lt;&amp;lt;endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(rdarray[num].get_Borrowing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户借了&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;rdarray[num].getbrbook().getname()&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户没有借任何书。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(rdarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户状态正常。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户已经被删除。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入修改后的姓名：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        rdarray[num].setname(tmp);
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入修改后的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;code;
        rdarray[num].setcode(code);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!rdarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户被标记为删除状态，是否恢复？(1恢复/0不恢复)&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            cin&amp;gt;&amp;gt;tmp_ex;
            rdarray[num].set_Existing(tmp_ex);
        }
    };          &lt;span style=&#34;color:#228b22&#34;&gt;//编辑读者信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;delreaders&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_code;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入要删除的用户的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp_code;
        num=findreaders(tmp_code);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(num==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户未找到，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!rdarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户已经被删除，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!rdarray[num].get_Borrowing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户有书未还，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        rdarray[num].set_Existing(&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;);
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户删除完毕。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
    };          &lt;span style=&#34;color:#228b22&#34;&gt;//删除读者，读者如果借书要还书后才能删除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;listreaders&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(rdarray[i].get_Existing())
            {
                cout&amp;lt;&amp;lt;rdarray[i].getcode()&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&amp;lt;&amp;lt;rdarray[i].getname()&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(rdarray[i].get_Borrowing())
                {
                    cout&amp;lt;&amp;lt;rdarray[i].getbrbook().getname();
                }
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
                {
                    cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;未借书&amp;#34;&lt;/span&gt;;
                }
                cout&amp;lt;&amp;lt;endl;
            }
        }
    };           &lt;span style=&#34;color:#228b22&#34;&gt;//显示所有读者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CReader&amp;amp; getreader(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; p)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(p&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;||p&amp;gt;=top)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;下标越界。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            p=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; rdarray[p];
    }
};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CBookManager&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    CBook btarray[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];                   &lt;span style=&#34;color:#228b22&#34;&gt;//图书集合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; top;                         &lt;span style=&#34;color:#228b22&#34;&gt;//当前数组中存储的图书数量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    CBookManager()
    {
        top=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    };
    ~CBookManager()
    {
        ;
    };
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addbooks&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_no;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入图书的相关信息：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入图书的名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入图书的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp_no;
        CBook tmp_book(tmp_no,tmp);
        btarray[top]=tmp_book;
        top++;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书入库成功。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
    };    &lt;span style=&#34;color:#228b22&#34;&gt;//添加图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findbooks&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; suffix)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(btarray[i].getcode()==suffix)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;&lt;span style=&#34;color:#228b22&#34;&gt;//返回图书在书库中的位置。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;//未找到图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    };  &lt;span style=&#34;color:#228b22&#34;&gt;//查找图书，这个函数用于借书还书操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findbooks&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入需要查找的图书的名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strcmp(btarray[i].getname(),tmp)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    };  &lt;span style=&#34;color:#228b22&#34;&gt;//查找图书，用于图书维护操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;editbooks&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;];
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; code;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num=findbooks();
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_ex;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(num==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您要的图书没有找到。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;btarray[num].getname()&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;btarray[num].getcode()&amp;lt;&amp;lt;endl;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(btarray[num].get_Stock())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书在架。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书已经借出。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(btarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书状态正常。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书已经被删除。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        }
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入修改后的名称：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp;
        btarray[num].setname(tmp);
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入修改后的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;code;
        btarray[num].setcode(code);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!btarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书被标记为删除状态，是否恢复？(1恢复/0不恢复)&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            cin&amp;gt;&amp;gt;tmp_ex;
            btarray[num].set_Existing(tmp_ex);
        }
    };     &lt;span style=&#34;color:#228b22&#34;&gt;//编辑图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;delbooks&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_code;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入要删除的图书的编号：&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;tmp_code;
        num=findbooks(tmp_code);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(num==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书未找到，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!btarray[num].get_Existing())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书已经被删除，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!btarray[num].get_Stock())
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书被借出，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        btarray[num].set_Existing(&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;);
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;图书删除完毕。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
    };   &lt;span style=&#34;color:#228b22&#34;&gt;//  删除图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;listbooks&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;top; i++)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(btarray[i].get_Stock()&amp;amp;&amp;amp;btarray[i].get_Existing())
            {
                cout&amp;lt;&amp;lt;btarray[i].getcode()&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&amp;lt;&amp;lt;btarray[i].getname()&amp;lt;&amp;lt;endl;
            }
        }
    } ;  &lt;span style=&#34;color:#228b22&#34;&gt;//显示全部图书
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CBook&amp;amp; getbook(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; p)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(p&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;||p&amp;gt;=top)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;下标越界。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
            p=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; btarray[p];
    }
};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showmenu&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; re=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(re&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;||re&amp;gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;)
    {
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;功能菜单&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.读者管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.借书管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3.还书管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4.图书管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;5.文件存储&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;6.退出&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入对应序号并回车&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;re;
        &lt;span style=&#34;color:#228b22&#34;&gt;//cout&amp;lt;&amp;lt;re;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; re-&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showmenu1&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; re=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(re&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;||re&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;)
    {
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;功能菜单--读者管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.添加读者&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.删除读者&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3.修改读者&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4.查找读者&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入对应序号并回车&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;re;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; re;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showmenu4&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; re=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(re&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;||re&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;)
    {
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;功能菜单--图书管理&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.添加图书&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.删除图书&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3.修改图书&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4.查找图书&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入对应序号并回车&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;re;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; re;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showmenu5&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; re=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(re&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;||re&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)
    {
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;功能菜单--文件存储&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1.读取&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2.保存&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请输入对应序号并回车&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
        cin&amp;gt;&amp;gt;re;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; re;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    CReaderManager cm1;
    CBookManager cb1;
    ofstream file;
    ifstream file2;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; cz=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_us;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_bo;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;)
    {
        cz=showmenu();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(cz)
        {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
            cz=showmenu1();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(cz)
            {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
                cm1.addreaders();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
                cm1.delreaders();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;:
                cm1.editreaders();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:
                cm1.findreaders();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
            tmp_bo=cb1.findbooks();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_bo==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您要借的书没有找到。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!cb1.getbook(tmp_bo).get_Existing())
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您要借的书已经被删除，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!cb1.getbook(tmp_bo).get_Stock())
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您要借的书已经被借出，操作失败。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            tmp_us=cm1.findreaders();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_bo==-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您使用的身份无效。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!cm1.getreader(tmp_us).get_Existing())
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;您的账户已经被管理员删除。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(cm1.getreader((tmp_us)).get_Borrowing())
            {
                cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;请把您借的书还了再借。&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            cm1.getreader(tmp_us).set_Borrowing(&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;);
            cm1.getreader(tmp_us).setbrbook(cb1.getbook(tmp_bo));
            cb1.getbook(tmp_bo).set_Stock(&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;:
            cm1.editreaders();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:
            cz=showmenu4();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(cz)
            {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
                cb1.addbooks();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
                cb1.delbooks();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;:
                cb1.editbooks();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:
                cb1.findbooks();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;:
            cz=showmenu5();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(cz)
            {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
                file2.open(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cb1.dat&amp;#34;&lt;/span&gt;,ios::binary);
                &lt;span style=&#34;color:#228b22&#34;&gt;//二进制打开，缺省为文本，ios::out,ios::in,文本输入输出用&amp;lt;&amp;lt;,&amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file2.read((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)&amp;amp;cb1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(cb1));
                &lt;span style=&#34;color:#228b22&#34;&gt;///int num=file2.gcount(); //获取读到文件的大小
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file2.close();
                file2.open(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cm1.dat&amp;#34;&lt;/span&gt;,ios::binary);
                &lt;span style=&#34;color:#228b22&#34;&gt;//二进制打开，缺省为文本，ios::out,ios::in,文本输入输出用&amp;lt;&amp;lt;,&amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file2.read((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)&amp;amp;cm1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(cm1));
                &lt;span style=&#34;color:#228b22&#34;&gt;///int num=file2.gcount(); //获取读到文件的大小
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file2.close();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
                file.open(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cb1.dat&amp;#34;&lt;/span&gt;,ios::binary);
                &lt;span style=&#34;color:#228b22&#34;&gt;//缓存的类型是 unsigned char *，需要类型转换
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file.write((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)&amp;amp;cb1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(cb1));  &lt;span style=&#34;color:#228b22&#34;&gt;//winServer为类对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file.close();
                file.open(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cm1.dat&amp;#34;&lt;/span&gt;,ios::binary);
                &lt;span style=&#34;color:#228b22&#34;&gt;//缓存的类型是 unsigned char *，需要类型转换
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file.write((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *)&amp;amp;cm1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(cm1));  &lt;span style=&#34;color:#228b22&#34;&gt;//winServer为类对象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                file.close();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;:
            exit(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>学生管理系统</title>
        <link>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Sat, 13 Apr 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ -&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;翻出了以前C语言C实验的大作业，当时搞了好多奇技淫巧，最终拿到99分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;学生成绩管理系统v6.0是由软件工程1702刘海鑫设计的一款用于学生成绩管理的软件。&lt;/p&gt;
&lt;h2 id=&#34;文件列表&#34;&gt;文件列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stuv6.0.exe	主体程序，用于实现整体功能。&lt;/li&gt;
&lt;li&gt;main.dat	程序的数据文件，用于存储学生信息。&lt;/li&gt;
&lt;li&gt;goodbye.bmp	程序退出时加载的图片。&lt;/li&gt;
&lt;li&gt;desktop.ini	修改程序所在文件夹的图标。&lt;/li&gt;
&lt;li&gt;consoletest.exe	编译的au3程序，用于辅助输入中文。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-autoit&#34; data-lang=&#34;autoit&#34;&gt;$re=InputBox(&amp;quot;Input&amp;quot;,&amp;quot;You can input your massage now.(支持中文)&amp;quot;)
ConsoleWrite($re)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;code.dat	密码存储文件。该文件存储的是xor算法加密的账号密码。&lt;/li&gt;
&lt;li&gt;black.bmp	一张纯黑的图片，用于清除控制台加载图片的痕迹。2018年1月20日使用了image /d清除图片，本文件不再使用。&lt;/li&gt;
&lt;li&gt;background.bmp	程序启动时加载的图片。&lt;/li&gt;
&lt;li&gt;about.rtf	程序的说明文档。&lt;/li&gt;
&lt;li&gt;scaned.txt	存储用户输入的临时文件，一般会自动清除。&lt;/li&gt;
&lt;li&gt;subjects.dat	存储科目的名称，每行一个，最多允许50个，可用记事本直接打开编辑。&lt;/li&gt;
&lt;li&gt;image.exe	外部程序，用于加载图片。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;使用说明&#34;&gt;使用说明&lt;/h2&gt;
&lt;p&gt;双击&lt;code&gt;stuv6.0.exe&lt;/code&gt;，程序启动。&lt;/p&gt;
&lt;p&gt;待启动图片显示过后，出现密码输入框，回车确认输入。&lt;/p&gt;
&lt;p&gt;默认账号：&lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认密码：&lt;code&gt;admin888&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入密码时如果输入~符号，将弹出一个信息框提示输入。这是为了便于输入中文和特殊符号。&lt;/p&gt;
&lt;p&gt;本程序的密码存储是xor运算的结果，仅用于比对密码是否正确。&lt;/p&gt;
&lt;p&gt;接下来进入主菜单。菜单使用黄色为底色，红色标定选中项。你可以按上下键选择，或直接按项目对应数字，回车确认。&lt;/p&gt;
&lt;h2 id=&#34;开发日志&#34;&gt;开发日志&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2018年3月10日，加入了控制台窗口大小控制的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改了exe文件的图标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改用外部程序image.exe加载图片，并修改gotoxy函数的使用，成功使代码兼容了gun gcc系列编译器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试WIN7运行效果，图片加载错位，无法全屏，其他功能不受影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在科目分析功能加入分层成绩展示，至此，程序主体开发完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入查找功能，查找方式为遍历，依据为id或姓名。
同理，加入按id排序、按姓名的字典顺序排序。
数据排序功能，选择后弹出二级菜单，进行升序排序或降序排序。
排序的结果不会保存。
排序后将自动展示排序结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入了科目分析，统计各科总分平均分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除学生功能准备完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将修改密码部分移出主函数，便于管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学生信息展示准备完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加学生功能准备完成，界面比较简陋。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现有点控制台用BitBlt画的图不会自动清除，于是找了一张全黑的图片将其覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现在WIN7等系统控制台加载图片会出现错位，暂时不打算解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始准备程序主体功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记事本太单调，决定将about改为写字板，内容为本文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现了atexit函数，于是顺理成章地加入了程序退出图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到一个取巧的方法。控制台也是一个窗口，获取了他的句柄就可以在上面用BitBlt直接画图了吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;决定加入加载启动退出图片功能。可是Windows环境下C语言直接调用GDI常常导致系统蓝屏。虽然直接用其他语言就可以轻松写出，但总是有点不甘心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入了about，system(&amp;ldquo;notepad.exe about.txt&amp;rdquo;)实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入了密码修改功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现并修正了“窗口”覆盖时的一个BUG。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成功实现菜单功能！上下键控制菜单移动，回车选择目标。亦可直接按选项对应数字移动菜单项。函数原型：int showMenu(char txt[][50],int n,int selected,int X,int Y)
txt是各菜单的文本。
n是菜单项总数目。
selected为当前选中项。
X,Y为菜单加载的坐标。
函数返回值为用户最终选定项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现getch对中文兼容不好。为了方便输入中文密码，用AU3写了控制台程序：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在getch检测到用户输入~后即打开该程序输入数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;制作了密码登录界面，用户名用fgets扫描，password用getch检测。getch检测到后输出*。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用前面的函数实现了伪信息框（图左），虽然和系统的信息框（图右）没得比，但在控制台下做出这个水平我还是知足了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UE的控制台与程序兼容性实在不行，改用code blocks作为IDE，编译器使用gcc for windows。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过gotoxy和严格的坐标计算实现了绘制伪窗口功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现了函数gotoxy(x,y)，可以控制光标输出位置，但好像移植性不好，比如GUN系列编译器就是另一个函数。决定还是使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终暂时选定XOR算法，代码：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备用户登录验证方案，由经验打算采用XOR算法或MD5算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到了合理的颜色控制方案，但似乎并不是所有控制台都能使用（UltraEdit DOS Command就不能用），不过暂时就这样了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;决定将界面制作得精美一些。查找资料。找到DOS命令color可以改控制台颜色方案，但只能同时更改整个控制台的颜色，怎么看都不舒服，放弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到DOS指令title可以直接修改控制台标题。控制台标题改为“学生成绩管理系统V6.0”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选定课题为学生成绩管理系统，总体难度不大，毕竟书上范例改一改就是标准答案了。但我决定还是挑战一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ntutn.top/res/img/stu1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ntutn.top/res/img/stu2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ntutn.top/res/img/stu3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//#include &amp;lt;conio.h&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;math.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;miniMessage&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*msg);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showExitPic&lt;/span&gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;typedef HWND (WINAPI *PROCGETCONSOLEWINDOW)();//图片加载
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;PROCGETCONSOLEWINDOW GetConsoleWindow;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;PrintChar&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; *ch,UINT count,UINT x,UINT y)  &lt;span style=&#34;color:#228b22&#34;&gt;//在坐标(x,y)处输出字符串ch,ch里有count个字符
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;{
    HANDLE h=GetStdHandle(STD_OUTPUT_HANDLE);
    COORD pos;
    ULONG unuse;
    pos.X=x;
    pos.Y=y;
    CONSOLE_SCREEN_BUFFER_INFO bInfo; &lt;span style=&#34;color:#228b22&#34;&gt;// 窗口缓冲区信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    GetConsoleScreenBufferInfo(h, &amp;amp;bInfo );
    WriteConsoleOutputCharacterA(h,ch,count,pos,&amp;amp;unuse);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;color&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;short&lt;/span&gt; x) &lt;span style=&#34;color:#228b22&#34;&gt;//自定义函根据参数改变颜色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(x&amp;gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x&amp;lt;=&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;)&lt;span style=&#34;color:#228b22&#34;&gt;//参数在0-15的范围颜色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), x);    &lt;span style=&#34;color:#228b22&#34;&gt;//只有一个参数，改变字体颜色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//默认的颜色白色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    颜色函数SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),前景色 | 背景色 | 前景加强 | 背景加强);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        前景色：数字0-15 或 FOREGROUND_XXX 表示  （其中XXX可用BLUE、RED、GREEN表示）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        前景加强：数字8 或 FOREGROUND_INTENSITY 表示
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        背景色：数字16 32 64 或 BACKGROUND_XXX 三种颜色表示
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        背景加强： 数字128 或 BACKGROUND_INTENSITY 表示
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    主要应用：改变指定区域字体与背景的颜色
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    前景颜色对应值：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　0=黑色                8=灰色　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;      　1=蓝色                9=淡蓝色        十六进制        　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　2=绿色                10=淡绿色       0xa        　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　3=湖蓝色              11=淡浅绿色     0xb　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　4=红色                12=淡红色       0xc　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　5=紫色                13=淡紫色       0xd        　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　6=黄色                14=淡黄色       0xe        　　
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　7=白色                15=亮白色       0xf
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    　　也可以把这些值设置成常量。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    */&lt;/span&gt;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;gotoxy&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; x,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; y)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//COORD是Windows API中定义的一种结构，表示一个字符在控制台屏幕上的坐标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    COORD cor;
    &lt;span style=&#34;color:#228b22&#34;&gt;//句柄
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    HANDLE hout;
    &lt;span style=&#34;color:#228b22&#34;&gt;//设定我们要定位到的坐标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    cor.X = x;
    cor.Y = y;
    &lt;span style=&#34;color:#228b22&#34;&gt;//GetStdHandle函数获取一个指向特定标准设备的句柄，包括标准输入，标准输出和标准错误。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//STD_OUTPUT_HANDLE正是代表标准输出（也就是显示屏）的宏
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    hout = GetStdHandle(STD_OUTPUT_HANDLE);
    &lt;span style=&#34;color:#228b22&#34;&gt;//SetConsoleCursorPosition函数用于设置控制台光标的位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SetConsoleCursorPosition(hout, cor);
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; sex;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; subjects[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; avg;
} student;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; sub_name[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;][&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;];
student stu_dat[&lt;span style=&#34;color:#b452cd&#34;&gt;10000&lt;/span&gt;];
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; dat_count;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sub_count;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Login&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*c1,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*c2)
{
    FILE*fp;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p1;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p3;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p2;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp;
    fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;code.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
    p1=c1;
    p3=c2;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strlen(c1)&amp;gt;strlen(c2))
    {
        p2=p1;
        p1=p3;
        p3=p2;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; *p3!=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;; )
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p1==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;)
        {
            p1=c1;
        }
        tmp=fgetc(fp);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(((*p1)^(*p3))!=tmp)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        }
        p1++;
        p3++;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strlen(c1)&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;||strlen(c2)&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    fclose(fp);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;savePwd&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*c1,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*c2)
{
    FILE*fp;
    fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;code.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p1=c1;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p2=c2;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p3;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strlen(c1)&amp;gt;strlen(c2))
    {
        p3=p1;
        p1=p2;
        p2=p3;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; *p2!=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;; )
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p1==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;)
        {
            p1=c1;
        }
        fputc((*p1)^(*p2),fp);
        p1++;
        p2++;
    }
    fclose(fp);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;dat_add&lt;/span&gt;(student*s1)
{
    FILE*fp;
    s1-&amp;gt;sum=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;sub_count; i++)
    {
        s1-&amp;gt;sum+=s1-&amp;gt;subjects[i];
    }
    s1-&amp;gt;avg=s1-&amp;gt;sum/=sub_count;
    fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ab&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(fp==&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;);
    }
    fwrite(s1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,fp);
    fclose(fp);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sub_load&lt;/span&gt;()
{
    FILE*fp;
    fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;subjects.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
    sub_count=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;; i++)
    {
        fgets(sub_name[i],&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(sub_name),fp);
        sub_name[i][strlen(sub_name[i])-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strlen(sub_name[i])&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            sub_count++;
        }
    }
    fclose(fp);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sub_print&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;学号&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;姓名&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;性别&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;年龄&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strlen(sub_name[i])==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,sub_name[i]);
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;总分&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;平均分&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;排名&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;dat_load&lt;/span&gt;()
{
    FILE*fp;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i;
    fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main.dat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(fp==&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main.dat is lost!&amp;#34;&lt;/span&gt;);
        exit(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; !feof(fp) ; i++)
    {
        fread(&amp;amp;stu_dat[i],&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,fp);
    }
    fclose(fp);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;dat_show&lt;/span&gt; (student s)
{
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,s.id,s.name,s.sex,s.age);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;sub_count; i++)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,s.subjects[i]);
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,s.sum,s.avg);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showMiniWindow&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*title,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; X,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Y,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; height,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; width)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;width; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;height; i2++)
        {
            gotoxy(X+i,Y+i2);
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
        }
    }
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);
    gotoxy(X,Y);
    putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;);
    gotoxy(X+width-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y);
    putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;);
    gotoxy(X,Y+height-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;);
    gotoxy(X+width-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+height-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;);
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; i&amp;lt;width; i++)
    {
        gotoxy(X+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y);
        putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;);
        gotoxy(X+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+height-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
        putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;);
    }
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; i&amp;lt;height; i++)
    {
        gotoxy(X,Y+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
        putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;);
        gotoxy(X+width-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
        putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;);
        PrintChar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,X+width-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;);
    gotoxy(X+width/&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;-strlen(title)/&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,Y);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,title);
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;);
    gotoxy(X+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;miniLogin&lt;/span&gt; ()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; c1[&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;],c2[&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; ch_tmp;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p=c2;
    FILE*fp;
    showMiniWindow(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;User     ________________&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;password ________________&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;);
    fgets(c1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(c1),stdin);
    c1[strlen(c1)-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        ch_tmp=getch();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(ch_tmp==&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;)
        {
            *p=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(ch_tmp==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;)
        {
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;consoletest.exe&amp;gt;scaned.txt&amp;#34;&lt;/span&gt;);
            fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scaned.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
            fgets(c2,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(c2),fp);
            fclose(fp);
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;del scaned.txt&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            *p=ch_tmp;
            p++;
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(Login(c1,c2))
    {
        miniMessage(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登录成功，欢迎您的使用！&amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        miniMessage(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用户名或密码错误！&amp;#34;&lt;/span&gt;);
        Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
        showExitPic();
        exit(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
    Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;miniMessage&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*msg)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n=strlen(msg);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; width=(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)sqrt(n)+&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; height=n/(width-&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)+&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; X=&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Y=&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;;
    showMiniWindow(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Message&amp;#34;&lt;/span&gt;,X,Y,height,width);
    X++;
    Y++;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;n; i++)
    {
        putchar(msg[i]);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(i%(width-&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            Y++;
            gotoxy(X,Y);
        }
    }
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showMenu&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; txt[][&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;],&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; selected,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; X,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Y)
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxwidth=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_width;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp_press;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;n; i++)
    {
        tmp_width=strlen(txt[i]);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_width&amp;gt;maxwidth)
        {
            maxwidth=tmp_width;
        }
    }
    showMiniWindow(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MENU&amp;#34;&lt;/span&gt;,X,Y,n+&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,maxwidth+&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;n; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(i==selected)
        {
            color(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            color(&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; txt[i][i2]!=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;; i2++)
        {
            gotoxy(X+i2+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,Y+i+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
            putchar(txt[i][i2]);
        }
    }
    color(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;);
    tmp_press=getch();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_press==&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; selected;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_press==&lt;span style=&#34;color:#b452cd&#34;&gt;72&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(selected&amp;gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            selected--;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\a&amp;#39;&lt;/span&gt;);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_press==&lt;span style=&#34;color:#b452cd&#34;&gt;80&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(selected&amp;lt;n-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
        {
            selected++;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\a&amp;#39;&lt;/span&gt;);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(tmp_press-&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;tmp_press-&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&amp;lt;n)
    {
        selected=tmp_press-&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; showMenu(txt,n,selected,X,Y);
}
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;void picLoad(char*path)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HMODULE hKernel32 = GetModuleHandle(&amp;#34;kernel32&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    GetConsoleWindow= (PROCGETCONSOLEWINDOW)GetProcAddress(hKernel32,&amp;#34;GetConsoleWindow&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HWND cmd=GetConsoleWindow();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HDC dc = GetDC(cmd);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HBITMAP hBitmap;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    hBitmap=(HBITMAP)LoadImage            (NULL,path,IMAGE_BITMAP,0,0,LR_LOADFROMFILE|LR_CREATEDIBSECTION);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HDC cmdmem = CreateCompatibleDC(dc);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    SelectObject(cmdmem, hBitmap);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    BitBlt(dc, 0, 0, 1300, 700, cmdmem, 0, 0, SRCCOPY);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    Sleep(3000);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    return ;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;}*/&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;void loadBlack()
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HMODULE hKernel32 = GetModuleHandle(&amp;#34;kernel32&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    GetConsoleWindow= (PROCGETCONSOLEWINDOW)GetProcAddress(hKernel32,&amp;#34;GetConsoleWindow&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HWND cmd=GetConsoleWindow();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HDC dc = GetDC(cmd);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HBITMAP hBitmap;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    hBitmap=(HBITMAP)LoadImage            (NULL,&amp;#34;black.bmp&amp;#34;,IMAGE_BITMAP,0,0,LR_LOADFROMFILE|LR_CREATEDIBSECTION);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    HDC cmdmem = CreateCompatibleDC(dc);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    SelectObject(cmdmem, hBitmap);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    BitBlt(dc, 0, 0, 1300, 700, cmdmem, 0, 0, SRCCOPY);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    return ;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showExitPic&lt;/span&gt;()
{
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;image goodbye.bmp 0 0&amp;#34;&lt;/span&gt;);
    Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;//picLoad(&amp;#34;goodbye.bmp&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add_stu&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp_sex[&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;];
    student tmp;
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the id number of the new student.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;tmp.id);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the name of the student.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,tmp.name);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the sex of the student.(F for Female,M for Male.)&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,tmp_sex);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strcmp(tmp_sex,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        tmp.sex=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        tmp.sex=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the age of the student.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;tmp.age);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;sub_count; i++)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input %s&amp;#39;s %s score.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,tmp.name,sub_name[i]);
        scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;tmp.subjects[i]);
    }
    dat_add(&amp;amp;tmp);
    dat_count=dat_load();
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Data added successfully!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;showalldata&lt;/span&gt;()
{
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    sub_print();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;dat_count; i++)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].id,stu_dat[i].name,stu_dat[i].sex,stu_dat[i].age);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;sub_count; i2++)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].subjects[i2]);
        }
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].sum,stu_dat[i].avg,i+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);
    }
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;ed_password&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; us_name[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; us_pwd[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; us_pwd2[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; us_pwd3[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;*p;
    FILE*fp;
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    showMiniWindow(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;修改密码&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;36&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;UserName&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;PassWord&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;NewPassWord&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Again&amp;#34;&lt;/span&gt;);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,us_name);
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;);
    p=us_pwd;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        *p=getch();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;)
        {
            p--;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;)
        {
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;consoletest.exe&amp;gt;scaned.txt&amp;#34;&lt;/span&gt;);
            fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scaned.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
            fgets(us_pwd,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(us_pwd),fp);
            fclose(fp);
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;del scaned.txt&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);
            p++;
        }
    }
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;);
    p=us_pwd2;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        *p=getch();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;)
        {
            p--;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;)
        {
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;consoletest.exe&amp;gt;scaned.txt&amp;#34;&lt;/span&gt;);
            fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scaned.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
            fgets(us_pwd2,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(us_pwd2),fp);
            fclose(fp);
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;del scaned.txt&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);
            p++;
        }
    }
    gotoxy(&lt;span style=&#34;color:#b452cd&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;);
    p=us_pwd3;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)
    {
        *p=getch();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;)
        {
            p--;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(*p==&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;)
        {
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;consoletest.exe&amp;gt;scaned.txt&amp;#34;&lt;/span&gt;);
            fp=fopen(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;scaned.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
            fgets(us_pwd3,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(us_pwd3),fp);
            fclose(fp);
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;del scaned.txt&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            putchar(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;);
            p++;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(Login(us_name,us_pwd)&amp;amp;&amp;amp;strcmp(us_pwd2,us_pwd3)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        savePwd(us_name,us_pwd2);
        miniMessage(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Password modification success&amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        miniMessage(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Password modification failed,please check you input.&amp;#34;&lt;/span&gt;);
    }
    Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;del_dat&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_number;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; str_cmd[&lt;span style=&#34;color:#b452cd&#34;&gt;255&lt;/span&gt;];
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the id of the data.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;System will delete the first data founded.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;tmp_number);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;dat_count; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(stu_dat[i].id==tmp_number)
        {
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Data founded.Are you sure to delete it?(Y/N)&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
            scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,str_cmd);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strcmp(str_cmd,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;)!=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;strcmp(str_cmd,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)!=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
            {
                printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Command canceled.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
                system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
            }
            stu_dat[i]=stu_dat[dat_count-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;];
            dat_count--;
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;del main.dat&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;dat_count; i2++)
            {
                dat_add(&amp;amp;stu_dat[i]);
            }
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Del successfully!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
            system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
    }
    miniMessage(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cannot found target data!&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sub_ana&lt;/span&gt;()
{
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_sum[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_avg[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_level[&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;][&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;];
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;; i++)
    {
        tmp_sum[i]=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        tmp_avg[i]=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;; i2++)
        {
            tmp_level[i][i2]=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;dat_count; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;sub_count; i2++)
        {
            tmp_sum[i2]+=stu_dat[i].subjects[i2];
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(stu_dat[i].subjects[i2]/&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;)
            {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;:
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;:
                tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;]++;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;:
                tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]++;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;:
                tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;]++;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;:
                tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]++;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
                tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;]++;
            }
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;sub_count; i++)
    {
        tmp_avg[i]=tmp_sum[i]/dat_count;
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;科目&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;总分&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;平均分&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;优秀&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;良好&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;中等&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;及格&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;不及格&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;sub_count; i++)
    {
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,sub_name[i],tmp_sum[i],tmp_avg[i]
               ,tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;],tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;],tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;],tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;]
               ,tmp_level[i][&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;]);
    }
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpbysum1&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p2)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ((student*)p1)-&amp;gt;sum-((student*)p2)-&amp;gt;sum;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpbysum2&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p2)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ((student*)p2)-&amp;gt;sum-((student*)p1)-&amp;gt;sum;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sortbysum&lt;/span&gt;()
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//ascending sort升序排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//descending sort降序排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; mnu[][&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;]= {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Ascending sort↑&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Descending sort↓&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cancel&amp;#34;&lt;/span&gt;};
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m_resu;
    m_resu=showMenu(mnu,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(m_resu)
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
        qsort(stu_dat,dat_count,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),cmpbysum1);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
        qsort(stu_dat,dat_count,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),cmpbysum2);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Command canceled.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
        system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;OK.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
    showalldata();
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpbyid1&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p2)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ((student*)p1)-&amp;gt;id-((student*)p2)-&amp;gt;id;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpbyid2&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p2)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ((student*)p2)-&amp;gt;id-((student*)p1)-&amp;gt;id;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sortbyid&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; mnu[][&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;]= {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Ascending sort↑&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Descending sort↓&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cancel&amp;#34;&lt;/span&gt;};
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m_resu;
    m_resu=showMenu(mnu,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(m_resu)
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
        qsort(stu_dat,dat_count,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),cmpbyid1);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
        qsort(stu_dat,dat_count,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),cmpbyid2);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Command canceled.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
        system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
    }
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;OK.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
    showalldata();
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;cmpbyname&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p1,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; *p2)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; strcmp(((student*)p1)-&amp;gt;name,((student*)p2)-&amp;gt;name);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sortbyname&lt;/span&gt;()
{
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    qsort(stu_dat,dat_count,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(student),cmpbyname);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;OK.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
    showalldata();
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;searchbyid&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp_id;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; founded=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the id of the student.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;tmp_id);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    sub_print();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;dat_count; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(stu_dat[i].id==tmp_id)
        {
            founded++;
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].id,stu_dat[i].name,stu_dat[i].sex,stu_dat[i].age);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;sub_count; i2++)
            {
                printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].subjects[i2]);
            }
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].sum,stu_dat[i].avg,founded);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(founded==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Not founded!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;searchbyname&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; tmp_name[&lt;span style=&#34;color:#b452cd&#34;&gt;25&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; founded=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Please input the name of the student.&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,tmp_name);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    sub_print();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;dat_count; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(strcmp(stu_dat[i].name,tmp_name)==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
        {
            founded++;
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].id,stu_dat[i].name,stu_dat[i].sex,stu_dat[i].age);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i2&amp;lt;sub_count; i2++)
            {
                printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].subjects[i2]);
            }
            printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,stu_dat[i].sum,stu_dat[i].avg,founded);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(founded==&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)
    {
        system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Not founded!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    atexit(showExitPic);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m_resu;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; mnu[][&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;]= {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Modify the password&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Add new data&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Show all data&amp;#34;&lt;/span&gt;,
                     &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Del data by id&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Subject analysis&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Sort data by sum&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Sort data by id&amp;#34;&lt;/span&gt;
                     ,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Sort in dictionary order by name&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Search by id&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Search by name&amp;#34;&lt;/span&gt;
                     ,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;about&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;exit&amp;#34;&lt;/span&gt;
                    };
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;title 学生成绩管理系统V6.0&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mode con cols=100 lines=30&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;//picLoad(&amp;#34;background.bmp&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//loadBlack();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;image background.bmp 0 0&amp;#34;&lt;/span&gt;);
    Sleep(&lt;span style=&#34;color:#b452cd&#34;&gt;3000&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;image /d&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    miniLogin();
    system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);
    sub_load();
    dat_count=dat_load();
beg:
    m_resu=showMenu(mnu,&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt;(m_resu)
    {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;:
        ed_password();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;:
        add_stu();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;:
        showalldata();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;:
        del_dat();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;:
        sub_ana();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;:
        sortbysum();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;:
        sortbyid();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;:
        sortbyname();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;:
        searchbyid();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;:
        searchbyname();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;:
        system(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;write about.rtf&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;:
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;goto&lt;/span&gt; end;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;goto&lt;/span&gt; beg;
end:
    ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>连续正整数</title>
        <link>https://ntutn.top/posts/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0/</link>
        <pubDate>Sat, 06 Apr 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0/ -&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;还是数据结构的网上作业，将一个整数分解为连续正整数之和，找对方向倒是也不算难……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些正整数可以表示为 n (n&amp;gt;1) 个连续正整数的和，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;15=1+2+3+4+5
    =4+5+6
    =7+8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给定一个正整数 N，判断其是否可以表示为一组连续正整数的和，输出符合条件的解的组数。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;输入有一行，包含一个正整数 n (3≤n≤1000000000)。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;输出有一行，正整数n的符合条件的解的组数。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;单点时限: 2.0 sec&lt;/strong&gt;
&lt;strong&gt;内存限制: 256 MB&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n;
    cin&amp;gt;&amp;gt;n;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; counter=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; i&amp;lt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100000&lt;/span&gt;&amp;lt;n?&lt;span style=&#34;color:#b452cd&#34;&gt;100000&lt;/span&gt;:n); i++) &lt;span style=&#34;color:#228b22&#34;&gt;//n/i-i/2+1&amp;gt;=1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(n/i-i/&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;-i%&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;gt;=&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;(n/i-i/&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;-i%&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;+n/i-i/&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;-i%&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;+i-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;)*i==n*&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)
        {
            counter++;
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;//cout&amp;lt;&amp;lt;&amp;#34;test-&amp;#34;&amp;lt;&amp;lt;i&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    cout &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; endl;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;枚举就好了。需要根据分成的整数的个数i讨论，但为了显得更牛X我就写到一起了，上面的&lt;code&gt;n/i-i/2-i%2+1&lt;/code&gt;无论在奇偶情况下都是拆分得到的整数的第一个&lt;em&gt;理应&lt;/em&gt;是多少。&lt;/p&gt;
&lt;p&gt;判断的主要逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个数字大于等于1&lt;/li&gt;
&lt;li&gt;所有数之和等于原数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求和在这里就不必用循环了，用等差数列明显更高效。注意这里计算时为了防止整数除法运算截断的问题，将除法移动到了等式的右边。&lt;/p&gt;
- https://ntutn.top/posts/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>使用映像劫持技术屏蔽电脑中的广告进程</title>
        <link>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/</link>
        <pubDate>Thu, 28 Mar 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/ -&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;映像劫持（Image File Execution Options），简单的说法，就是当你打开的是程序A，而运行的确是程序B。映像劫持其实是Windows内设的用来调试程序的功能，但是现在却往往被病毒恶意利用。当用户双击对应的程序后，操作系统就会给外壳程序（例如“explorer.exe”）发布相应的指令，其中包含有执行程序的路径和文件名，然后由外壳程序来执行该程序。事实上在该过程中，Windows还会在注册表的上述路径中查询所有的映像劫持子键，如果存在和该程序名称完全相同的子键，就查询对应子健中包含的“dubugger”键值名，并用其指定的程序路径来代替原始的程序，之后执行的是遭到“劫持”的虚假程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国内很多软件都有重度广告，“资讯”、“新闻”、“弹窗”，不胜其烦。直接找到广告进程删除掉，结果一自动更新，又回来了。&lt;/p&gt;
&lt;p&gt;于是，我想到了“映像劫持”：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Windows Registry Editor Version 5.00&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SLBService.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\TsService.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\FoxitDesktopAd.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\FoxitProtect.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LCServer.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LRServer.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\2345MiniPage.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SohuNews.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\PinyinUp.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SGDownload.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SGMedalLoader.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SogouCloud.exe]&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;&amp;#34;Debugger&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;winlogon&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存为&lt;code&gt;.reg&lt;/code&gt;文件，导入注册表即可。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
- https://ntutn.top/posts/%E4%BD%BF%E7%94%A8%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%B1%8F%E8%94%BD%E7%94%B5%E8%84%91%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%91%8A%E8%BF%9B%E7%A8%8B/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>数据结构与算法 C&#43;&#43;编程能力评估</title>
        <link>https://ntutn.top/posts/c&#43;&#43;%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E8%AF%84%E4%BC%B0/</link>
        <pubDate>Thu, 28 Mar 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/c&#43;&#43;%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E8%AF%84%E4%BC%B0/</guid>
        <description>归零幻想 https://ntutn.top/posts/c&#43;&#43;%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E8%AF%84%E4%BC%B0/ -&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;题目1&#34;&gt;题目1&lt;/h2&gt;
&lt;p&gt;向类SeqList中插入数据，请根据main函数中的调用，完成Insert和output函数。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    5
    1 2 3 4 5
    2 9
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 2 3 4 5
1 2 9 3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Answer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SeqList&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; * data;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; last; &lt;span style=&#34;color:#228b22&#34;&gt;// index of the last element
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    SeqList ( &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sz );
    ~SeqList ( )
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; [ ] data;
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;input&lt;/span&gt; ();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;output&lt;/span&gt;() ;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Insert&lt;/span&gt;   ( &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &amp;amp;x, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i);
}  ;
SeqList::SeqList ( &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sz )
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ( sz &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; )
    {
        data = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[sz];
        last = -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; SeqList:: input()
{
    cin &amp;gt;&amp;gt;last;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;last; i++)
        cin&amp;gt;&amp;gt;data [i];
    last--;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; SeqList::output()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; fi=&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i&amp;lt;=last; i++)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!fi)
        {
            fi=!fi;
            cout&amp;lt;&amp;lt;data[i];
        }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;{
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&amp;lt;&amp;lt;data[i];
        }
    }
    cout&amp;lt;&amp;lt;endl;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; SeqList::Insert(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;amp; x, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i1=last;i1&amp;gt;=i;i1--){
        data[i1+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]=data[i1];
    }
    data[i]=x;
    last++;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    SeqList myList(&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;);
    myList.input();
    myList.output();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; where,value;
    cin &amp;gt;&amp;gt;where;
    cin &amp;gt;&amp;gt;value;
    myList.Insert(value,where);
    myList.output ();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;题目2&#34;&gt;题目2&lt;/h2&gt;
&lt;p&gt;已知一块靶场大小为m*n（m行n列），每个点上都有一面旗子，我们的炮兵发射炮弹，炮弹一次只能炸掉一面旗子，每次炮弹的落点坐标都有记录，问你几炮过后，靶场还剩下几面旗子呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有若干行，第一行为两个整数m,n，以空格分隔，都是整数，且1&amp;lt;=m&amp;lt;=n&amp;lt;=100；&lt;/p&gt;
&lt;p&gt;接下来有若干行，每行有两个整数x,y，代表炮弹落点的坐标（行、列坐标，编号从0开始）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3 3
1 1
1 1
99 99
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个整数，代表最后靶场上剩余的旗子数。&lt;/p&gt;
&lt;p&gt;提示：炮弹可能打在同一个位置，也可能脱靶，但保证在100*100的范围内。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Answer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define N 105
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; data[N][N];
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;N;i++){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i2&amp;lt;N;i2++){
            data[i][i2]=&lt;span style=&#34;color:#658b00&#34;&gt;false&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m,n;
    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; res=m*n;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x,y;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(cin&amp;gt;&amp;gt;x&amp;gt;&amp;gt;y){
        data[x][y]=&lt;span style=&#34;color:#658b00&#34;&gt;true&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;m;i++){
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i2&amp;lt;n;i2++){
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(data[i][i2]){
                res--;
            }
        }
    }
    cout&amp;lt;&amp;lt;res&amp;lt;&amp;lt;endl;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;题目3&#34;&gt;题目3&lt;/h2&gt;
&lt;p&gt;买房面积不要求太大，环境不要求太好，只要单价够便宜就已经很满足啦~现在挑选了一些房源，请你帮忙选一选，哪个最适合呢？小本本上记录了房子的名称（字母和数字组成，无空格）、面积和总价，你来帮编个程序自动计算一下吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一行为一个整数N(1&amp;lt;=N&amp;lt;=100)，表示接下来有N套房源信息；&lt;/p&gt;
&lt;p&gt;接下来有N行，每行包括房源名称(不超过100个字符)、面积和总价（double类型，小数点后保留两位），以空格分隔。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3
Tangdaowan0101 50 50
Jiangshan1314 49 50
Jinshatan1111 51 50
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Jinshatan1111 51.00 50.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仅一行，为最适合的房源信息，以空格分隔，末尾换行。&lt;/p&gt;
&lt;p&gt;测试用例保证没有单价重复的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Answer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#b452cd&#34;&gt;101&lt;/span&gt;];
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; area;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; sum;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; avg;
} House;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Gethouse&lt;/span&gt;(House*h,&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n){
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; res=INT_MAX;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; res_num=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++){
        h[i].avg=h[i].sum/h[i].area;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(h[i].avg&amp;lt;res){
            res=h[i].avg;
            res_num=i;
       }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; res_num;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n,i,flag = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#228b22&#34;&gt;//n有几行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);
    House h[n];
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i ++)
      scanf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s%lf%lf&amp;#34;&lt;/span&gt;,h[i].name,&amp;amp;h[i].area,&amp;amp;h[i].sum);
    flag= Gethouse(h,n);
    printf(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%s %.2f %.2f&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;,h[flag].name, h[flag].area, h[flag].sum);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;题目4&#34;&gt;题目4&lt;/h2&gt;
&lt;p&gt;实现链表的输入（已实现）、输出和删除成员函数。&lt;/p&gt;
&lt;p&gt;输入时，根据endtag确定是否结束输入；&lt;/p&gt;
&lt;p&gt;删除时，根据下标（从0开始）。&lt;/p&gt;
&lt;p&gt;注意，输入的顺序跟存放的顺序以及输出的顺序是相反的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 2 3 4 5 0
2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;5 4 3 2 1
5 4 2 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Answer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;iostream&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; std ;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;//前视定义,否则友元无法定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LinkNode&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;friend&lt;/span&gt;  List; &lt;span style=&#34;color:#228b22&#34;&gt;//链表结点类的定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    LinkNode *link;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; data;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    LinkNode(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &amp;amp; item, LinkNode *ptr = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        data=item;
        link=ptr;
    }
    LinkNode (LinkNode *ptr = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        link=ptr;
    }
    ~LinkNode() {};
};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;
{
    &lt;span style=&#34;color:#228b22&#34;&gt;//单链表类的定义
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;:
    LinkNode *first; &lt;span style=&#34;color:#228b22&#34;&gt;//指向首结点的指针
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;:
    List ()
    {
        first = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkNode ();   &lt;span style=&#34;color:#228b22&#34;&gt;// 带头结点
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    ~List ()
    {
        MakeEmpty();   &lt;span style=&#34;color:#228b22&#34;&gt;//析构函数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MakeEmpty&lt;/span&gt; ( );      &lt;span style=&#34;color:#228b22&#34;&gt;//链表置空
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Remove&lt;/span&gt; ( &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i );
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;input&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;  endTag);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;output&lt;/span&gt;();
};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List:: MakeEmpty ( )
{
    LinkNode *q;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (  first-&amp;gt;link != &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt; )
    {
        q = first-&amp;gt;link;
        first-&amp;gt;link = q-&amp;gt;link;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; q;
    }
};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List :: input (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; endTag)
{
    LinkNode  *newnode;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val;
    cin&amp;gt;&amp;gt;val;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(val!=endTag)
    {
        newnode=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkNode (val);
        newnode-&amp;gt;link=first-&amp;gt;link;
        first-&amp;gt;link=newnode;
        cin&amp;gt;&amp;gt;val;
    }
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; List::Remove(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i)
{
    LinkNode*tmp=first;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i2=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;i2&amp;lt;i;i2++){
        tmp=tmp-&amp;gt;link;
    }
    LinkNode*tmp1=tmp-&amp;gt;link;
    tmp-&amp;gt;link=tmp-&amp;gt;link-&amp;gt;link;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt;(tmp1);
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; List::output()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; fi=&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
    LinkNode*tmp=first-&amp;gt;link;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(tmp!=&lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(fi++)
        {
            cout&amp;lt;&amp;lt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&amp;lt;&amp;lt;tmp-&amp;gt;data;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
        {
            cout&amp;lt;&amp;lt;tmp-&amp;gt;data;
        }
        tmp=tmp-&amp;gt;link;
    }
    cout&amp;lt;&amp;lt;endl;
}
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;()
{
    List l;
    l.input(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;//0为输入的结束数字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    l.output ();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; index;
    cin&amp;gt;&amp;gt;index; &lt;span style=&#34;color:#228b22&#34;&gt;//要删除的元素的下标，下标从0 开始
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    l.Remove(index);
    l.output (); &lt;span style=&#34;color:#228b22&#34;&gt;//删除后输出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://ntutn.top/posts/c&#43;&#43;%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E8%AF%84%E4%BC%B0/ - CC BY-SA 4.0</description>
        </item>
    
    
    
        <item>
        <title>直</title>
        <link>https://ntutn.top/posts/%E7%9B%B4/</link>
        <pubDate>Wed, 27 Mar 2019 03:11:37 +0800</pubDate>
        
        <guid>https://ntutn.top/posts/%E7%9B%B4/</guid>
        <description>归零幻想 https://ntutn.top/posts/%E7%9B%B4/ -&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;直&#34;&gt;直&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;发现了自己初中写的作文，我当年这么中二的吗……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;树是直的，直得挺拔入云；山是直的，直得直插霄汉；竹是直的直得虚心髙洁。是啊，巍峨的直无处不在。&lt;/p&gt;
&lt;h2 id=&#34;尺&#34;&gt;尺&lt;/h2&gt;
&lt;p&gt;人们仰慕大自然的直，于是制造了尺。尺，为直而生。再纷乱的外界环境，它总恪尽职守，一丝不苟。即使是它的制造者，它也将毫不留情地指出他的过失。&lt;/p&gt;
&lt;p&gt;人本如此。看到它，我想起了屈子，想起了岳将军，想起包拯，想起了正直的中国人。&lt;/p&gt;
&lt;h2 id=&#34;弓&#34;&gt;弓&lt;/h2&gt;
&lt;p&gt;尺是直的，但在不可抗力下它还是弯曲了。有时弯也是一种无奈，正直的树也抵不住弯曲的斧。那就弯吧。不！你没看到，弦是直的。弦如何直？那是弓在抗拒那股不可抗力！是啊，弓是弯的，但它的心是直的。它仍是一心向直的。&lt;/p&gt;
&lt;p&gt;人应如此。狂风袭来，竹顺势而弯，但风速减小了。虽然只有一点。看到它，我想到了周树人，想到了郭沫若，想到了在黑暗中抗争的中国人。&lt;/p&gt;
&lt;h2 id=&#34;箭&#34;&gt;箭&lt;/h2&gt;
&lt;p&gt;弓是弯的，但它不甘继续弯下去。于是它化作一支羽箭，反射着金色阳光，即使这直是有代价的。它是一根选择燃烧的火柴。它将烧尽，但它选择了燃烧。&lt;/p&gt;
&lt;p&gt;看到它，我想到了荆轲，想到了谭嗣同，想到了敢于与黑暗抗争的中国人。&lt;/p&gt;
&lt;p&gt;中华民族是一个直的民族，中国人本色如此。中国人是直的，即使在不可抗力下弯了，心还是直的。而且，他们会抗争，不管那是不是不可抗力。在忍无可忍时，他们会用自己的生命，划出一道直线。中国，拉着这样的弓，射出这样的箭，复兴也是必然的。&lt;/p&gt;
&lt;p&gt;这就是那个直的传说。&lt;/p&gt;
- https://ntutn.top/posts/%E7%9B%B4/ - CC BY-SA 4.0</description>
        </item>
    
    
  </channel>
</rss> 