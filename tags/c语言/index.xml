<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C语言 on 归零幻想</title>
    <link>https://ntutn.top/tags/c%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C语言 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Sat, 13 Apr 2019 03:11:37 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学生管理系统</title>
      <link>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 13 Apr 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description>翻出了以前C语言C实验的大作业，当时搞了好多奇技淫巧，最终拿到99分。
介绍 学生成绩管理系统v6.0是由软件工程1702刘海鑫设计的一款用于学生成绩管理的软件。
文件列表 Stuv6.0.exe	主体程序，用于实现整体功能。 main.dat	程序的数据文件，用于存储学生信息。 goodbye.bmp	程序退出时加载的图片。 desktop.ini	修改程序所在文件夹的图标。 consoletest.exe	编译的au3程序，用于辅助输入中文。 代码：
$re=InputBox(&amp;#34;Input&amp;#34;,&amp;#34;You can input your massage now.(支持中文)&amp;#34;)ConsoleWrite($re) code.dat	密码存储文件。该文件存储的是xor算法加密的账号密码。 black.bmp	一张纯黑的图片，用于清除控制台加载图片的痕迹。2018年1月20日使用了image /d清除图片，本文件不再使用。 background.bmp	程序启动时加载的图片。 about.rtf	程序的说明文档。 scaned.txt	存储用户输入的临时文件，一般会自动清除。 subjects.dat	存储科目的名称，每行一个，最多允许50个，可用记事本直接打开编辑。 image.exe	外部程序，用于加载图片。 使用说明 双击stuv6.0.exe，程序启动。
待启动图片显示过后，出现密码输入框，回车确认输入。
默认账号：admin
默认密码：admin888
输入密码时如果输入~符号，将弹出一个信息框提示输入。这是为了便于输入中文和特殊符号。
本程序的密码存储是xor运算的结果，仅用于比对密码是否正确。
接下来进入主菜单。菜单使用黄色为底色，红色标定选中项。你可以按上下键选择，或直接按项目对应数字，回车确认。
开发日志 2018年3月10日，加入了控制台窗口大小控制的代码。
修改了exe文件的图标。
改用外部程序image.exe加载图片，并修改gotoxy函数的使用，成功使代码兼容了gun gcc系列编译器。
测试WIN7运行效果，图片加载错位，无法全屏，其他功能不受影响。
在科目分析功能加入分层成绩展示，至此，程序主体开发完毕。
加入查找功能，查找方式为遍历，依据为id或姓名。 同理，加入按id排序、按姓名的字典顺序排序。 数据排序功能，选择后弹出二级菜单，进行升序排序或降序排序。 排序的结果不会保存。 排序后将自动展示排序结果。
加入了科目分析，统计各科总分平均分。
删除学生功能准备完成。
将修改密码部分移出主函数，便于管理。
学生信息展示准备完成。
添加学生功能准备完成，界面比较简陋。
发现有点控制台用BitBlt画的图不会自动清除，于是找了一张全黑的图片将其覆盖。
发现在WIN7等系统控制台加载图片会出现错位，暂时不打算解决。
开始准备程序主体功能。
记事本太单调，决定将about改为写字板，内容为本文件。
发现了atexit函数，于是顺理成章地加入了程序退出图。
找到一个取巧的方法。控制台也是一个窗口，获取了他的句柄就可以在上面用BitBlt直接画图了吧。
决定加入加载启动退出图片功能。可是Windows环境下C语言直接调用GDI常常导致系统蓝屏。虽然直接用其他语言就可以轻松写出，但总是有点不甘心。</description>
    </item>
    
  </channel>
</rss>
