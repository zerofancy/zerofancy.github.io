<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存 on 归零幻想</title>
    <link>https://ntutn.top/tags/%E5%86%85%E5%AD%98/</link>
    <description>Recent content in 内存 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Mon, 16 Sep 2019 03:11:37 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大型数组按行遍历与按列遍历的区别</title>
      <link>https://ntutn.top/posts/%E5%A4%A7%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 16 Sep 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E5%A4%A7%E5%9E%8B%E6%95%B0%E7%BB%84%E6%8C%89%E8%A1%8C%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8C%89%E5%88%97%E9%81%8D%E5%8E%86%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>今天这学期开学第一天，上了《计算机操作系统原理》，老师提出个问题
对于一个很大的数组（如70000×70000），按行遍历速度快还是按列遍历快，为什么？
乍一看，程序时间复杂度一样，理论上不是应该一样快吗？难道老师在钓鱼？
实践出真知，我们就写个程序跑一跑。
程序 70000×70000我电脑在默认情况下开不下，我这里用20000×20000测试
按行遍历 /** * M1 */ public class M1 { public static void main(String[] args) { final int N=20000; int[][] a = new int[N][N]; Long start=System.currentTimeMillis(); for(int i=0;i&amp;lt;N;i++){ for (int j = 0; j &amp;lt; N; j++) { a[i][j]=1; } } Long stop=System.currentTimeMillis(); System.out.println(stop-start); } } 按列遍历 /** * M2 */ public class M2 { public static void main(String[] args) { final int N=20000; int[][] a = new int[N][N]; Long start=System.</description>
    </item>
    
    <item>
      <title>三门问题</title>
      <link>https://ntutn.top/posts/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 16 Sep 2019 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/</guid>
      <description>参赛者面前有三扇关闭着的门，其中一扇的后面是一辆汽车，选中后面有车的那扇门就可以赢得该汽车， 而另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，主持人会开启剩 下两扇门中的一扇，露出其中一只山羊。主持人其后会问参赛者要不要更换选择，选另一扇仍然关着的门。
那么，应不应该更换呢？ 分析 假如你选择了A，那你中奖概率应为1/3.
主持人在B、C中选了个没奖的，这与你的选择其实没影响，因为你没选的肯定有个没奖的。
换与不换其实就相当于问你选A还是不选A。
程序模拟 有点绕，咱学软件的，就干脆让电脑跑一跑。
代码 import java.util.Random; class Test{ public static void main(String[] args) { Random ran=new Random(); int c1=0,c2=0; for(int i=0;i&amp;lt;1e6;i++){ boolean boxes[]={false,false,false}; boxes[ran.nextInt(boxes.length)]=true;//某个门后有奖 int sel=ran.nextInt(boxes.length);//随便选择一扇门 int p=0; while(p==sel||boxes[p]){//主持人选择一扇没奖的门（且不与参与者选同一扇） p=ran.nextInt(boxes.length); } if(boxes[sel]){//不更换中奖 c1++; } if(boxes[0+1+2-sel-p]){//更换中奖 c2++; } } System.out.println(c1/1e6); System.out.println(c2/1e6); } } 运行结果 0.332419 0.667581 看来是更换比较好了。</description>
    </item>
    
  </channel>
</rss>
