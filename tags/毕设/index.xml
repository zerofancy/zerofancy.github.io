<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>毕设 on 归零幻想</title>
    <link>https://ntutn.top/tags/%E6%AF%95%E8%AE%BE/</link>
    <description>Recent content in 毕设 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Mon, 22 Feb 2021 03:11:37 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/%E6%AF%95%E8%AE%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DebugEntrance和DebugConfig</title>
      <link>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</link>
      <pubDate>Mon, 22 Feb 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/debugentrance%E5%92%8Cdebugconfig/</guid>
      <description>工欲善其事，必先利其器。毕设是一个相对复杂的项目了，我觉得要想顺利完成肯定是需要一些手段帮助我调试的。于是这里我准备了debug页面，主要功能就两个：提供某个功能的入口以及存储配置（最好能直接在手机上修改）
DebugEntrance 就是一个各种测试功能的入口。
这个一看实现就很简单，不细说了。
DebugConfig 因为字节自己的ABManager用着挺顺手，感觉自己项目调试时有类似这么个东西会比较舒服，于是搞了这么个东西。
使用 先看使用：
@ZeroConfig(key = &amp;#34;retrofit_config&amp;#34;, title = &amp;#34;Retrofit配置&amp;#34;, owner = &amp;#34;liuhaixin.zero&amp;#34;) data class RetrofitConfig(val baseUrl: String = RetrofitUtil.BASE_URL) private val retrofitConfig by zeroConfig&amp;lt;RetrofitConfig&amp;gt;() private val retrofit by lazy { Retrofit.Builder() .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL) .addConverterFactory(GsonConverterFactory.create()) .client(okHttpClient) .build() } 看上去还是有点让人心动的吧。
属性委托、泛型实化 首先是一段来自菜鸟教程的描述：
属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类属性的统一管理。
val/var &amp;lt;属性名&amp;gt;: &amp;lt;类型&amp;gt; by &amp;lt;表达式&amp;gt; by 关键字之后的表达式就是委托, 属性的 get() 方法(以及set() 方法)将被委托给这个对象的 getValue() 和 setValue() 方法。属性委托不必实现任何接口, 但必须提供 getValue() 函数(对于 var属性,还需要 setValue() 函数)。
借助这个特征，我们可以定义这样一个委托类：</description>
    </item>
    
  </channel>
</rss>
