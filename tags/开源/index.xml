<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on 归零幻想</title>
    <link>https://ntutn.top/tags/%E5%BC%80%E6%BA%90/</link>
    <description>Recent content in 开源 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Sun, 19 Feb 2023 00:39:01 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo博客文章加密</title>
      <link>https://ntutn.top/project/hugo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Sun, 19 Feb 2023 00:39:01 +0800</pubDate>
      
      <guid>https://ntutn.top/project/hugo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</guid>
      <description>最近发现一个看上去不错的项目叫做Hugo Encryptor，可以给hugo博客加密，输入密码后又可以正常访问，相当nice。
然而这个工具折腾起来并没有那么容易用，因为它Python写的，依赖问题就是一个坑，这坑过了之后还发现它有其他的缺陷，比如重复运行会报错等。首先我这样说不是因为我讨厌Python哈，虽然我确实不喜欢，但作者去年也说计划拿Go重新实现的，但目前没啥动静。
看它其实也就一个Python文件，遍历查找xml节点加密替换内容，属于是我这种教程都没看完的人也能看懂的程度，于是我决定自己写一个Kotlin版本。本来是想试试GraalVM整上各个平台的native版本，但折腾好久也没运行起来，于是退而求其次整了个类似安卓项目中gradlew文件的脚本叫hugow，替代hugo命令，一键完成下载安装工具、生成静态网站和对特定内容加密的功能。
示例：下面这段内容的密码是ntutn。
文章的部分内容被密码保护：
--- DON&#39;T MODIFY THIS LINE ---在线演示：https://ntutn.top/hugo_encryptor_kt/posts/this-is-hugo-encryptor/
仓库地址：https://github.com/zerofancy/hugo_encryptor_kt</description>
    </item>
    
    <item>
      <title>AUIL学习</title>
      <link>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 13 Feb 2022 18:11:08 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/auil%E5%AD%A6%E4%B9%A0/</guid>
      <description>AUIL 源码学习 重点问题 AUIL是个比较知名的图片加载库，源码结构比较清晰和简单，我在阅读学习中整理了以下内容。
MemoryCache 顾名思义，这个是在内存中缓存Bitmap相关的代码。
MemoryCache结合了策略模式和装饰器模式，初始化时可选择不同缓存策略。
一个Cache类内部持有一定量的Bitmap元素，并根据某种策略自动移除未使用的Bitmap。看结构我们应该从BaseMemoryCache开始看起。
BaseMemoryCache中持有了所有放入的元素的弱引用，而它的子类根据策略持有了部分缓存对象的强引用。
整个框架分多少个模块，每个模块的作用是什么 ImageLoader 门面。 ImageAware 对最终处理和展示图片操作的封装。 MemoryCache bitmap在内存中的缓存。 BitmapProcessor 图片处理器，处理原始图片。分为预处理和后处理，预处理的结果会存入缓存，而后处理每次展示都会执行。 BitmapDisplayer 控制图片展示，可为其附加一定的展示效果。 DiskCache bitmap在磁盘中的缓存 ImageDecoder 将图片解码为Bitmap，并缩放到合适尺寸 如何仅通过interface就将框架的整个流程串联起来 如何进行内存管理的，LRU是种什么算法，有没有比LRU更好的？ AUIL的图片缓存有二级，一是所有缓存过的图片都会持有WeakReference，可能随时回收；二是部分图片会持有强引用，不会被回收。这里的部分图片的总共大小可以设置，达到阈值之后使用一定的算法淘汰一些图片。这里最常用的就是LRU。
LRU是淘汰缓存文件的算法，它每次淘汰最久未使用的文件。是一种最常用的页面置换算法。除了LRU之外，AUIL预置的算法还有FIFO（先入先出）、LargestLimitted（淘汰最大的文件）、LFU（淘汰使用频率最低的）。三者各有优劣。
如，LRU因为图片展示频率在时间上的不均匀性，可能将一些高频展示的图片淘汰掉，导致缓存命中率下降；LFU对于新图片频率统计无法比较好把控。
用到了多少个线程池，这些线程池之间的区别是什么，如果只用一个线程池可以么？ 使用了三个线程池：
taskExecutor taskExecutorForCachedImages taskDistributor taskExecutor和taskExecutorForCachedImages都是用来执行图片处理和展示任务的，他们处理顺序都是个LIFO（后进先出）的队列，而taskDistributor是个普通的线程池，用于框架内其他任务。
taskExecutorForCachedImages是专门为缓存中读取的图片展示用的线程池，因为这类图片响应会很快，所以AUIL专门给他们准备了一个线程池。 综上，如果用一个线程池则最终效果会大打折扣。</description>
    </item>
    
  </channel>
</rss>
