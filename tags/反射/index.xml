<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>反射 on 归零幻想</title>
    <link>https://ntutn.top/tags/%E5%8F%8D%E5%B0%84/</link>
    <description>Recent content in 反射 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Sun, 11 Apr 2021 03:11:37 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/%E5%8F%8D%E5%B0%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ClassLoader双亲委托机制探究</title>
      <link>https://ntutn.top/posts/classloader%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Sun, 11 Apr 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/classloader%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6/</guid>
      <description>最近在研究抖音进入热点内流的耗时问题，种种线索指向了类加载耗时上。为此，我研究了Java类加载的双亲委托机制，并尝试给出了优化建议。
双亲委托机制 双亲委托机制中最重要的是loadClass方法，让我们看看它是怎么实现的。
protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { // First, check if the class has already been loaded Class&amp;lt;?&amp;gt; c = findLoadedClass(name); // 已加载过直接返回 if (c == null) { try { if (parent != null) { c = parent.loadClass(name, false); //尝试让parent加载 } else { c = findBootstrapClassOrNull(name); // bootstrap class loader是否加载过 } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class.</description>
    </item>
    
  </channel>
</rss>
