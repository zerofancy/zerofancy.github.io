<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分享 on 归零幻想</title>
    <link>https://ntutn.top/tags/%E5%88%86%E4%BA%AB/</link>
    <description>Recent content in 分享 on 归零幻想</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>CC BY-SA 4.0</copyright>
    <lastBuildDate>Fri, 07 Oct 2022 23:47:22 +0800</lastBuildDate><atom:link href="https://ntutn.top/tags/%E5%88%86%E4%BA%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个简单的桌面悬浮时钟</title>
      <link>https://ntutn.top/posts/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%82%AC%E6%B5%AE%E6%97%B6%E9%92%9F/</link>
      <pubDate>Fri, 07 Oct 2022 23:47:22 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A1%8C%E9%9D%A2%E6%82%AC%E6%B5%AE%E6%97%B6%E9%92%9F/</guid>
      <description>个人非常喜欢macOS下一个叫做 zClock 的应用，它可以在桌面右下角显示一个悬浮的时钟，提醒我掌握好摸鱼节奏。
但这个软件似乎没有Linux版本，于是作为程序员，自己动手丰衣足食，花了一点时间我也写了一个。
本来学了点compose，是想用Compose写的，但是写一半发现还是不行，挺坑的，因为compose的窗口框架是swing的，而我需要在渲染后调整窗口大小，然后这个大小咋换算……于是后来改成纯swing的了，留了一个“关于”窗口用compose是我最后的倔强。
感兴趣的看官可以去 github 下载，如果你安装了 星火应用商店 可以 点击这里 直接下载。目前在 Windows 11、Kubuntu 22.04、deepin v23 测试可以使用。</description>
    </item>
    
    <item>
      <title>装饰模式实现分享功能</title>
      <link>https://ntutn.top/posts/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 19 Jul 2021 03:11:37 +0800</pubDate>
      
      <guid>https://ntutn.top/posts/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</guid>
      <description>代码 业务代码不可能直接贴出来，我按照大致的设计写了如下demo。
import java.lang.IllegalArgumentException fun main() { listOf( ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;图2&amp;#34;, &amp;#34;图3&amp;#34;), true), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;图2&amp;#34;, &amp;#34;图3&amp;#34;), false), ShareData(listOf(&amp;#34;视频1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;视频3&amp;#34;), true), ShareData(listOf(&amp;#34;视频1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;视频3&amp;#34;), false), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;图3&amp;#34;), true), ShareData(listOf(&amp;#34;图1&amp;#34;, &amp;#34;视频2&amp;#34;, &amp;#34;图3&amp;#34;), false) ).forEach { println(&amp;#34;测试$it&amp;#34;) if (it.handler.requestPermission()) { it.handler.doShare(it) } else { println(&amp;#34;申请权限失败&amp;#34;) } println() } } class ShareData(val urls: List&amp;lt;String&amp;gt;, val isFromSDK: Boolean) { companion object { const val IMAGE = 0x1 const val VIDEO = 0x2 const val MIX = IMAGE.</description>
    </item>
    
  </channel>
</rss>
