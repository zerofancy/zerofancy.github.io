<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>归零幻想</title>
  <subtitle type="text">我起源于混乱</subtitle>
  <id>https://ntutn.top</id>
  <updated>2022-04-11T17:24:47Z</updated>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/7/2.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/7/2.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;h1 id="把你的光猫变成一个丐版nas"&gt;把你的光猫变成一个丐版NAS&lt;/h1&gt;
&lt;p&gt;我的初衷是调研下光猫改桥接的可行性，结果拿到超级管理员密码后还是没有这个选项。但在这个过程中发现直接在光猫上跑个下载服务却是可行的。&lt;/p&gt;
&lt;h2 id="允许ftp访问和telnet访问"&gt;允许FTP访问和telnet访问&lt;/h2&gt;
&lt;p&gt;访问 http://192.168.1.1 ，输入密码后进入光猫管理后台。这里我找到“上网帐号设置”，备份宽带帐号和密码。不得不说他系统还是挺拉的，密码框直接用审查元素功能把 type 改为 input 就可以看到密码了。&lt;/p&gt;
&lt;p&gt;第一步后台不要退出，访问 http://192.168.1.1/servmngr.html 。这里看到一个空白页面，审查元素后发现大有乾坤。 &lt;img src="https://images.ntutn.top/2022/04/78e9db7285fda2ee43fd5901902d3208.png" alt="img" /&gt;&lt;/p&gt;
&lt;p&gt;将这些代码取消注释，此时网页还是空白的，但是用 Ctrl+A 可以看到实际是有内容的。在这个页面开启 telnet 访问，并设置密码。注意用户名为 admin 不要改，否则后面 telnet 登陆不进去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;telnet 192.168.1.1&lt;/code&gt; 成功后执行&lt;code&gt;sh&lt;/code&gt;。然后&lt;code&gt;uname -a&lt;/code&gt;看下。这里我就不记录查看管理员密码步骤了，反正这个型号管理员面板也没有设置桥接的选项。&lt;/p&gt;
&lt;h2 id="开始整活"&gt;开始整活&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt;，发现占用内存最高的是个两个 java 进程。&lt;code&gt;java -version&lt;/code&gt;，发现安装了 java8 。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plain"&gt;# java -version
openjdk version &amp;quot;1.8.0-internal&amp;quot;
OpenJDK Runtime Environment (build 1.8.0-internal-jenkinsang_2022_01_15_04_03-b00)
JamVM (build 2.0.0, inline-threaded interpreter with stack-caching)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;free&lt;/code&gt;命令可知总内存约二十多兆，剩余仅 3 兆。这点空间是搞不了什么事情的，因此我尝试干掉前述两个 java 进程。&lt;code&gt;ps -aux | grep java&lt;/code&gt;，发现除了存在两个 java 进程，还写了脚本自动把这两个进程拉起来，即&lt;code&gt;/etc/monitor_java.sh&lt;/code&gt; 。统统 kill 掉。&lt;/p&gt;
&lt;p&gt;现在有 10 兆左右的内存了，对于 java 来说可能还是不太能搞事，但跑个 aria2 足够了！尝试插入 U 盘，发现在&lt;code&gt;/mnt/usb1_1&lt;/code&gt;自动挂载。&lt;/p&gt;
&lt;p&gt;交叉编译 aria2c ，这里我用的是这个脚本：https://gitee.com/logic_2050/auto-build-aria2-mips32-static 。在我的 debian11 编译过程中只遇到一个问题，手动&lt;code&gt;sudo apt install autoreconf&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;如何把文件弄到光猫里，以及取出来？每次插拔 U 盘也太麻烦了。于是我找到一个支持上传的简单文件服务器：https://github.com/mayth/go-simple-upload-server。仍然交叉编译到 mips 静态包。&lt;code&gt;env GOOS=linux GOARCH=mips GOMIPS=softfloat go build -trimpath -ldflags=&amp;quot;-s -w -extldflags=-static&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="成品"&gt;成品&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://images.ntutn.top/2022/04/bc80e51855b842dedd7268113042e378.png" alt="img" /&gt;&lt;/p&gt;
&lt;h2 id="拓展"&gt;拓展&lt;/h2&gt;
&lt;h3 id="被我干掉的两个-java-进程是做什么的"&gt;被我干掉的两个 java 进程是做什么的&lt;/h3&gt;
&lt;p&gt;光猫跑 java 属实有点离谱，一半内存都是他们占的，干掉后也不影响上网，甚至也不影响光猫后台管理。嗯，有点耐人寻味。&lt;/p&gt;
&lt;h3 id="ftp访问为空白"&gt;FTP访问为空白&lt;/h3&gt;
&lt;p&gt;经测试，该型号FTP访问根目录是一片空白，但大多数子目录还是可以正常访问的，如&lt;code&gt;/mnt/usb1_1&lt;/code&gt;，完全能满足要求。&lt;/p&gt;
&lt;h3 id="无法执行重启后文件丢失"&gt;无法执行/重启后文件丢失&lt;/h3&gt;
&lt;p&gt;有些目录下是无法写入的，有些虽然可以写入，但是重启会丢失，还有些目录下无法执行程序。&lt;/p&gt;
&lt;p&gt;我选择把整活用的程序放到&lt;code&gt;/fhconf/&lt;/code&gt;下，因为光猫自己的配置文件备份就放在这里，显然这里是不会重置的。&lt;/p&gt;
&lt;h3 id="支持-https"&gt;支持 https&lt;/h3&gt;
&lt;p&gt;只要将你的电脑下的&lt;code&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt;文件复制到光猫下，并在aria2的配置文件中指定就可以了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ca-certificate=/fhconf/custom/aria2/ca-certificates.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="oom"&gt;OOM&lt;/h3&gt;
&lt;p&gt;尽管aria2确实已经很省资源了，但当尝试BT下载一个比较大的文件时（超过2GB）还是很容易占用超过10M内存，然后关键进程OOM就巴比Q了。我尝试过修改配置文件，关闭disk-cache、关闭预分配甚至限制下载速度等均无法解决。所以该方案的实用性其实并不是很高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也无所谓，生命在于折腾嘛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也许设置swap可以解决这个问题，但默认没有这个命令，估计还得去编译busybox。唉，算了吧……&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/7/1.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/7/1.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;h1 id="auil-源码学习-重点问题"&gt;AUIL 源码学习 重点问题&lt;/h1&gt;
&lt;p&gt;AUIL是个比较知名的图片加载库，源码结构比较清晰和简单，我在阅读学习中整理了以下内容。&lt;/p&gt;
&lt;h2 id="memorycache"&gt;MemoryCache&lt;/h2&gt;
&lt;p&gt;顾名思义，这个是在内存中缓存Bitmap相关的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://images.ntutn.top/2022/02/04ac71a8c8e1622e2bc287f2fd6e92cf.svg" alt="auil" /&gt;&lt;/p&gt;
&lt;p&gt;MemoryCache结合了策略模式和装饰器模式，初始化时可选择不同缓存策略。&lt;/p&gt;
&lt;p&gt;一个Cache类内部持有一定量的Bitmap元素，并根据某种策略自动移除未使用的Bitmap。看结构我们应该从BaseMemoryCache开始看起。&lt;/p&gt;
&lt;p&gt;BaseMemoryCache中持有了所有放入的元素的弱引用，而它的子类根据策略持有了部分缓存对象的强引用。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/7/0.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/7/0.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;h1 id="给app添加构建信息"&gt;给APP添加构建信息&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这两天在琢磨一个问题，一个APP是怎么知道自己是怎么来的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个应用得知道自己是怎么来的，这样出了问题才知道该找谁。举个例子，当应用发生了一个线上crash，崩溃信息收集上来，然后我们打开堆栈一看懵了——这个发生崩溃的&lt;code&gt;v5.c&lt;/code&gt;是哪个类呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="https://images.ntutn.top/2022/01/9616ad8a32ec122442705981e9e97847.png" alt="crash" /&gt;&lt;/p&gt;
&lt;p&gt;显然，代码被混淆过，我们要拿到编译时生成的&lt;code&gt;mapping.txt&lt;/code&gt;来还原堆栈，如图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://images.ntutn.top/2022/01/aaa2591c565385ad28ce781047c567e5.png" alt="retrace" /&gt;&lt;/p&gt;
&lt;p&gt;**然而，我们编译了很多次，客官您要的是哪次的mapping文件呢？**显然，我们不仅要保留每次构建的相关信息，还得能准确区分开每次构建的产物，能做到有问题立即查询到对应构建信息。&lt;/p&gt;
&lt;p&gt;应用需要知道自己是“&lt;em&gt;怎么来的&lt;/em&gt;”。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/6/3.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/6/3.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;p&gt;新建一个安卓项目，&lt;code&gt;Android Studio&lt;/code&gt;已经为我们生成的模板中，&lt;code&gt;build.gradle&lt;/code&gt;总是很显眼。我也终于下定决心来了解下这个构建整合工具。&lt;/p&gt;
&lt;p&gt;gradle脚本使用&lt;code&gt;groovy&lt;/code&gt;编写，最近也开始支持用&lt;code&gt;Kotlin&lt;/code&gt;编写。Kotlin大法好，但我暂时只找到了groovy的教程&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;，暂时不想去啃英文，先将就学着。&lt;/p&gt;
&lt;h2 id="gradle安装"&gt;gradle安装&lt;/h2&gt;
&lt;h3 id="命令"&gt;命令&lt;/h3&gt;
&lt;p&gt;对于OSX用户来说，&lt;code&gt;brew install gradle&lt;/code&gt;就可以搞定这个步骤了。但是这里有个问题，就是这样会把openjdk当做依赖装上。也不算很大的问题，也能将就用。&lt;/p&gt;
&lt;h3 id="gradle-wrapper"&gt;gradle wrapper&lt;/h3&gt;
&lt;p&gt;gradle有一个很方便的命令，&lt;code&gt;gradle wrapper&lt;/code&gt;，使用后会创建如下的目录结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
└── gradlew.bat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时即使你没有安装gradle，仍然可以使用&lt;code&gt;./gradlew&lt;/code&gt;代替&lt;code&gt;gradle&lt;/code&gt;执行命令。如&lt;code&gt;./gradlew clean install&lt;/code&gt;。在实际的项目中，这种方式使用比较普遍，因为gradle脚本很多特性受版本影响比较大，一般gradle的版本也会在项目中指定。&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/"&gt;Gradle User Guide 中文版&lt;/a&gt;&lt;/p&gt;
&lt;a href="#fnref-1" class="footnote-backref"&gt;&amp;#8617;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/6.html" />
    <category term="article" />
    <author>
      <name>佚名</name>
    </author>
    <id>https://ntutn.top/article/6.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;h2 id="问题描述"&gt;问题描述&lt;/h2&gt;
&lt;p&gt;和工具线配合完成某个需求，我这边的改动很少，但一鼓作气搞完后却遇到了奇怪的报错。已知工具线的代码大多是java的，而我这边自然是力推Kotlin。我们的代码参考如下：&lt;/p&gt;
&lt;h3 id="代码参考"&gt;代码参考&lt;/h3&gt;
&lt;p&gt;工具线定义了一个接口用于callback&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package a;

interface IPublishCallback {
    void onFinish();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工具线在执行完发布逻辑后无论成功还是失败都会调用我们的callback&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package a;

public class PublishUtil {
    public static void publishVideo(String videoName, IPublishCallback callback) {
        Runnable runnable = () -&amp;gt; {
            try {
                System.out.println(&amp;quot;[&amp;quot; + videoName + &amp;quot;]开始执行耗时发布操作……&amp;quot;);
                Thread.sleep(1000L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            callback.onFinish();
        };
        Thread thread = new Thread(runnable);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们这边的实现是Kotlin的，就是调用了下工具线的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-kt"&gt;package b

import a.PublishUtil

class ShareFromSdkImpl {
    fun doShare() {
        println(&amp;quot;系统分享功能测试&amp;quot;)
        PublishUtil.publishVideo(&amp;quot;测试视频&amp;quot;) {
            println(&amp;quot;发布视频完成回调&amp;quot;)
        }
        println(&amp;quot;完成系统分享方法&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主函数&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-kt"&gt;import b.ShareFromSdkImpl

fun main() {
    ShareFromSdkImpl().doShare()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="问题"&gt;问题&lt;/h2&gt;
&lt;p&gt;上述代码在执行后输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plain"&gt;系统分享功能测试
Exception in thread &amp;quot;main&amp;quot; java.lang.NoClassDefFoundError: a/IPublishCallback
	at b.ShareFromSdkImpl.doShare(ShareFromSdkImpl.kt:8)
	at MainKt.main(main.kt:4)
	at MainKt.main(main.kt)
Caused by: java.lang.ClassNotFoundException: a.IPublishCallback
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 3 more

Process finished with exit code 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在安卓中略有不同，异常类型为&lt;/p&gt;
&lt;p&gt;java.lang.IllegalAccessError: Interface a.IPublishCallback implemented by class com.ss.android.ugc.aweme.plugin.xground.player……&lt;/p&gt;
&lt;h2 id="排查"&gt;排查&lt;/h2&gt;
&lt;p&gt;注意报错中提到的&lt;code&gt;a/IPublishCallback&lt;/code&gt;，是我们前面定义的回调接口。&lt;/p&gt;
&lt;p&gt;我们将lambda改为匿名内部类的写法，这才发现确实是找不到。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.loli.net/2021/08/06/nrZt3QkqDLojcf5.png" alt="2021-08-06_01-33.png" /&gt;&lt;/p&gt;
&lt;p&gt;在使用Lambda形式实现回调时这个错误没有被编译器检查出来，运行时才报出来。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/7.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/7.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;p&gt;昨天整理自己的github仓库的时候发现自己的个人主页多了个徽章：&lt;code&gt;Arctic Code Vault Contributor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.loli.net/2021/01/26/CJOcmPn12o734KQ.png" alt="QQ20210126-143812@2x.png" /&gt;&lt;/p&gt;
&lt;p&gt;So what happened?&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/8/1.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/8/1.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;p&gt;此前的文章中提到，我闲暇时写了个连连看游戏。因为比较闲，正好又对Jetpack Compose比较感兴趣，于是我想用Compose重构界面，学习下Compose的使用。
然后没有花费太大力气就完成了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zerofancy/match/blob/main/app/src/main/java/top/ntutn/match/GameViewModelCompose.kt"&gt;GameViewModelCompose.kt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;于是我想，既然用上Compose了，是不是可以直接迁移到桌面平台？&lt;/p&gt;
&lt;p&gt;这篇文章实际上没什么内容，就是对于折腾过程的一个简单记录，最后的成品在github，直接&lt;a href="https://github.com/zerofancy/match-m"&gt;去看代码&lt;/a&gt;就可以了。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/2/0.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/2/0.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.semesse.me/"&gt;色魔是色魔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xyx6.top/"&gt;XYX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://upccaishu.top/"&gt;菜树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ruiovo.top/"&gt;ruiOvO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/1/8.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/1/8.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;p&gt;字节取消大小周了，于是周末时间多起来了。虽然想着到处去玩，但现在疫情形势又不好了，于是安心呆在家里当一个肥宅。除了补一补番剧，就是把之前就想过的连连看游戏做出来了。&lt;/p&gt;
&lt;p&gt;连连看游戏规则简单，点击两个相同的元素，如果他们能在两次拐弯以内连接起来，那么就可以消除。消除后就会出现空位，可以连接的就更多了。在规定时间内连续操作，直到消除所有元素。&lt;/p&gt;
&lt;p&gt;虽然规则比较简单，但真正动手实现一遍还是很费工夫的。游戏既然做好了，那么我水一篇博客不过分吧:&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s3.jpg.cm/2021/08/08/IAjmPL.jpg" alt="连连看游戏界面" /&gt; &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;项目的代码我放到了github。写的贼丑，轻喷。 &lt;a href="https://github.com/zerofancy/match"&gt;https://github.com/zerofancy/match&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;本图片由&lt;a href="https://imagelol.com/?utm_source=iplaysoft.com&amp;amp;hmsr=iplaysoft.com"&gt;笑果图床&lt;/a&gt; 提供支持。&lt;/p&gt;
&lt;a href="#fnref-1" class="footnote-backref"&gt;&amp;#8617;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/1.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/1.html</id>
    <updated>2022-04-11T17:24:47Z</updated>
    <published>2022-04-11T17:24:47Z</published>
    <summary type="text">&lt;h2 id="归零幻想"&gt;归零幻想&lt;/h2&gt;
&lt;img alt="归零幻想" src="/res/img/avatar.jpg" width="200px"&gt;
&lt;hr /&gt;
&lt;p&gt;归零幻想是本人的网名啦，这里是我的博客小站。本人在其他地方帐号大多也叫这个名字。&lt;/p&gt;
&lt;p&gt;本人2021年本科毕业于中国石油大学（华东），现在人在抖音。&lt;/p&gt;
&lt;p&gt;博客系统至今我写过三个版本[^1]，毕竟写出个CRUD就可以厚着脸皮说自己是个博客了。当前版本最初是个Kotlin练手项目，源代码发布在&lt;a href="https://github.com/zerofancy/kmdblog"&gt;github&lt;/a&gt;。不过也就自用罢了，不会有人对我的代码感兴趣吧……&lt;/p&gt;
&lt;p&gt;博客系统作为学生时代练手作品，问题多多，但段时间没有重构或更新的计划。毕竟人在火星，信号延迟高，更新博客都比较少了。&lt;/p&gt;</summary>
  </entry>
</feed>
