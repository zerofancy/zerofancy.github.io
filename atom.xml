<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>归零幻想</title>
  <subtitle type="text">我起源于混乱</subtitle>
  <id>https://ntutn.top</id>
  <updated>2021-10-30T20:15:57Z</updated>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/7.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/7.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">昨天整理自己的github仓库的时候发现自己的个人主页多了个徽章：`Arctic Code Vault Contributor`

![QQ20210126-143812@2x.png](https://i.loli.net/2021/01/26/CJOcmPn12o734KQ.png)

So what happened?</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/6/3.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/6/3.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">新建一个安卓项目，`Android Studio`已经为我们生成的模板中，`build.gradle`总是很显眼。我也终于下定决心来了解下这个构建整合工具。

gradle脚本使用`groovy`编写，最近也开始支持用`Kotlin`编写。Kotlin大法好，但我暂时只找到了groovy的教程[^1]，暂时不想去啃英文，先将就学着。

[^1]:[Gradle User Guide 中文版](https://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/)

## gradle安装

### 命令

对于OSX用户来说，`brew install gradle`就可以搞定这个步骤了。但是这里有个问题，就是这样会把openjdk当做依赖装上。也不算很大的问题，也能将就用。

### gradle wrapper

gradle有一个很方便的命令，`gradle wrapper`，使用后会创建如下的目录结构

```
.
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
└── gradlew.bat
```

此时即使你没有安装gradle，仍然可以使用`./gradlew`代替`gradle`执行命令。如`./gradlew clean install`。在实际的项目中，这种方式使用比较普遍，因为gradle脚本很多特性受版本影响比较大，一般gradle的版本也会在项目中指定。</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/6.html" />
    <category term="article" />
    <author>
      <name>佚名</name>
    </author>
    <id>https://ntutn.top/article/6.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">## 问题描述

和工具线配合完成某个需求，我这边的改动很少，但一鼓作气搞完后却遇到了奇怪的报错。已知工具线的代码大多是java的，而我这边自然是力推Kotlin。我们的代码参考如下：

### 代码参考

工具线定义了一个接口用于callback

```java
package a;

interface IPublishCallback {
    void onFinish();
}

```

工具线在执行完发布逻辑后无论成功还是失败都会调用我们的callback

```java
package a;

public class PublishUtil {
    public static void publishVideo(String videoName, IPublishCallback callback) {
        Runnable runnable = () -&gt; {
            try {
                System.out.println("[" + videoName + "]开始执行耗时发布操作……");
                Thread.sleep(1000L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            callback.onFinish();
        };
        Thread thread = new Thread(runnable);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```

我们这边的实现是Kotlin的，就是调用了下工具线的方法

```kt
package b

import a.PublishUtil

class ShareFromSdkImpl {
    fun doShare() {
        println("系统分享功能测试")
        PublishUtil.publishVideo("测试视频") {
            println("发布视频完成回调")
        }
        println("完成系统分享方法")
    }
}
```

主函数

```kt
import b.ShareFromSdkImpl

fun main() {
    ShareFromSdkImpl().doShare()
}
```

## 问题

上述代码在执行后输出如下：

```plain
系统分享功能测试
Exception in thread "main" java.lang.NoClassDefFoundError: a/IPublishCallback
	at b.ShareFromSdkImpl.doShare(ShareFromSdkImpl.kt:8)
	at MainKt.main(main.kt:4)
	at MainKt.main(main.kt)
Caused by: java.lang.ClassNotFoundException: a.IPublishCallback
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 3 more

Process finished with exit code 1

```

在安卓中略有不同，异常类型为

java.lang.IllegalAccessError: Interface a.IPublishCallback implemented by class com.ss.android.ugc.aweme.plugin.xground.player……

## 排查

注意报错中提到的`a/IPublishCallback`，是我们前面定义的回调接口。

我们将lambda改为匿名内部类的写法，这才发现确实是找不到。

![2021-08-06_01-33.png](https://i.loli.net/2021/08/06/nrZt3QkqDLojcf5.png)

在使用Lambda形式实现回调时这个错误没有被编译器检查出来，运行时才报出来。</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/5/8.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/5/8.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text"># Kotlin

## 变量和函数

### 变量

用`var`和`val`定义变量，并有类型自动推导的支持。

`val`用来声明一个不可变的变量，`var`用来声明一个可变的变量。

```kotlin
val a = 10
var b: Int = 12
```

Kotlin完全抛弃了java中的基本数据类型，完全使用对象数据类型。

|java基本数据类型|Kotlin对象数据类型|数据类型说明|
|---|---|---|
|int|Int|整型|
|long|Long|长整型|
|short|Short|短整型|
|float|Float|单精度浮点型|
|double|Double|双精度浮点型|
|boolean|Boolean|布尔型|
|char|Char|字符型|
|byte|Byte|字节型|

### 函数

语法：

```kotlin
fun main(args: Array&lt;String&gt;) {
    println("Hello World!")
}
```

Kotlin中的函数在无必要时可以省略很多东西：

```kotlin
import kotlin.math.max

fun largerNumber(a: Int, b: Int) = max(a, b)

fun main(args: Array&lt;String&gt;) {
    val a = 3
    val b = 5
    println("The larger number of a and b is ${largerNumber(a, b)}")
}
```

## 程序的逻辑控制

### if

与java中的if语句相比，Kotlin中的if是可以有返回值的。

```kotlin
fun judge(score: Int) = if (score &gt;= 60) "你及格了" else "你还需要多努力"

fun main() {
    println(judge(55))
    println(judge(66))
}
```

与此同时，Kotlin不再有java中的三元运算符[^1]，语义上清晰了很多。

[^1]:参考[Java中的三元运算符](https://www.w3cschool.cn/java/java-ternary-operator.html)

### when条件语句

类似于java中的switch语句，根据变量的值执行不同的逻辑。

```kotlin
fun judge(score: Int) = if (score &gt;= 60) "你及格了" else "你还需要多努力"

fun getScore(name: String) = when (name) {
    "Tom" -&gt; 78
    "Jack" -&gt; 35
    "Jerry" -&gt; 84
    "Lee" -&gt; 57
    else -&gt; 0
}

fun main() {
    println(judge(getScore("Tom")))
    println(judge(getScore("Jack")))
    println(judge(getScore("Bill")))
}
```

对我来说，最令人振奋的是再也不需要在每个分支里面都写个break了。其次when也是有返回值的，这和其他特性组合写出来的代码非常简洁优雅。

写个小demo吧。

```kotlin
interface Speakable {
    fun speak()
}

class Dog : Speakable {
    override fun speak() {
        println("汪汪汪")
    }
}

class Cat : Speakable {
    override fun speak() {
        println("喵喵喵")
    }

    fun climb() {
        println("小猫会爬树")
    }
}

fun generateAnimal(): Speakable? = when ((1..3).random()) {
    1 -&gt; Dog()
    2 -&gt; Cat()
    else -&gt; null
}

fun main() {
    when (val animal = generateAnimal()) {
        is Dog -&gt; {
            println("生成的动物是小狗")
            animal.speak()
        }
        is Cat -&gt; {
            println("生成的动物是小猫")
            animal.speak()
            animal.climb()
        }
        else -&gt; println("生成动物时出现问题")
    }
}
```

### 循环语句

Kotlin中有两类循环，其中`while`循环与java学过的while循环非常相似，只说下有差异的`for`循环吧。

Kotlin的for循环只有for..in式的了，如`for(i in list)`。

但有时对数组下标进行遍历还是有必要的。于是我们要先了解下Kotlin的`区间`的概念。

```kotlin
val range = 1..10
```

这表示`[1,10]`。但很多时候，我们需要左开右闭区间，比如数组有三个元素，我们需要`[0,3)`表示数组的下标。此时可以使用`util`关键字。

```kotlin
val indexRange = 0 util 3
```

有了range再和前面的for配合就完全可以替代之前java里面的for的作用了：

```kotlin
val array = arrayOf("Bob", "John", "Jackson")
for (i in 0 util array.size) {
    println("$i:${array[i]}")
}
```

此外，还可以用`step`指定步长值，实现”隔几个输出一次“的效果：

```kotlin
for (i in 0 util 10 step 2) {
    println(i)
}
```

如果需要10循环到1,则需要`downTo`关键字，

```kotlin
for (i in 10 downTo 1) {
    println(i)
}
```</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/8/1.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/8/1.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">此前的文章中提到，我闲暇时写了个连连看游戏。因为比较闲，正好又对Jetpack Compose比较感兴趣，于是我想用Compose重构界面，学习下Compose的使用。
然后没有花费太大力气就完成了。

[GameViewModelCompose.kt](https://github.com/zerofancy/match/blob/main/app/src/main/java/top/ntutn/match/GameViewModelCompose.kt)

于是我想，既然用上Compose了，是不是可以直接迁移到桌面平台？

这篇文章实际上没什么内容，就是对于折腾过程的一个简单记录，最后的成品在github，直接[去看代码](https://github.com/zerofancy/match-m)就可以了。</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/2/0.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/2/0.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">- [色魔是色魔](https://blog.semesse.me/)
- [XYX](http://www.xyx6.top/)
- [菜树](http://upccaishu.top/)
- [ruiOvO](https://www.ruiovo.top/)</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/1.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/1.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">## 归零幻想

&lt;img alt="归零幻想" src="/res/img/avatar.jpg" width="200px"&gt;

---

归零幻想是本人的网名啦，这里是我的博客小站。本人在其他地方帐号大多也叫这个名字。

本人2021年本科毕业于中国石油大学（华东），现在人在抖音。

博客系统至今我写过三个版本[^1]，毕竟写出个CRUD就可以厚着脸皮说自己是个博客了。当前版本最初是个Kotlin练手项目，源代码发布在[github](https://github.com/zerofancy/kmdblog)。不过也就自用罢了，不会有人对我的代码感兴趣吧……

博客系统作为学生时代练手作品，问题多多，但段时间没有重构或更新的计划。毕竟人在火星，信号延迟高，更新博客都比较少了。</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/1/8.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/1/8.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">字节取消大小周了，于是周末时间多起来了。虽然想着到处去玩，但现在疫情形势又不好了，于是安心呆在家里当一个肥宅。除了补一补番剧，就是把之前就想过的连连看游戏做出来了。

连连看游戏规则简单，点击两个相同的元素，如果他们能在两次拐弯以内连接起来，那么就可以消除。消除后就会出现空位，可以连接的就更多了。在规定时间内连续操作，直到消除所有元素。

虽然规则比较简单，但真正动手实现一遍还是很费工夫的。游戏既然做好了，那么我水一篇博客不过分吧:&gt;

![连连看游戏界面](https://s3.jpg.cm/2021/08/08/IAjmPL.jpg) [^1]

[^1]: 本图片由[笑果图床](https://imagelol.com/?utm_source=iplaysoft.com&amp;hmsr=iplaysoft.com) 提供支持。

项目的代码我放到了github。写的贼丑，轻喷。 [https://github.com/zerofancy/match](https://github.com/zerofancy/match)</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/1/3.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/1/3.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">&gt; 表达式求值是程序设计语言编译中的一个最基本问题，它的实现是栈应用的一个典型例子。

## Question

表达式求值是进行数据处理的最基本操作。请编写程序完成一个简单算术表达式的求值。要求如下： 

1. 运算符包括：`+、-、*、-、^(乘方)、括号`
2. 运算量为数值常量，根据自己的能力可以对运算量做不同的约束，例如1位整数、多位整数、实数等（会有不同的测试用例）；</summary>
  </entry>
  <entry>
    <link rel="alternate" href="https://ntutn.top/article/5.html" />
    <category term="article" />
    <author>
      <name>归零幻想</name>
    </author>
    <id>https://ntutn.top/article/5.html</id>
    <updated>2021-10-30T20:15:57Z</updated>
    <published>2021-10-30T20:15:57Z</published>
    <summary type="text">title: 装饰模式实现分享功能
author: 归零幻想
publishDate: 2021-07-19
editDate: 2021-07-19
tags: [设计模式, Kotlin, 分享]

&lt;!--config--&gt;

在看业务代码时发现了一段代码，应用了装饰模式处理了分享功能的实现，非常巧妙，共赏。

![装饰模式.svg.png.lin.png](https://i.loli.net/2021/07/19/yiSRrDhZx4AT9GI.png)</summary>
  </entry>
</feed>
