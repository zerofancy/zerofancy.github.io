<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>归零幻想的博客</title>
        <description>一枚准程序猿。</description>
        <link>https://ntutn.top</link>
        <item>
            <title>ViewBinding、ViewModel和LiveData</title>
            <description>&lt;p&gt;毕设项目没有历史包袱，我可以尽量向best practice努力。&lt;/p&gt;
&lt;h2 id=&quot;viewbinding&quot;&gt;ViewBinding&lt;/h2&gt;
&lt;p&gt;无数人痛恨findViewById，并且为了干掉它做了许多尝试，比如ButterKnife、kotlin-android-extensions。&lt;/p&gt;
&lt;p&gt;现在，有了ViewBinding，项目中真的可以不写findViewById了。至少目前为止我的毕设项目还没有一个findViewById。&lt;/p&gt;
&lt;p&gt;其实与ViewBinding相似的，还有一个DataBinding，但我不太喜欢，感觉在xml里面写代码不是一个好主意。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;首先在build.gradle（或build.gradle.kts）中的android块添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;buildFeatures {
    viewBinding = true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在xml中正常定义你的布局&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;
    tools:context=&amp;quot;.MainActivity&amp;quot;&amp;gt;

    &amp;lt;TextView
        android:id=&amp;quot;@+id/text_view&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;Hello World!&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/test_button&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;toast&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/change_button&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;change&amp;quot; /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来就可以愉快使用了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package top.ntutn.viewmodeldemo

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import top.ntutn.viewmodeldemo.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }

    private fun initView() {
        binding.apply {
            changeButton.setOnClickListener { textView.text = &amp;quot;Changed!&amp;quot; }
            testButton.setOnClickListener {
                Toast.makeText(
                    this@MainActivity,
                    &amp;quot;Test&amp;quot;,
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们在xml里面用下划线分隔的id在这里就直接变成了binding里面的字段，相当舒服。&lt;/p&gt;
&lt;h3 id=&quot;在recyclerview中的使用&quot;&gt;在RecyclerView中的使用&lt;/h3&gt;
&lt;p&gt;在RecyclerView中代码要稍微发生一点变化，因为我们是在onCreateViewHolder时反射创建布局的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package top.ntutn.viewmodeldemo

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import top.ntutn.viewmodeldemo.databinding.ItemTestBinding

class MyAdapter : RecyclerView.Adapter&amp;lt;MyAdapter.ViewHolder&amp;gt;() {
    class ViewHolder(val binding: ItemTestBinding) : RecyclerView.ViewHolder(binding.root)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        return ViewHolder(
            ItemTestBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        )
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        holder.binding.textView.text = TODO(&amp;quot;Not yet implemented&amp;quot;)
    }

    override fun getItemCount(): Int {
        TODO(&amp;quot;Not yet implemented&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仍然不需要findViewById！&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 22 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/ViewBinding、ViewModel和LiveData.html</link>
        </item><item>
            <title>DebugEntrance和DebugConfig</title>
            <description>&lt;p&gt;工欲善其事，必先利其器。毕设是一个相对复杂的项目了，我觉得要想顺利完成肯定是需要一些手段帮助我调试的。于是这里我准备了debug页面，主要功能就两个：提供某个功能的入口以及存储配置（最好能直接在手机上修改）&lt;/p&gt;
&lt;h2 id=&quot;debugentrance&quot;&gt;DebugEntrance&lt;/h2&gt;
&lt;p&gt;就是一个各种测试功能的入口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/02/22/gOV6niTxoBfXbWv.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个一看实现就很简单，不细说了。&lt;/p&gt;
&lt;h2 id=&quot;debugconfig&quot;&gt;DebugConfig&lt;/h2&gt;
&lt;p&gt;因为字节自己的ABManager用着挺顺手，感觉自己项目调试时有类似这么个东西会比较舒服，于是搞了这么个东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/02/22/Mi8lCJdZBcjnYmO.jpg&quot; alt=&quot;2.jpg&quot; /&gt; &lt;img src=&quot;https://i.loli.net/2021/02/22/cEAfgMVPzrSXmuY.jpg&quot; alt=&quot;3.jpg&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;先看使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;@ZeroConfig(key = &amp;quot;retrofit_config&amp;quot;, title = &amp;quot;Retrofit配置&amp;quot;, owner = &amp;quot;liuhaixin.zero&amp;quot;)
data class RetrofitConfig(val baseUrl: String = RetrofitUtil.BASE_URL)

private val retrofitConfig by zeroConfig&amp;lt;RetrofitConfig&amp;gt;()

private val retrofit by lazy {
    Retrofit.Builder()
        .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())
        .client(okHttpClient)
        .build()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看上去还是有点让人心动的吧。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 22 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/DebugEntrance和DebugConfig.html</link>
        </item><item>
            <title>【译】用BuildSrc和Kotlin_DSL管理Gradle依赖</title>
            <description>&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*ZKNUGwUmBjukpnTrHCeGJA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多模块工程中一个更好的引入依赖的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://medium.com/better-programming/gradle-dependency-management-with-buildsrc-and-kotlin-dsl-1de958eab166&quot;&gt;Gradle Dependency Management With BuildSrc and Kotlin DSL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次尝试翻译英文文章……&lt;/p&gt;
&lt;h2 id=&quot;要点&quot;&gt;要点&lt;/h2&gt;
&lt;p&gt;主要集中在如何用&lt;code&gt;buildSrc&lt;/code&gt;目录和Kotlin DSL脚本构建一个Gradle依赖管理系统，你也会学到这样做相对使用传统Groovy代码的好处。&lt;/p&gt;
&lt;p&gt;如果你倾向于通过视频来看这篇博客，文末附有一个Youtube视频。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;众所周知在一个快速发展的项目中维护依赖是一个乏味的工作，而传统的Groovy脚本没有code navigation、自动补全，再加上性能问题和运行时错误让这一切变得更糟糕。&lt;/p&gt;
&lt;p&gt;更重要的是，多数安卓开发者不懂Groovy，甚至我也不知道我之前在用Groovy做啥。&lt;/p&gt;
&lt;p&gt;感谢Gradle团队和社区的工作提供了一个顺畅安全的构建流程，他们提出的最棒的主意之一就是用Kotlin DSL脚本写buildSrc目录。&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;解决&lt;/h1&gt;
&lt;p&gt;依赖库引入和自定义task不应该放到构建脚本中，它们应该被声明到一个独立文件中再被构建脚本使用。在这个实现的早期，开发者习惯于创建一个Gradle文件来声明所有库并在构建脚本中使用。&lt;/p&gt;
&lt;p&gt;这确实在一定程度上解决了问题，你可以在&lt;a href=&quot;https://medium.com/@sgkantamani/next-level-of-dependencies-declaration-with-kotlin-dsl-scripits-48bfe1cb1f10&quot;&gt;这篇文章&lt;/a&gt;读到这种方法。但这个简单方案不能解决类似自动补全和code navigation的问题，这使得在长远上看这个方案不够可靠。在这之外，buildSrc似乎有希望解决这个问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个目录被当作一个&lt;a href=&quot;https://docs.gradle.org/current/userguide/composite_builds.html#composite_build_intro&quot;&gt;included build&lt;/a&gt;看待。在发现这个目录之后，Gradle自动编译和测试它的代码，并将编译结果放到你的构建脚本的class path中。在一个多模块的工程中只能有一个这样的目录，并且要放到工程的顶级目录中。应该优先通过&lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins&quot;&gt;script plugins&lt;/a&gt;因为这样更便于管理、重构和测试代码。
——Gradle团队&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建buildsrc目录&quot;&gt;创建buildSrc目录&lt;/h2&gt;
&lt;p&gt;使用Kotlin DSL脚本不但能解决构建脚本中的这些问题，还能得到先进的IDE支持，包括code navigation、编译时错误提示等。最重要的，我们再也不用使用Groovy了。&lt;/p&gt;
</description>
            <author>Siva Ganesh Kantamani</author>
            <pubDate>Sun, 21 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/【译】用BuildSrc和Kotlin_DSL管理Gradle依赖.html</link>
        </item><item>
            <title>我的黑历史被github埋到北极了</title>
            <description>&lt;p&gt;昨天整理自己的github仓库的时候发现自己的个人主页多了个徽章：&lt;code&gt;Arctic Code Vault Contributor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/01/26/CJOcmPn12o734KQ.png&quot; alt=&quot;QQ20210126-143812@2x.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 26 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/我的黑历史被github埋到北极了.html</link>
        </item><item>
            <title>android项目开发：多线程编程</title>
            <description>&lt;p&gt;仍然是《第一行代码》的笔记，不过略过了deprated的内容，并探究了下Handler的工作机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上班了，果然没有那么多大块时间写博客了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;handler&quot;&gt;Handler&lt;/h2&gt;
&lt;p&gt;主线程不能进行耗时处理，子线程不能访问UI，所以我们需要异步消息处理机制。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    private val handler = object : Handler(Looper.getMainLooper()) {
        override fun handleMessage(msg: Message) {
            when(msg.what){
                MSG_UPDATE_TEXT -&amp;gt; binding.textView.text = &amp;quot;Nice to meet you. &amp;quot;
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }

    private fun initView() {
        binding.apply {
            changeTextButton.setOnClickListener {
                thread {
                    val msg = Message()
                    msg.what = MSG_UPDATE_TEXT
                    handler.sendMessage(msg)
                }
            }
        }
    }

    companion object {
        private const val MSG_UPDATE_TEXT = 1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;
&lt;p&gt;图片有点多，懒得一张张转移了，去我整理的文档看吧：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bytedance.feishu.cn/docs/doccnRaxHFiTJDYLBuYMzpSSJAd&quot;&gt;安卓Handler异步消息处理机制&lt;/a&gt;&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Wed, 6 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/archieved/android项目开发/多线程编程.html</link>
        </item><item>
            <title>截图不可信,我们能信什么</title>
            <description>&lt;p&gt;这两天网上流传一件事，又有一个拼多多员工猝死了，而这名员工是&lt;strong&gt;98年出生的，年仅23岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/437702180&quot;&gt;如何看待网传拼多多员工加班后猝死一事？拼多多需要承担哪些责任？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前虽然一直有程序员猝死的案例，但总感觉离自己很远，甚至拿&lt;em&gt;程序员钱多话少死的快&lt;/em&gt;这种梗自嘲，但这次我慌了，因为我也是98年的。&lt;/p&gt;
&lt;p&gt;之后也在对这个事情保持关注，然后突然在知乎流传一张截图，截图为拼多多自己在上述问题下的回答，并称该回答已经被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/01/04/yCpvnFqzYGObQju.jpg&quot; alt=&quot;v2-965e16d02fbc62ea9ad792318c88d372_r.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是要搞事情的节奏啊。当然接下来拼多多自然说自己没说过，于是有了第二个问题：&lt;a href=&quot;https://www.zhihu.com/question/437783708&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后知乎小管家发布内容证明拼多多说过：&lt;a href=&quot;https://www.zhihu.com/question/437783708/answer/1660566169&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎小管家的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，拼多多栽了，那么我们有没有别的方法证明这件事情发生过？万一下次是腾讯出了什么问题，小管家扛得住压力吗？&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 4 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/截图不可信,我们能信什么.html</link>
        </item><item>
            <title>android项目开发：通知</title>
            <description>&lt;p&gt;仍然是第一行代码的笔记，这篇是有关通知的，最基本的用法。&lt;/p&gt;
&lt;h2 id=&quot;通知的相关知识&quot;&gt;通知的相关知识&lt;/h2&gt;
&lt;p&gt;通知是什么不再赘述，这里只记录些重要但没接触的概念。&lt;/p&gt;
&lt;p&gt;通知渠道在8.0（O）引入。要求APP将通知分类，通过不同&lt;em&gt;渠道&lt;/em&gt;进行分发，用户可以选择性禁用某个渠道的通知，或者调整优先等级。&lt;/p&gt;
&lt;p&gt;通知可以有不同的重要等级，有四种：&lt;code&gt;IMPORTANCE_HIGH&lt;/code&gt;、&lt;code&gt;IMPORTANCE_DEFAULT&lt;/code&gt;、&lt;code&gt;IMPORTANCE_LOW&lt;/code&gt;、&lt;code&gt;IMPORTANCE_MIN&lt;/code&gt;。根据重要等级不同，通知可能有不同的展现策略，比如在前台提示甚至播放声音。&lt;/p&gt;
&lt;p&gt;在通知渠道创建时通知的重要等级也就确定了，之后不能再被APP修改。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Sun, 3 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/archieved/android项目开发/通知.html</link>
        </item><item>
            <title>android项目开发：持久化</title>
            <description>&lt;p&gt;《第一行代码》阅读记录，有关数据持久化存储，略过了数据库的方式。&lt;/p&gt;
&lt;h1 id=&quot;持久化&quot;&gt;持久化&lt;/h1&gt;
&lt;h2 id=&quot;文件存储&quot;&gt;文件存储&lt;/h2&gt;
&lt;p&gt;先暂时只是写了个demo，有需要再深入看。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
    private fun saveText(inputText: String) {
        try {
            val output = openFileOutput(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE)
            val writer = BufferedWriter(OutputStreamWriter(output))
            writer.use {
                it.write(inputText)
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun loadText(): String {
        val content = StringBuilder()
        try {
            val input = openFileInput(&amp;quot;data&amp;quot;)
            val reader = BufferedReader(InputStreamReader(input))
            reader.use { r -&amp;gt;
                r.forEachLine {
                    content.appendLine(it)
                }
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
        return content.toString()
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;sharedpreference&quot;&gt;SharedPreference&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
            saveButton.setOnClickListener {
                getSharedPreferences(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE).edit {
                    putString(&amp;quot;name&amp;quot;, &amp;quot;Tom&amp;quot;)
                    putInt(&amp;quot;age&amp;quot;, 28)
                    putBoolean(&amp;quot;married&amp;quot;, false)
                }
            }

            restoreButton.setOnClickListener {
                getSharedPreferences(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE).apply {
                    val name = getString(&amp;quot;name&amp;quot;, &amp;quot;苏珊&amp;quot;)
                    val age = getInt(&amp;quot;age&amp;quot;, 15)
                    val isMarried = getBoolean(&amp;quot;married&amp;quot;, false)
                    Toast.makeText(
                        this@MainActivity,
                        &amp;quot;${name}年龄${age}岁${if (isMarried) &amp;quot;已婚&amp;quot; else &amp;quot;未婚&amp;quot;}&amp;quot;,
                        Toast.LENGTH_LONG
                    ).show()
                }
            }

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;数据库&quot;&gt;数据库&lt;/h2&gt;
&lt;p&gt;基本用法demo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
package top.ntutn.databasetest

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.util.Log
import android.widget.Toast

class MyDatabaseHelper(val context: Context, name: String, version: Int) :
    SQLiteOpenHelper(context, name, null, version) {
    private val createBook = &amp;quot;&amp;quot;&amp;quot;
        create table Book (
            id integer primary key autoincrement,
            author text,
            price real,
            pages integer,
            name text
        )
    &amp;quot;&amp;quot;&amp;quot;.trimIndent()
    private val createCategory = &amp;quot;&amp;quot;&amp;quot;
        create table Category (
            id integer primary key autoincrement,
            category_name text,
            category_code integer
        )
    &amp;quot;&amp;quot;&amp;quot;.trimIndent()

    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL(createBook)
        db.execSQL(createCategory)
        Toast.makeText(context, &amp;quot;建立数据库完成&amp;quot;, Toast.LENGTH_LONG).show()
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        if (oldVersion == newVersion) return
        Log.d(javaClass.simpleName, &amp;quot;旧版是${oldVersion}，新版是${newVersion}，数据库升级开始&amp;quot;)
        db.execSQL(&amp;quot;drop table if exists Book&amp;quot;)
        db.execSQL(&amp;quot;drop table if exists Category&amp;quot;)
        onCreate(db)
    }
}

fun cvOf(vararg pairs: Pair&amp;lt;String, Any?&amp;gt;): ContentValues {
    val cv = ContentValues()
    for (pair in pairs) {
        val key = pair.first
        when (val value = pair.second) {
            is Int -&amp;gt; cv.put(key, value)
            is Long -&amp;gt; cv.put(key, value)
            is Short -&amp;gt; cv.put(key, value)
            is Float -&amp;gt; cv.put(key, value)
            is Double -&amp;gt; cv.put(key, value)
            is Boolean -&amp;gt; cv.put(key, value)
            is String -&amp;gt; cv.put(key, value)
            is Byte -&amp;gt; cv.put(key, value)
            is ByteArray -&amp;gt; cv.put(key, value)
            null -&amp;gt; cv.putNull(key)
            else -&amp;gt; throw IllegalArgumentException(&amp;quot;不支持的cv类型&amp;quot;)
        }
    }
    return cv
}

fun Cursor.getString(name: String): String = getString(getColumnIndex(name))

fun Cursor.getInt(name: String): Int = getInt(getColumnIndex(name))

fun Cursor.getDouble(name: String): Double = getDouble(getColumnIndex(name))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
package top.ntutn.databasetest

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import top.ntutn.databasetest.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val dbHelper = MyDatabaseHelper(this, &amp;quot;BookStore.db&amp;quot;, 6)

        binding.createDatabaseButton.setOnClickListener {
            dbHelper.writableDatabase
        }
        binding.addDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val values1 = cvOf(
                &amp;quot;name&amp;quot; to &amp;quot;The Da Vinci Code&amp;quot;,
                &amp;quot;author&amp;quot; to &amp;quot;Dan Brown&amp;quot;,
                &amp;quot;pages&amp;quot; to 454,
                &amp;quot;price&amp;quot; to 16.96
            )
            db.insert(&amp;quot;Book&amp;quot;, null, values1)
            val values2 = cvOf(
                &amp;quot;name&amp;quot; to &amp;quot;The Lost Symbol&amp;quot;,
                &amp;quot;author&amp;quot; to &amp;quot;Dan Brown&amp;quot;,
                &amp;quot;pages&amp;quot; to 510,
                &amp;quot;price&amp;quot; to 19.95
            )
            db.insert(&amp;quot;Book&amp;quot;, null, values2)
        }
        binding.updateDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val values = cvOf(&amp;quot;price&amp;quot; to 10.99)
            db.update(&amp;quot;Book&amp;quot;, values, &amp;quot;name=?&amp;quot;, arrayOf(&amp;quot;The Da Vinci Code&amp;quot;))
        }
        binding.deleteDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            db.delete(&amp;quot;Book&amp;quot;, &amp;quot;pages &amp;gt; ?&amp;quot;, arrayOf(&amp;quot;500&amp;quot;))
        }
        binding.queryDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val cursor = db.query(&amp;quot;Book&amp;quot;, null, null, null, null, null, null)
            if (cursor.moveToFirst()) {
                do {
                    val name = cursor.getString(&amp;quot;name&amp;quot;)
                    val author = cursor.getString(&amp;quot;author&amp;quot;)
                    val pages = cursor.getInt(&amp;quot;pages&amp;quot;)
                    val price = cursor.getDouble(&amp;quot;price&amp;quot;)
                    Log.d(
                        javaClass.simpleName,
                        &amp;quot;name: $name, author: $author, pages: $pages, price: $price&amp;quot;
                    )
                } while (cursor.moveToNext())
            }
            cursor.close()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 28 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/archieved/android项目开发/持久化.html</link>
        </item><item>
            <title>禁用macOS的窗口标签</title>
            <description>&lt;p&gt;作为一个对更新相对激进的用户，我当然是第一时间升级了最新的macOS Big Sur。说实在的，这名字给我的第一印象并不好，因为被我看成了『Big Bug』。&lt;/p&gt;
&lt;p&gt;圆角变大了，还有我一开始比较喜欢的功能，姑且称之为窗口标签。在BigSur中，当你打开两个全屏的Android Studio，它们将出现在同一个窗口，窗口上方出现不同的标签页，和浏览器一样。&lt;/p&gt;
&lt;p&gt;好景不长，这个功能表现很不稳定，我不得不考虑干掉这个功能。如果只是没有成功触发也就算了，大不了当没升级用，但它常常会把一些弹出窗口也搞成和原窗口并列的标签。比如当你rename一个文件时，弹出的窗口有时就会并列到标签上，然后Android Studio就卡死了。&lt;/p&gt;
&lt;p&gt;好吧，既然它开始影响我的工作效率了，我就找了找禁用的方法&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
defaults write com.google.android.studio AppleWindowTabbingMode manual
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;来自&lt;a href=&quot;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&quot;&gt;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;&amp;#8617;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 22 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/禁用macOS的窗口标签.html</link>
        </item><item>
            <title>android项目开发：Broadcast</title>
            <description>&lt;p&gt;仍然是《第一行代码》的学习笔记，安卓内置广播机制。&lt;/p&gt;
&lt;p&gt;Android中每个应用程序都可以对自己感兴趣的广播进行注册，包括来自系统的，和其他应用程序的。&lt;/p&gt;
&lt;p&gt;广播分为标准广播和有序广播。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准广播异步执行，所有BroadcastReceiver几乎同时收到广播的消息。&lt;/li&gt;
&lt;li&gt;有序广播 同步执行，只有前一个Receiver逻辑执行完后才会传递给下一个，且可以将广播截断。&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 22 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/archieved/android项目开发/Broadcast.html</link>
        </item>
    </channel>
</rss>
