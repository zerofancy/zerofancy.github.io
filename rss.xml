<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>归零幻想的博客</title>
        <description>一枚准程序猿。</description>
        <link>https://ntutn.top</link>
        <item>
            <title>android项目开发：多线程编程</title>
            <description>&lt;p&gt;仍然是《第一行代码》的笔记，不过略过了deprated的内容，并探究了下Handler的工作机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上班了，果然没有那么多大块时间写博客了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;handler&quot;&gt;Handler&lt;/h2&gt;
&lt;p&gt;主线程不能进行耗时处理，子线程不能访问UI，所以我们需要异步消息处理机制。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    private val handler = object : Handler(Looper.getMainLooper()) {
        override fun handleMessage(msg: Message) {
            when(msg.what){
                MSG_UPDATE_TEXT -&amp;gt; binding.textView.text = &amp;quot;Nice to meet you. &amp;quot;
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }

    private fun initView() {
        binding.apply {
            changeTextButton.setOnClickListener {
                thread {
                    val msg = Message()
                    msg.what = MSG_UPDATE_TEXT
                    handler.sendMessage(msg)
                }
            }
        }
    }

    companion object {
        private const val MSG_UPDATE_TEXT = 1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;
&lt;p&gt;图片有点多，懒得一张张转移了，去我整理的文档看吧：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bytedance.feishu.cn/docs/doccnRaxHFiTJDYLBuYMzpSSJAd&quot;&gt;安卓Handler异步消息处理机制&lt;/a&gt;&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Wed, 6 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：多线程编程.html</link>
        </item><item>
            <title>截图不可信,我们能信什么</title>
            <description>&lt;p&gt;这两天网上流传一件事，又有一个拼多多员工猝死了，而这名员工是&lt;strong&gt;98年出生的，年仅23岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/437702180&quot;&gt;如何看待网传拼多多员工加班后猝死一事？拼多多需要承担哪些责任？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前虽然一直有程序员猝死的案例，但总感觉离自己很远，甚至拿&lt;em&gt;程序员钱多话少死的快&lt;/em&gt;这种梗自嘲，但这次我慌了，因为我也是98年的。&lt;/p&gt;
&lt;p&gt;之后也在对这个事情保持关注，然后突然在知乎流传一张截图，截图为拼多多自己在上述问题下的回答，并称该回答已经被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/01/04/yCpvnFqzYGObQju.jpg&quot; alt=&quot;v2-965e16d02fbc62ea9ad792318c88d372_r.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是要搞事情的节奏啊。当然接下来拼多多自然说自己没说过，于是有了第二个问题：&lt;a href=&quot;https://www.zhihu.com/question/437783708&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后知乎小管家发布内容证明拼多多说过：&lt;a href=&quot;https://www.zhihu.com/question/437783708/answer/1660566169&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎小管家的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，拼多多栽了，那么我们有没有别的方法证明这件事情发生过？万一下次是腾讯出了什么问题，小管家扛得住压力吗？&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 4 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/截图不可信,我们能信什么.html</link>
        </item><item>
            <title>android项目开发：通知</title>
            <description>&lt;p&gt;仍然是第一行代码的笔记，这篇是有关通知的，最基本的用法。&lt;/p&gt;
&lt;h2 id=&quot;通知的相关知识&quot;&gt;通知的相关知识&lt;/h2&gt;
&lt;p&gt;通知是什么不再赘述，这里只记录些重要但没接触的概念。&lt;/p&gt;
&lt;p&gt;通知渠道在8.0（O）引入。要求APP将通知分类，通过不同&lt;em&gt;渠道&lt;/em&gt;进行分发，用户可以选择性禁用某个渠道的通知，或者调整优先等级。&lt;/p&gt;
&lt;p&gt;通知可以有不同的重要等级，有四种：&lt;code&gt;IMPORTANCE_HIGH&lt;/code&gt;、&lt;code&gt;IMPORTANCE_DEFAULT&lt;/code&gt;、&lt;code&gt;IMPORTANCE_LOW&lt;/code&gt;、&lt;code&gt;IMPORTANCE_MIN&lt;/code&gt;。根据重要等级不同，通知可能有不同的展现策略，比如在前台提示甚至播放声音。&lt;/p&gt;
&lt;p&gt;在通知渠道创建时通知的重要等级也就确定了，之后不能再被APP修改。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Sun, 3 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：通知.html</link>
        </item><item>
            <title>android项目开发：持久化</title>
            <description>&lt;p&gt;《第一行代码》阅读记录，有关数据持久化存储，略过了数据库的方式。&lt;/p&gt;
&lt;h1 id=&quot;持久化&quot;&gt;持久化&lt;/h1&gt;
&lt;h2 id=&quot;文件存储&quot;&gt;文件存储&lt;/h2&gt;
&lt;p&gt;先暂时只是写了个demo，有需要再深入看。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
    private fun saveText(inputText: String) {
        try {
            val output = openFileOutput(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE)
            val writer = BufferedWriter(OutputStreamWriter(output))
            writer.use {
                it.write(inputText)
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun loadText(): String {
        val content = StringBuilder()
        try {
            val input = openFileInput(&amp;quot;data&amp;quot;)
            val reader = BufferedReader(InputStreamReader(input))
            reader.use { r -&amp;gt;
                r.forEachLine {
                    content.appendLine(it)
                }
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
        return content.toString()
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;sharedpreference&quot;&gt;SharedPreference&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
            saveButton.setOnClickListener {
                getSharedPreferences(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE).edit {
                    putString(&amp;quot;name&amp;quot;, &amp;quot;Tom&amp;quot;)
                    putInt(&amp;quot;age&amp;quot;, 28)
                    putBoolean(&amp;quot;married&amp;quot;, false)
                }
            }

            restoreButton.setOnClickListener {
                getSharedPreferences(&amp;quot;data&amp;quot;, Context.MODE_PRIVATE).apply {
                    val name = getString(&amp;quot;name&amp;quot;, &amp;quot;苏珊&amp;quot;)
                    val age = getInt(&amp;quot;age&amp;quot;, 15)
                    val isMarried = getBoolean(&amp;quot;married&amp;quot;, false)
                    Toast.makeText(
                        this@MainActivity,
                        &amp;quot;${name}年龄${age}岁${if (isMarried) &amp;quot;已婚&amp;quot; else &amp;quot;未婚&amp;quot;}&amp;quot;,
                        Toast.LENGTH_LONG
                    ).show()
                }
            }

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;数据库&quot;&gt;数据库&lt;/h2&gt;
&lt;p&gt;基本用法demo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
package top.ntutn.databasetest

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.util.Log
import android.widget.Toast

class MyDatabaseHelper(val context: Context, name: String, version: Int) :
    SQLiteOpenHelper(context, name, null, version) {
    private val createBook = &amp;quot;&amp;quot;&amp;quot;
        create table Book (
            id integer primary key autoincrement,
            author text,
            price real,
            pages integer,
            name text
        )
    &amp;quot;&amp;quot;&amp;quot;.trimIndent()
    private val createCategory = &amp;quot;&amp;quot;&amp;quot;
        create table Category (
            id integer primary key autoincrement,
            category_name text,
            category_code integer
        )
    &amp;quot;&amp;quot;&amp;quot;.trimIndent()

    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL(createBook)
        db.execSQL(createCategory)
        Toast.makeText(context, &amp;quot;建立数据库完成&amp;quot;, Toast.LENGTH_LONG).show()
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        if (oldVersion == newVersion) return
        Log.d(javaClass.simpleName, &amp;quot;旧版是${oldVersion}，新版是${newVersion}，数据库升级开始&amp;quot;)
        db.execSQL(&amp;quot;drop table if exists Book&amp;quot;)
        db.execSQL(&amp;quot;drop table if exists Category&amp;quot;)
        onCreate(db)
    }
}

fun cvOf(vararg pairs: Pair&amp;lt;String, Any?&amp;gt;): ContentValues {
    val cv = ContentValues()
    for (pair in pairs) {
        val key = pair.first
        when (val value = pair.second) {
            is Int -&amp;gt; cv.put(key, value)
            is Long -&amp;gt; cv.put(key, value)
            is Short -&amp;gt; cv.put(key, value)
            is Float -&amp;gt; cv.put(key, value)
            is Double -&amp;gt; cv.put(key, value)
            is Boolean -&amp;gt; cv.put(key, value)
            is String -&amp;gt; cv.put(key, value)
            is Byte -&amp;gt; cv.put(key, value)
            is ByteArray -&amp;gt; cv.put(key, value)
            null -&amp;gt; cv.putNull(key)
            else -&amp;gt; throw IllegalArgumentException(&amp;quot;不支持的cv类型&amp;quot;)
        }
    }
    return cv
}

fun Cursor.getString(name: String): String = getString(getColumnIndex(name))

fun Cursor.getInt(name: String): Int = getInt(getColumnIndex(name))

fun Cursor.getDouble(name: String): Double = getDouble(getColumnIndex(name))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
package top.ntutn.databasetest

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import top.ntutn.databasetest.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val dbHelper = MyDatabaseHelper(this, &amp;quot;BookStore.db&amp;quot;, 6)

        binding.createDatabaseButton.setOnClickListener {
            dbHelper.writableDatabase
        }
        binding.addDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val values1 = cvOf(
                &amp;quot;name&amp;quot; to &amp;quot;The Da Vinci Code&amp;quot;,
                &amp;quot;author&amp;quot; to &amp;quot;Dan Brown&amp;quot;,
                &amp;quot;pages&amp;quot; to 454,
                &amp;quot;price&amp;quot; to 16.96
            )
            db.insert(&amp;quot;Book&amp;quot;, null, values1)
            val values2 = cvOf(
                &amp;quot;name&amp;quot; to &amp;quot;The Lost Symbol&amp;quot;,
                &amp;quot;author&amp;quot; to &amp;quot;Dan Brown&amp;quot;,
                &amp;quot;pages&amp;quot; to 510,
                &amp;quot;price&amp;quot; to 19.95
            )
            db.insert(&amp;quot;Book&amp;quot;, null, values2)
        }
        binding.updateDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val values = cvOf(&amp;quot;price&amp;quot; to 10.99)
            db.update(&amp;quot;Book&amp;quot;, values, &amp;quot;name=?&amp;quot;, arrayOf(&amp;quot;The Da Vinci Code&amp;quot;))
        }
        binding.deleteDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            db.delete(&amp;quot;Book&amp;quot;, &amp;quot;pages &amp;gt; ?&amp;quot;, arrayOf(&amp;quot;500&amp;quot;))
        }
        binding.queryDataButton.setOnClickListener {
            val db = dbHelper.writableDatabase
            val cursor = db.query(&amp;quot;Book&amp;quot;, null, null, null, null, null, null)
            if (cursor.moveToFirst()) {
                do {
                    val name = cursor.getString(&amp;quot;name&amp;quot;)
                    val author = cursor.getString(&amp;quot;author&amp;quot;)
                    val pages = cursor.getInt(&amp;quot;pages&amp;quot;)
                    val price = cursor.getDouble(&amp;quot;price&amp;quot;)
                    Log.d(
                        javaClass.simpleName,
                        &amp;quot;name: $name, author: $author, pages: $pages, price: $price&amp;quot;
                    )
                } while (cursor.moveToNext())
            }
            cursor.close()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 28 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：持久化.html</link>
        </item><item>
            <title>禁用macOS的窗口标签</title>
            <description>&lt;p&gt;作为一个对更新相对激进的用户，我当然是第一时间升级了最新的macOS Big Sur。说实在的，这名字给我的第一印象并不好，因为被我看成了『Big Bug』。&lt;/p&gt;
&lt;p&gt;圆角变大了，还有我一开始比较喜欢的功能，姑且称之为窗口标签。在BigSur中，当你打开两个全屏的Android Studio，它们将出现在同一个窗口，窗口上方出现不同的标签页，和浏览器一样。&lt;/p&gt;
&lt;p&gt;好景不长，这个功能表现很不稳定，我不得不考虑干掉这个功能。如果只是没有成功触发也就算了，大不了当没升级用，但它常常会把一些弹出窗口也搞成和原窗口并列的标签。比如当你rename一个文件时，弹出的窗口有时就会并列到标签上，然后Android Studio就卡死了。&lt;/p&gt;
&lt;p&gt;好吧，既然它开始影响我的工作效率了，我就找了找禁用的方法&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
defaults write com.google.android.studio AppleWindowTabbingMode manual
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;来自&lt;a href=&quot;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&quot;&gt;https://www.reddit.com/r/androiddev/comments/jtbl4m/has_anyone_updated_to_macos_big_sur_and_is/&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;&amp;#8617;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 22 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/禁用macOS的窗口标签.html</link>
        </item><item>
            <title>android项目开发：Broadcast</title>
            <description>&lt;p&gt;仍然是《第一行代码》的学习笔记，安卓内置广播机制。&lt;/p&gt;
&lt;p&gt;Android中每个应用程序都可以对自己感兴趣的广播进行注册，包括来自系统的，和其他应用程序的。&lt;/p&gt;
&lt;p&gt;广播分为标准广播和有序广播。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准广播异步执行，所有BroadcastReceiver几乎同时收到广播的消息。&lt;/li&gt;
&lt;li&gt;有序广播 同步执行，只有前一个Receiver逻辑执行完后才会传递给下一个，且可以将广播截断。&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 22 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：Broadcast.html</link>
        </item><item>
            <title>android项目开发：UI设计</title>
            <description>&lt;p&gt;仍然是《第一行代码》的学习笔记，这里记录的东西相对少一点，UI上的东西还是更多在实际项目中感受到。比如我想没有必要写TextView的介绍吧。&lt;/p&gt;
&lt;h2 id=&quot;控件的使用方法&quot;&gt;控件的使用方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dp&lt;/code&gt;是一种屏幕密度无关的尺寸单位，可以保证在不同分辨率的手机上显示效果尽可能一致。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match_parent&lt;/code&gt;表示让当前控件大小和父布局的大小一致。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wrap_content&lt;/code&gt;表示让当前控件的大小能正好包裹里面的内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android:gravity&lt;/code&gt;指定控件内的内容对齐方式，有&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;start&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;center&lt;/code&gt;等可选，可以用&lt;code&gt;|&lt;/code&gt;指定多个值。比如&lt;code&gt;center&lt;/code&gt;等价于&lt;code&gt;center_vertical|center_horizonal&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;基本布局&quot;&gt;基本布局&lt;/h2&gt;
&lt;h3 id=&quot;linearlayout&quot;&gt;LinearLayout&lt;/h3&gt;
&lt;p&gt;线性布局，通过&lt;code&gt;android:orientation&lt;/code&gt;指定方向。&lt;/p&gt;
&lt;p&gt;有一个重要属性：&lt;code&gt;android:layout_weight&lt;/code&gt;，它将控件已经占用的空间减掉后按照比重分给各个控件。一般我们直接指定&lt;code&gt;android:layout_width&lt;/code&gt;为0dp，而给它指定一个比重，这样控件的尺寸将占满剩余空间。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 21 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：UI设计.html</link>
        </item><item>
            <title>android项目开发：Fragment</title>
            <description>&lt;h1 id=&quot;fragment&quot;&gt;Fragment&lt;/h1&gt;
&lt;h2 id=&quot;fragment的使用方式&quot;&gt;Fragment的使用方式&lt;/h2&gt;
&lt;h3 id=&quot;静态添加fragment&quot;&gt;静态添加Fragment&lt;/h3&gt;
&lt;p&gt;Fragment的写法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;

    &amp;lt;Button
            android:id=&amp;quot;@+id/button&amp;quot;
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;button&amp;quot;
            android:layout_gravity=&amp;quot;center_horizontal&amp;quot;/&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package top.ntutn.fragmenttest

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment

class LeftFragment : Fragment() {
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.left_fragment, container, false)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态添加Fragment&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
              android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;
              android:orientation=&amp;quot;horizontal&amp;quot;
              tools:context=&amp;quot;.MainActivity&amp;quot;&amp;gt;

    &amp;lt;fragment
            android:id=&amp;quot;@+id/leftFragment&amp;quot;
            android:name=&amp;quot;top.ntutn.fragmenttest.LeftFragment&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;match_parent&amp;quot;
            android:layout_weight=&amp;quot;1&amp;quot;/&amp;gt;

    &amp;lt;fragment
            android:id=&amp;quot;@+id/rightFragment&amp;quot;
            android:name=&amp;quot;top.ntutn.fragmenttest.RightFragment&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;match_parent&amp;quot;
            android:layout_weight=&amp;quot;1&amp;quot;/&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 21 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：Fragment.html</link>
        </item><item>
            <title>android项目开发：Activity</title>
            <description>&lt;blockquote&gt;
&lt;p&gt;仍然是《第一行代码》的读书笔记，可能引用原书的定义和描述，或代码案例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;activity&quot;&gt;Activity&lt;/h1&gt;
&lt;h2 id=&quot;activity基本用法&quot;&gt;Activity基本用法&lt;/h2&gt;
&lt;p&gt;Android讲究设计逻辑与视图分离，一般Activity都会对应一个布局文件（XML文件）。&lt;/p&gt;
&lt;p&gt;所有的Activity都要在AndroidManifest中注册才生效。&lt;/p&gt;
&lt;p&gt;Activity可以创建菜单。首先在&lt;code&gt;res/menu&lt;/code&gt;下创建一个xml文件（Android Studio中也提供了可视化编辑的方法）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;menu xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
      xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;

    &amp;lt;item
            android:id=&amp;quot;@+id/add_item&amp;quot;
            android:title=&amp;quot;Add&amp;quot;/&amp;gt;
    &amp;lt;item
            android:id=&amp;quot;@+id/remove_item&amp;quot;
            android:title=&amp;quot;Remove&amp;quot;/&amp;gt;
&amp;lt;/menu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重写两个方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
    menuInflater.inflate(R.menu.main, menu)
    return true
}

override fun onOptionsItemSelected(item: MenuItem): Boolean {
    when (item.itemId) {
        R.id.add_item -&amp;gt; Toast.makeText(this, &amp;quot;Add a book.&amp;quot;, Toast.LENGTH_LONG).show()
        R.id.remove_item -&amp;gt; Toast.makeText(this, &amp;quot;Remove a book.&amp;quot;, Toast.LENGTH_LONG).show()
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/10/a6wOcTFrHLhS4il.jpg&quot; alt=&quot;photo_2020-12-10_21-00-32.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;finish()&lt;/code&gt;方法可以关闭一个Activity。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 15 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/android项目开发：Activity.html</link>
        </item><item>
            <title>作为一名男性，你愿意和丁真互换人生吗</title>
            <description>&lt;p&gt;忘记是哪一天了，一个叫『丁真』的人突然刷屏，热搜十条有6条都是他。但我见怪不怪了，微博热搜本来就是个笑话。&lt;/p&gt;
&lt;p&gt;然后看看贴吧，知乎……全是他。&lt;/p&gt;
&lt;p&gt;那就看看，这回是谁，为啥火了。一个放牛小伙，正巧被摄影师拍了，眼睛澄澈，笑容阳光，剩下的全是营销。&lt;/p&gt;
&lt;p&gt;『为何贴吧男性普遍仇视辱骂丁真？』我玩贴吧，但对丁真没啥恶感，只是对这一堆热搜有恶感：**明明这两天有更值得关注的事情的。**好吧，咱也不知道，咱也不敢问，你们知道有几条热搜被盖过去了就行了。&lt;/p&gt;
&lt;p&gt;『作为一名男性，你愿意和丁真互换人生吗？』好么，没完没了了，还不惜故意挑起性别对立。我就引用某个网友&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;的回答&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/people/geng-liang-jia&quot;&gt;@在下头不是很铁了&lt;/a&gt;，原回答在&lt;a href=&quot;https://www.zhihu.com/question/433944124/answer/1620271267&quot;&gt;某回答&lt;/a&gt;的回复里，但无法直接通过链接打开，大概是被限流了。转载已获授权。&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;&amp;#8617;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Fri, 11 Dec 2020 00:00:00 CST</pubDate>
            <link>https://ntutn.top/作为一名男性，你愿意和丁真互换人生吗.html</link>
        </item>
    </channel>
</rss>
