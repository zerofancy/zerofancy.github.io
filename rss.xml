<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>归零幻想的博客</title>
        <description>一枚准程序猿。</description>
        <link>https://ntutn.top</link>
        <item>
            <title>java默认修饰符问题</title>
            <description>&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;和工具线配合完成某个需求，我这边的改动很少，但一鼓作气搞完后却遇到了奇怪的报错。已知工具线的代码大多是java的，而我这边自然是力推Kotlin。我们的代码参考如下：&lt;/p&gt;
&lt;h3 id=&quot;代码参考&quot;&gt;代码参考&lt;/h3&gt;
&lt;p&gt;工具线定义了一个接口用于callback&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package a;

interface IPublishCallback {
    void onFinish();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工具线在执行完发布逻辑后无论成功还是失败都会调用我们的callback&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package a;

public class PublishUtil {
    public static void publishVideo(String videoName, IPublishCallback callback) {
        Runnable runnable = () -&amp;gt; {
            try {
                System.out.println(&amp;quot;[&amp;quot; + videoName + &amp;quot;]开始执行耗时发布操作……&amp;quot;);
                Thread.sleep(1000L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            callback.onFinish();
        };
        Thread thread = new Thread(runnable);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们这边的实现是Kotlin的，就是调用了下工具线的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kt&quot;&gt;package b

import a.PublishUtil

class ShareFromSdkImpl {
    fun doShare() {
        println(&amp;quot;系统分享功能测试&amp;quot;)
        PublishUtil.publishVideo(&amp;quot;测试视频&amp;quot;) {
            println(&amp;quot;发布视频完成回调&amp;quot;)
        }
        println(&amp;quot;完成系统分享方法&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kt&quot;&gt;import b.ShareFromSdkImpl

fun main() {
    ShareFromSdkImpl().doShare()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;上述代码有无问题，将会得到什么样的运行结果？&lt;/p&gt;
&lt;p&gt;如果有问题，问题出现在哪里，是我的问题还是工具线的问题？&lt;/p&gt;
&lt;h2 id=&quot;答案解析&quot;&gt;答案解析&lt;/h2&gt;
&lt;p&gt;待补充，先占坑。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Thu, 5 Aug 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/java默认修饰符问题.html</link>
        </item><item>
            <title>装饰模式实现分享功能</title>
            <description>&lt;p&gt;在看业务代码时发现了一段代码，应用了装饰模式处理了分享功能的实现，非常巧妙，共赏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/19/yiSRrDhZx4AT9GI.png&quot; alt=&quot;装饰模式.svg.png.lin.png&quot; /&gt;&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 19 Jul 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/装饰模式实现分享功能.html</link>
        </item><item>
            <title>ClassLoader双亲委托机制探究</title>
            <description>&lt;p&gt;最近在研究抖音进入热点内流的耗时问题，种种线索指向了类加载耗时上。为此，我研究了Java类加载的双亲委托机制，并尝试给出了优化建议。&lt;/p&gt;
&lt;h2 id=&quot;双亲委托机制&quot;&gt;双亲委托机制&lt;/h2&gt;
&lt;p&gt;双亲委托机制中最重要的是loadClass方法，让我们看看它是怎么实现的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;    protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve)
        throws ClassNotFoundException
    {
            // First, check if the class has already been loaded
            Class&amp;lt;?&amp;gt; c = findLoadedClass(name); // 已加载过直接返回
            if (c == null) {
                try {
                    if (parent != null) {
                        c = parent.loadClass(name, false); //尝试让parent加载
                    } else {
                        c = findBootstrapClassOrNull(name); // bootstrap class loader是否加载过
                    }
                } catch (ClassNotFoundException e) {
                    // ClassNotFoundException thrown if class not found
                    // from the non-null parent class loader
                }

                if (c == null) {
                    // If still not found, then invoke findClass in order
                    // to find the class.
                    c = findClass(name); // 自己加载（找不到会抛出异常）
                }
            }
            return c;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;findClass就是根据类名去加载具体类的方法，则整个加载机制就很清楚了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先部分类会被BootstrapClassLoader加载，这部分是native实现。&lt;/li&gt;
&lt;li&gt;会先尝试让parent加载&lt;/li&gt;
&lt;li&gt;parent找不到时才会自己加载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我们能创建一个ClassLoader，将它插入到PathClassLoader和BootstrapClassLoader之间，那么所有被PathClassLoader加载的类就都可以记录下来了。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Sun, 11 Apr 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/ClassLoader双亲委托机制探究.html</link>
        </item><item>
            <title>我的朋友们</title>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.semesse.me/&quot;&gt;色魔是色魔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xyx6.top/&quot;&gt;XYX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://upccaishu.top/&quot;&gt;菜树&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Fri, 12 Mar 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/friends.html</link>
        </item><item>
            <title>ViewBinding、ViewModel和LiveData</title>
            <description>&lt;p&gt;毕设项目没有历史包袱，我可以尽量向best practice努力。&lt;/p&gt;
&lt;h2 id=&quot;viewbinding&quot;&gt;ViewBinding&lt;/h2&gt;
&lt;p&gt;无数人痛恨findViewById，并且为了干掉它做了许多尝试，比如ButterKnife、kotlin-android-extensions。&lt;/p&gt;
&lt;p&gt;现在，有了ViewBinding，项目中真的可以不写findViewById了。至少目前为止我的毕设项目还没有一个findViewById。&lt;/p&gt;
&lt;p&gt;其实与ViewBinding相似的，还有一个DataBinding，但我不太喜欢，感觉在xml里面写代码不是一个好主意。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;首先在build.gradle（或build.gradle.kts）中的android块添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;buildFeatures {
    viewBinding = true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在xml中正常定义你的布局&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;
    tools:context=&amp;quot;.MainActivity&amp;quot;&amp;gt;

    &amp;lt;TextView
        android:id=&amp;quot;@+id/text_view&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;Hello World!&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/test_button&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;toast&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/change_button&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;change&amp;quot; /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来就可以愉快使用了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package top.ntutn.viewmodeldemo

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import top.ntutn.viewmodeldemo.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }

    private fun initView() {
        binding.apply {
            changeButton.setOnClickListener { textView.text = &amp;quot;Changed!&amp;quot; }
            testButton.setOnClickListener {
                Toast.makeText(
                    this@MainActivity,
                    &amp;quot;Test&amp;quot;,
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们在xml里面用下划线分隔的id在这里就直接变成了binding里面的字段，相当舒服。&lt;/p&gt;
&lt;h3 id=&quot;在recyclerview中的使用&quot;&gt;在RecyclerView中的使用&lt;/h3&gt;
&lt;p&gt;在RecyclerView中代码要稍微发生一点变化，因为我们是在onCreateViewHolder时反射创建布局的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;package top.ntutn.viewmodeldemo

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import top.ntutn.viewmodeldemo.databinding.ItemTestBinding

class MyAdapter : RecyclerView.Adapter&amp;lt;MyAdapter.ViewHolder&amp;gt;() {
    class ViewHolder(val binding: ItemTestBinding) : RecyclerView.ViewHolder(binding.root)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        return ViewHolder(
            ItemTestBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        )
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        holder.binding.textView.text = TODO(&amp;quot;Not yet implemented&amp;quot;)
    }

    override fun getItemCount(): Int {
        TODO(&amp;quot;Not yet implemented&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仍然不需要findViewById！&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 22 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/ViewBinding、ViewModel和LiveData.html</link>
        </item><item>
            <title>DebugEntrance和DebugConfig</title>
            <description>&lt;p&gt;工欲善其事，必先利其器。毕设是一个相对复杂的项目了，我觉得要想顺利完成肯定是需要一些手段帮助我调试的。于是这里我准备了debug页面，主要功能就两个：提供某个功能的入口以及存储配置（最好能直接在手机上修改）&lt;/p&gt;
&lt;h2 id=&quot;debugentrance&quot;&gt;DebugEntrance&lt;/h2&gt;
&lt;p&gt;就是一个各种测试功能的入口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/02/22/gOV6niTxoBfXbWv.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个一看实现就很简单，不细说了。&lt;/p&gt;
&lt;h2 id=&quot;debugconfig&quot;&gt;DebugConfig&lt;/h2&gt;
&lt;p&gt;因为字节自己的ABManager用着挺顺手，感觉自己项目调试时有类似这么个东西会比较舒服，于是搞了这么个东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/02/22/Mi8lCJdZBcjnYmO.jpg&quot; alt=&quot;2.jpg&quot; /&gt; &lt;img src=&quot;https://i.loli.net/2021/02/22/cEAfgMVPzrSXmuY.jpg&quot; alt=&quot;3.jpg&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;先看使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;@ZeroConfig(key = &amp;quot;retrofit_config&amp;quot;, title = &amp;quot;Retrofit配置&amp;quot;, owner = &amp;quot;liuhaixin.zero&amp;quot;)
data class RetrofitConfig(val baseUrl: String = RetrofitUtil.BASE_URL)

private val retrofitConfig by zeroConfig&amp;lt;RetrofitConfig&amp;gt;()

private val retrofit by lazy {
    Retrofit.Builder()
        .baseUrl(retrofitConfig?.baseUrl ?: BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())
        .client(okHttpClient)
        .build()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看上去还是有点让人心动的吧。&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 22 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/DebugEntrance和DebugConfig.html</link>
        </item><item>
            <title>【译】用BuildSrc和Kotlin_DSL管理Gradle依赖</title>
            <description>&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*ZKNUGwUmBjukpnTrHCeGJA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多模块工程中一个更好的引入依赖的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://medium.com/better-programming/gradle-dependency-management-with-buildsrc-and-kotlin-dsl-1de958eab166&quot;&gt;Gradle Dependency Management With BuildSrc and Kotlin DSL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次尝试翻译英文文章……&lt;/p&gt;
&lt;h2 id=&quot;要点&quot;&gt;要点&lt;/h2&gt;
&lt;p&gt;主要集中在如何用&lt;code&gt;buildSrc&lt;/code&gt;目录和Kotlin DSL脚本构建一个Gradle依赖管理系统，你也会学到这样做相对使用传统Groovy代码的好处。&lt;/p&gt;
&lt;p&gt;如果你倾向于通过视频来看这篇博客，文末附有一个Youtube视频。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;众所周知在一个快速发展的项目中维护依赖是一个乏味的工作，而传统的Groovy脚本没有code navigation、自动补全，再加上性能问题和运行时错误让这一切变得更糟糕。&lt;/p&gt;
&lt;p&gt;更重要的是，多数安卓开发者不懂Groovy，甚至我也不知道我之前在用Groovy做啥。&lt;/p&gt;
&lt;p&gt;感谢Gradle团队和社区的工作提供了一个顺畅安全的构建流程，他们提出的最棒的主意之一就是用Kotlin DSL脚本写buildSrc目录。&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;解决&lt;/h1&gt;
&lt;p&gt;依赖库引入和自定义task不应该放到构建脚本中，它们应该被声明到一个独立文件中再被构建脚本使用。在这个实现的早期，开发者习惯于创建一个Gradle文件来声明所有库并在构建脚本中使用。&lt;/p&gt;
&lt;p&gt;这确实在一定程度上解决了问题，你可以在&lt;a href=&quot;https://medium.com/@sgkantamani/next-level-of-dependencies-declaration-with-kotlin-dsl-scripits-48bfe1cb1f10&quot;&gt;这篇文章&lt;/a&gt;读到这种方法。但这个简单方案不能解决类似自动补全和code navigation的问题，这使得在长远上看这个方案不够可靠。在这之外，buildSrc似乎有希望解决这个问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个目录被当作一个&lt;a href=&quot;https://docs.gradle.org/current/userguide/composite_builds.html#composite_build_intro&quot;&gt;included build&lt;/a&gt;看待。在发现这个目录之后，Gradle自动编译和测试它的代码，并将编译结果放到你的构建脚本的class path中。在一个多模块的工程中只能有一个这样的目录，并且要放到工程的顶级目录中。应该优先通过&lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins&quot;&gt;script plugins&lt;/a&gt;因为这样更便于管理、重构和测试代码。
——Gradle团队&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建buildsrc目录&quot;&gt;创建buildSrc目录&lt;/h2&gt;
&lt;p&gt;使用Kotlin DSL脚本不但能解决构建脚本中的这些问题，还能得到先进的IDE支持，包括code navigation、编译时错误提示等。最重要的，我们再也不用使用Groovy了。&lt;/p&gt;
</description>
            <author>Siva Ganesh Kantamani</author>
            <pubDate>Sun, 21 Feb 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/【译】用BuildSrc和Kotlin_DSL管理Gradle依赖.html</link>
        </item><item>
            <title>我的黑历史被github埋到北极了</title>
            <description>&lt;p&gt;昨天整理自己的github仓库的时候发现自己的个人主页多了个徽章：&lt;code&gt;Arctic Code Vault Contributor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/01/26/CJOcmPn12o734KQ.png&quot; alt=&quot;QQ20210126-143812@2x.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Tue, 26 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/我的黑历史被github埋到北极了.html</link>
        </item><item>
            <title>android项目开发：多线程编程</title>
            <description>&lt;p&gt;仍然是《第一行代码》的笔记，不过略过了deprated的内容，并探究了下Handler的工作机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上班了，果然没有那么多大块时间写博客了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;handler&quot;&gt;Handler&lt;/h2&gt;
&lt;p&gt;主线程不能进行耗时处理，子线程不能访问UI，所以我们需要异步消息处理机制。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;
class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    private val handler = object : Handler(Looper.getMainLooper()) {
        override fun handleMessage(msg: Message) {
            when(msg.what){
                MSG_UPDATE_TEXT -&amp;gt; binding.textView.text = &amp;quot;Nice to meet you. &amp;quot;
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initView()
    }

    private fun initView() {
        binding.apply {
            changeTextButton.setOnClickListener {
                thread {
                    val msg = Message()
                    msg.what = MSG_UPDATE_TEXT
                    handler.sendMessage(msg)
                }
            }
        }
    }

    companion object {
        private const val MSG_UPDATE_TEXT = 1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;
&lt;p&gt;图片有点多，懒得一张张转移了，去我整理的文档看吧：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bytedance.feishu.cn/docs/doccnRaxHFiTJDYLBuYMzpSSJAd&quot;&gt;安卓Handler异步消息处理机制&lt;/a&gt;&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Wed, 6 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/archieved/android项目开发/多线程编程.html</link>
        </item><item>
            <title>截图不可信,我们能信什么</title>
            <description>&lt;p&gt;这两天网上流传一件事，又有一个拼多多员工猝死了，而这名员工是&lt;strong&gt;98年出生的，年仅23岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/437702180&quot;&gt;如何看待网传拼多多员工加班后猝死一事？拼多多需要承担哪些责任？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前虽然一直有程序员猝死的案例，但总感觉离自己很远，甚至拿&lt;em&gt;程序员钱多话少死的快&lt;/em&gt;这种梗自嘲，但这次我慌了，因为我也是98年的。&lt;/p&gt;
&lt;p&gt;之后也在对这个事情保持关注，然后突然在知乎流传一张截图，截图为拼多多自己在上述问题下的回答，并称该回答已经被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/01/04/yCpvnFqzYGObQju.jpg&quot; alt=&quot;v2-965e16d02fbc62ea9ad792318c88d372_r.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是要搞事情的节奏啊。当然接下来拼多多自然说自己没说过，于是有了第二个问题：&lt;a href=&quot;https://www.zhihu.com/question/437783708&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后知乎小管家发布内容证明拼多多说过：&lt;a href=&quot;https://www.zhihu.com/question/437783708/answer/1660566169&quot;&gt;拼多多疑似回应「员工猝死」后秒删，是真的吗？拼多多又称截图系谣言，你相信吗？ - 知乎小管家的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，拼多多栽了，那么我们有没有别的方法证明这件事情发生过？万一下次是腾讯出了什么问题，小管家扛得住压力吗？&lt;/p&gt;
</description>
            <author>归零幻想</author>
            <pubDate>Mon, 4 Jan 2021 00:00:00 CST</pubDate>
            <link>https://ntutn.top/截图不可信,我们能信什么.html</link>
        </item>
    </channel>
</rss>
